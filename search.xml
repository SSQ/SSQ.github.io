<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Udacity-cs253-notebook]]></title>
    <url>%2F2017%2F05%2F01%2FUdacity-cs253-notebook%2F</url>
    <content type="text"><![CDATA[https://classroom.udacity.com/courses/cs253 Components of the Web updated in 2017-05-01 https://classroom.udacity.com/courses/cs253/lessons/48737165/concepts/483298540923 https://www.udacity.com/wiki/cs253 https://developer.mozilla.org/en-US/docs/Learn How the Web Workshttps://www.udacity.com/wiki/cs253/unit-1 Introduction to the Webhttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/AkjMCbSvTto.mp4 World Wide Webhttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/NBI9kXzMHS0.mp4https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/uPTMmyZB7tw.mp4 File Typeshttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/ND8jAv7WrmU.mp4https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/VngVBqQYxVg.mp4 Components of the Webhttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/kzyfIiVZPJA.mp4https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/cVU7hYn-B8I.mp4 Best Browserhttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/57kH7Yole2k.mp4https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/eQDNuWOxaJ0.mp4 HTML Basicshttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/5Kjx-NOwcSc.mp4 Intro to HTML Tagshttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/VsxbuJWcxqA.mp4 Bold Tag&lt;b&gt;content&lt;/b&gt; https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/irJ9o1Uv6U8.mp4https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/JWld9DM-La4.mp4 Italics&lt;em&gt;content&lt;/em&gt; https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/4H23hC78J_A.mp4Instructions: Make the phrase ‘HTML is reasonably straightforward’ italic. Note: the textbox should have default text in it for you to edit. In the meantime, it should look like this: HTML is &lt;b&gt;reasonably straightforward&lt;/b&gt; Your job is to make entire phase italicized by using the &lt;em&gt; tag.https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/1079BoYQUD8.mp4 Missing End Taghttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/OWjh74s_uT4.mp4https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/pKouF71QK_c.mp4 Making Links&lt;tag attr=&quot;value&quot;&gt;content&lt;/tag&gt; &lt;a href=&quot;www.reddit.com&quot;&gt;derp&lt;/a&gt; https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/-0S9lBFHeo0.mp4https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/IjdvSD1tX8U.mp4Errata:URLs need the protocolThe URL in the link should be “http://udacity.com“ and not “udacity.com”. If the default text is missingThe textbox should have default text in it for you to edit. In the meantime, it should look like this: This website is my favorite Your job is to make the words my favorite a link to udacity.com. Adding Images&lt;img src=&quot;url&quot; alt=&quot;text&quot;&gt;https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/Le8i8TtDleU.mp4 Whitespace&lt;br&gt; &lt;p&gt;content&lt;/p&gt; https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/dEtVii1eYYY.mp4https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/at-mlJ0KeMQ.mp4 Paragraph Taghttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/fSnKsMM6DRI.mp4https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/BH46s-hYLXg.mp4 Inline vs Blockinline: &lt;b&gt;&lt;/b&gt; &lt;em&gt;&lt;/em&gt; &lt;img src=&quot;&quot;&gt; block: &lt;p&gt;&lt;/p&gt; https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/bOh9WjucNsA.mp4 Span and Divinline:&lt;span&gt;text&lt;/span&gt; block: &lt;div&gt;text&lt;/div&gt; https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/rv1Oy-EduCk.mp4We now recommend using scratchpad.io instead of the HTML playground Steve refers to.https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/jCdjfORR7BI.mp4 Document Structure&lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;title&gt;Title&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;b&gt;context&lt;/b&gt; &lt;/body&gt; &lt;/html&gt; https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/VL7Wm0UzY6s.mp4 Introducing URLsUniform Resource LocatorFor those of you wondering what an IP address is, wikipedia has this to say: An Internet Protocol address (IP address) is a numerical label assigned to each device (e.g., computer, printer) participating in a computer network that uses the Internet Protocol for communication. An IP address serves two principal functions: host or network interface identification and location addressing. Its role has been characterized as follows: &quot;A name indicates what we seek. An address indicates where it is. A route indicates how to get there.&quot; The URL is the human readable locator which resolves to a numerical IP Address and represents, as Steve says, &quot;the location of the physical machine which has the document we want to fetch.&quot; An example IPv4 address looks like this: 172.16.254.1https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/yKKGg6ihUCs.mp4 Correct URLhttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/kUMasWPRKE4.mp4https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/4_nLjYoN8ks.mp4 Query Parametershttp://example.com/foo?p=1&amp;q=neat name=value https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/qv5XK91OhFo.mp4https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/e7N_4uaoNeI.mp4 Fragmentshttp://www.example.com/foo#fragment http://example.com/foo?p=1#fragment https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/xq95EZdiOQc.mp4 Porthttp://localhost:8000/ port-default=80 https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/3P7e6R9LsRY.mp4The url got slightly cut off at the end. It should read: http://example.com:80/toys?p=foo#blah Note that urls are, in general, case-sensitive, as are most subsections of urls. Keep that in mind when you answer! The full url ishttp://example.com:80/toys?p=foo#blah https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/8hiQyL6lcBs.mp4 Gethttp://www.example.com/foo request line: GET /foo HTTP/1.1 https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/8QjYUp3w5U0.mp4https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/rByBs2dt4dg.mp4 Most Common MethodGET POST https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/F9Fp-LtY7So.mp4https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/pJNxDTa5uP0.mp4 Making Requestsrequest line: GET /foo?p=1 HTTP/1.1 Headers: Name: value Host: www.example.com User-Agent: chrome v.17 https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/5X7wcZuO5mU.mp4 User Agent Headerhttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/oJ6MBvzgPcQ.mp4 Valid Headershttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/RdZDK0121kI.mp4Here is some information about headers that you might find useful.https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/li-vh81yxKI.mp4 HTTP Responsesrequest: request-line: GET /foo HTTP/1.1 response: status-line: HTTP/1.1 200 Ok status code: 200 Ok 302 Found 404 Not found 500 Server Error https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/I4kUB17pTno.mp4 Response Headerstelnet www.udacity.com 80 GET / HTTP/1.0 Host: www.udacity.com https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/Ie0ONOZzNlw.mp4 NOTE:This example does not work properly at the moment, as http://www.udacity.com redirects to https://www.udacity.com. The former uses the protocol HTTP while the site now actually uses the protocol HTTPS. The extra “S” in HTTPS stands for “secure”, and you will hear more about it later. Opening A Terminal WindowMacMethod 1:Open Finder, then go to Applications -&gt; Utilities -&gt; Terminal Method 2:Open Spotlight, type ‘Terminal’, and the correct program should be the top result. LinuxHow you open the terminal varies depending on the specific distro and desktop environment. For Ubuntu, this page has a good introduction to the terminal and how to open it. WindowsOpen the Start Menu, then go to All Programs -&gt; Accessories -&gt; Command Prompt Running TelnetRunning telnet in Windows requires enabling it in “Windows Features” first. This page.aspx) has a good introduction to enabling the telnet client in Windows up to version 8. Windows 10 is similar but you can find “Windows Features” with the search box in the taskbar. Telnet should already be installed on Mac and Linux machines, so you should be able to copy the video exactly. Telnet Requesthttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/CIDBvFiccXE.mp4Since the video was recorded, the location header has changed to http://iana.org You’ll need to use telnet iana.org 80 and GET /domains/example HTTP/1.0 Host: iana.org instead of using domain example.com Since the video was recorded, the location header has changed to http://example.iana.org GET /domains/example HTTP/1.0 Host: iana.orghttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/Ly95z-I1qmA.mp4 Web Applicationshttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/_E8qXBHI4cg.mp4 Dynamic Contenthttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/543bDFHQKTs.mp4https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/4MlMQ5RJ4cc.mp4 Problem Set 1 - Creating Your First CiteGoogle App Enginehttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/Sj_OmHLEdEA.mp4Check out the next lesson, “Problem Set 1 Help” for help getting Google App Engine running. In the current version of Google App Engine (1.9.1 - 2014-03-19), the command line argument to choose a port in dev_appserver.py is no longer “-p”. The argument is now “–port”.https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/PNmji8qNL0s.mp4tutorial in the forum tutorialhttps://console.cloud.google.com/home/dashboard?project=ssq-udacity-cs253 set pathhttp://docs.python-guide.org/en/latest/starting/install/win/ Welcome to Cloud Shell! Type &quot;help&quot; to get started. ssq6554@ssq-udacity-cs253:~$ TUTORIALDIR=~/src/ssq-udacity-cs253/ type: TUTORIALDIR=~/src/ssq-udacity-cs253/ python_gae_quickstart-2017-05-03-15-34 ssq6554@ssq-udacity-cs253:~$ git clone https://github.com/GoogleCloudPlatform/appengine-try-python-flask.git $TUTORIALDIR type: git clone https://github.com/GoogleCloudPlatform/appengine-try-python-flask.git $TUTORIALDIR Cloning into &apos;/home/ssq6554/src/ssq-udacity-cs253/python_gae_quickstart-2017-05-03-15-34&apos;... remote: Counting objects: 386, done. remote: Total 386 (delta 0), reused 0 (delta 0), pack-reused 386 Receiving objects: 100% (386/386), 776.84 KiB | 355.00 KiB/s, done. Resolving deltas: 100% (53/53), done. ssq6554@ssq-udacity-cs253:~$ cd $TUTORIALDIR type: cd $TUTORIALDIR ssq6554@ssq-udacity-cs253:~/src/ssq-udacity-cs253/python_gae_quickstart-2017-05-03-15-34$ git checkout gcloud type: git checkout gcloud Branch gcloud set up to track remote branch gcloud from origin. Switched to a new branch &apos;gcloud&apos; ssq6554@ssq-udacity-cs253:~/src/ssq-udacity-cs253/python_gae_quickstart-2017-05-03-15-34$ dev_appserver.py $PWD type: dev_appserver.py $PWD INFO 2017-05-03 07:45:50,733 devappserver2.py:692] Skipping SDK update check. WARNING 2017-05-03 07:45:50,973 simple_search_stub.py:1152] Could not read search indexes from /tmp/appengine.None.ssq6554/search_indexes INFO 2017-05-03 07:45:50,977 api_server.py:272] Starting API server at: http://0.0.0.0:48288 INFO 2017-05-03 07:45:50,980 dispatcher.py:205] Starting module &quot;default&quot; running at: http://0.0.0.0:8080 INFO 2017-05-03 07:45:50,981 admin_server.py:116] Starting admin server at: http://0.0.0.0:8000 INFO 2017-05-03 07:46:22,190 module.py:813] default: &quot;GET /?authuser=0 HTTP/1.0&quot; 200 12 ^CINFO 2017-05-03 07:46:39,143 shutdown.py:45] Shutting down. INFO 2017-05-03 07:46:39,144 api_server.py:863] Applying all pending transactions and saving the datastore INFO 2017-05-03 07:46:39,144 api_server.py:866] Saving search indexes ssq6554@ssq-udacity-cs253:~/src/ssq-udacity-cs253/python_gae_quickstart-2017-05-03-15-34$ gcloud app deploy app.yaml --project ssq-udacity-cs253 type: gcloud app deploy app.yaml --project ssq-udacity-cs253 You are about to deploy the following services: - ssq-udacity-cs253/default/20170503t155355 (from [/home/ssq6554/src/ssq-udacity-cs253/python_gae_quickstart-2017-05-03-15-34/app.yaml]) Deploying to URL: [https://ssq-udacity-cs253.appspot.com] Do you want to continue (Y/n)? y type: y Beginning deployment of service [default]... Some files were skipped. Pass `--verbosity=info` to see which ones. You may also view the gcloud log file, found at remote: Counting objects: 386, done. [/tmp/tmp.QsMJk5uBEu/logs/2017.05.03/15.53.52.611133.log]. ╔════════════════════════════════════════════════════════════╗ ╠═ Uploading 77 files to Google Cloud Storage ═╣ ╚════════════════════════════════════════════════════════════╝ File upload done. Updating service [default]...done. Deployed service [default] to [https://ssq-udacity-cs253.appspot.com] You can stream logs from the command line by running: $ gcloud app logs tail -s default To view your application in the web browser run: $ gcloud app browse ssq6554@ssq-udacity-cs253:~/src/ssq-udacity-cs253/python_gae_quickstart-2017-05-03-15-34$ succeed in deployinghttp://ssq-udacity-cs253.appspot.com/ (success)Try locallytype: gcloud init gcloud components list Your current Cloud SDK version is: 153.0.0 The latest available version is: 153.0.0 +------------------------------------------------------------------------------- ------------------------------+ | Components | +---------------+------------------------------------------------------+-------- ------------------+-----------+ | Status | Name | ID | Size | +---------------+------------------------------------------------------+-------- ------------------+-----------+ | Not Installed | App Engine Go Extensions | app-eng ine-go | 48.4 MiB | | Not Installed | Bigtable Command Line Tool | cbt | 3.9 MiB | | Not Installed | Cloud Datalab Command Line Tool | datalab | &lt; 1 MiB | | Not Installed | Cloud Datastore Emulator | cloud-d atastore-emulator | 15.4 MiB | | Not Installed | Cloud Datastore Emulator (Legacy) | gcd-emu lator | 38.1 MiB | | Not Installed | Cloud Pub/Sub Emulator | pubsub- emulator | 21.0 MiB | | Not Installed | Emulator Reverse Proxy | emulato r-reverse-proxy | 14.5 MiB | | Not Installed | Google Container Registry&apos;s Docker credential helper | docker- credential-gcr | 3.3 MiB | | Not Installed | gcloud Alpha Commands | alpha | &lt; 1 MiB | | Not Installed | gcloud Beta Commands | beta | &lt; 1 MiB | | Not Installed | gcloud app Java Extensions | app-eng ine-java | 128.6 MiB | | Not Installed | gcloud app PHP Extensions (Windows) | app-eng ine-php-windows | 19.1 MiB | | Not Installed | gcloud app Python Extensions | app-eng ine-python | 6.1 MiB | | Not Installed | kubectl | kubectl | 14.9 MiB | | Installed | BigQuery Command Line Tool | bq | &lt; 1 MiB | | Installed | Cloud SDK Core Libraries | core | 5.9 MiB | | Installed | Cloud Storage Command Line Tool | gsutil | 2.9 MiB | | Installed | Default set of gcloud commands | gcloud | | +---------------+------------------------------------------------------+-------- ------------------+-----------+ To install or remove components at your current SDK version [153.0.0], run: $ gcloud components install COMPONENT_ID $ gcloud components remove COMPONENT_ID To update your SDK installation to the latest version [153.0.0], run: $ gcloud components update type:gcloud components install app-engine-python Restarting command: $ gcloud components install app-engine-python There appears a new cmd window Your current Cloud SDK version is: 153.0.0 Installing components from version: 153.0.0 +--------------------------------------------------+ | These components will be installed. | +------------------------------+---------+---------+ | Name | Version | Size | +------------------------------+---------+---------+ | gcloud app Python Extensions | 1.9.52 | 6.1 MiB | +------------------------------+---------+---------+ For the latest full release notes, please visit: https://cloud.google.com/sdk/release_notes Do you want to continue (Y/n)? type: y #============================================================# #= Creating update staging area =# #============================================================# #= Installing: gcloud app Python Extensions =# #============================================================# #= Creating backup and activating new installation =# #============================================================# Performing post processing steps...done. Update done! 请按任意键继续. . . open git bashtype: git clone https://github.com/GoogleCloudPlatform/python-docs-samplestype: cd G:/\Udacity/\cs253 Cloning into &apos;python-docs-samples&apos;... remote: Counting objects: 10835, done. remote: Compressing objects: 100% (161/161), done. remote: Total 10835 (delta 58), reused 1 (delta 1), pack-reused 10649 Receiving objects: 100% (10835/10835), 4.60 MiB | 190.00 KiB/s, done. Resolving deltas: 100% (5742/5742), done. type: cd python-docs-samples/\appengine/\standard/\hello_world type: dev_appserver.py .look in http://localhost:8080/ (failed)or open cmd Go to cloud.google.com Login and create a project Copy the project id and create a project in App Engine on your machine with same id Install Google Cloud SDK Open Google Cloud SDK shell Type &apos;gcloud init &apos; It will show ur gmail id OR ask u to log in Select the project you created in step 2 Type &apos;gcloud beta app create&apos; It will ask for region - choose the closest region Hit Deploy button in App Engine OR Type &apos;gcloud app deploy &apos; in the shell type: gcloud beta app create You do not currently have this command group installed. Using it requires the installation of components: [beta] Restarting command: $ gcloud components install beta Installing component in a new window. Please re-run this command when installation is complete. $ C:\Users\SSQ\AppData\Local\Google\Cloud SDK\google-cloud-sdk\bin\..\lib\gc loud.py beta app create there opens a new window Your current Cloud SDK version is: 153.0.0 Installing components from version: 153.0.0 +---------------------------------------------+ | These components will be installed. | +----------------------+------------+---------+ | Name | Version | Size | +----------------------+------------+---------+ | gcloud Beta Commands | 2017.03.24 | &lt; 1 MiB | +----------------------+------------+---------+ For the latest full release notes, please visit: https://cloud.google.com/sdk/release_notes Do you want to continue (Y/n)? y #============================================================# #= Creating update staging area =# #============================================================# #= Installing: gcloud Beta Commands =# #============================================================# #= Creating backup and activating new installation =# #============================================================# Performing post processing steps...done. Update done! 请按任意键继续. . . type: gcloud beta app create ERROR: (gcloud.beta.app.create) The project [ssq-udacity-helloworld] already con tains an App Engine application in region [us-central]. You can deploy your app lication using `gcloud app deploy`. type: cd G:\Udacity\cs253\helloworld g:type: gcloud app deploy ERROR: gcloud crashed (UnicodeEncodeError): &apos;ascii&apos; codec can&apos;t encode character u&apos;\xad&apos; in position 22: ordinal not in range(128) If you would like to report this issue, please run the following command: gcloud feedback To check gcloud for common problems, please run the following command: gcloud info --run-diagnostics failedtype: C:\Users\SSQ&gt;python &quot;C:\Users\SSQ\AppData\Local\Google\Cloud SDK\google-cloud-sdk\bin\dev_appserver.py&quot; G:\Udacity\cs253\python-docs-samples\appengine\standard\hello_world\app.yaml success (Fail)try locally againopen Google Cloud SDK Shelltype: python &quot;C:\Users\SSQ\AppData\Local\Google\Cloud SDK\google-cloud-sdk\bin\dev_appserver.py&quot; G:\Udacity\cs253\helloworld\app.yaml it appears: Updates are available for some Cloud SDK components. To install them, please run: $ gcloud components update Traceback (most recent call last): File &quot;C:\Users\SSQ\AppData\Local\Google\Cloud SDK\google-cloud-sdk\platform\go ogle_appengine\dev_appserver.py&quot;, line 103, in &lt;module&gt; _run_file(__file__, globals()) File &quot;C:\Users\SSQ\AppData\Local\Google\Cloud SDK\google-cloud-sdk\platform\go ogle_appengine\dev_appserver.py&quot;, line 97, in _run_file execfile(_PATHS.script_file(script_name), globals_) File &quot;C:\Users\SSQ\AppData\Local\Google\Cloud SDK\google-cloud-sdk\platform\go ogle_appengine\google\appengine\tools\devappserver2\devappserver2.py&quot;, line 899, in &lt;module&gt; main() File &quot;C:\Users\SSQ\AppData\Local\Google\Cloud SDK\google-cloud-sdk\platform\go ogle_appengine\google\appengine\tools\devappserver2\devappserver2.py&quot;, line 895, in main dev_server.stop() File &quot;C:\Users\SSQ\AppData\Local\Google\Cloud SDK\google-cloud-sdk\platform\go ogle_appengine\google\appengine\tools\devappserver2\devappserver2.py&quot;, line 775, in stop metrics.GetMetricsLogger().Stop() File &quot;C:\Users\SSQ\AppData\Local\Google\Cloud SDK\google-cloud-sdk\platform\go ogle_appengine\google\appengine\tools\devappserver2\metrics.py&quot;, line 119, in St op total_run_time = int((Now() - self._start_time).total_seconds()) TypeError: unsupported operand type(s) for -: &apos;datetime.datetime&apos; and &apos;NoneType&apos; type: gcloud components updatethere’s a new window: Your current Cloud SDK version is: 153.0.0 You will be upgraded to version: 154.0.1 +-------------------------------------------------+ | These components will be updated. | +--------------------------+------------+---------+ | Name | Version | Size | +--------------------------+------------+---------+ | Cloud SDK Core Libraries | 2017.05.04 | 6.0 MiB | | gcloud cli dependencies | 2017.05.01 | 1.6 MiB | +--------------------------+------------+---------+ The following release notes are new in this upgrade. Please read carefully for information about new features, breaking changes, and bugs fixed. The latest full release notes can be viewed at: https://cloud.google.com/sdk/release_notes 154.0.1 (2017-05-04) Cloud SDK o Fixed issue in for gcloud init command. See https://issuetracker.google.com/37968909. 154.0.0 (2017-05-03) Cloud SDK o Added support for project creation during the gcloud init flow. Google Cloud Logging o BUG FIX: gcloud beta logging sinks update would remove any start time or end time from a sink o gcloud beta logging sinks describe now reports values of start_time, end_time and include_children o The --include-children flag is now available for gcloud beta logging sinks create to create sinks that apply to an organization or folder and also to all of its child projects and folders. Google Compute Engine o Workaround problems with alpha and beta versions of compute ssh command fail an attempt to use clouduseraccounts APIs. Google Container Engine o Promote --cluster-version from beta to GA in gcloud container clusters create. o &apos;--no-source&apos; flag for &apos;gcloud container builds submit&apos; allows builds with no source input. Google Cloud ML Engine o Added --config parameter to gcloud ml-engine versions create; this parameter allows specifying scaling settings for a version. Google Cloud Speech o The gcloud ml speech commands to recognize spoken words in recorded speech using the Cloud Speech API are now available in beta. Please run gcloud beta ml speech --help or visit https://cloud.google.com/speech/docs/ to learn more. Google App Engine o gcloud beta app deploy now attempts to use the Service Management API to enable the Appengine Flexible Environment API for Flexible deployments, if needed. Before deploying a Flexible app, please ensure that the Flexible Environment API is enabled on the app&apos;s project. o The new Node.js Runtime Builder pipeline will now be used to deploy apps when using gcloud beta app deploy. Google Cloud SQL o Promote gcloud sql operations to GA. The beta surface still remains and is identical. Google Cloud Source Repositories o Add a source repos describe command to describe a repository to the beta track. Do you want to continue (Y/n)? type: y #============================================================# #= Creating update staging area =# #============================================================# #= Uninstalling: Cloud SDK Core Libraries =# #============================================================# #= Uninstalling: gcloud cli dependencies =# #============================================================# #= Installing: Cloud SDK Core Libraries =# #============================================================# #= Installing: gcloud cli dependencies =# #============================================================# #= Creating backup and activating new installation =# #============================================================# Performing post processing steps...done. Update done! To revert your SDK to the previously installed version, you may run: $ gcloud components update --version 153.0.0 请按任意键继续. . . type: `` Traceback (most recent call last): File &quot;C:\Users\SSQ\AppData\Local\Google\Cloud SDK\google-cloud-sdk\platform\go ogle_appengine\dev_appserver.py&quot;, line 103, in &lt;module&gt; _run_file(__file__, globals()) File &quot;C:\Users\SSQ\AppData\Local\Google\Cloud SDK\google-cloud-sdk\platform\go ogle_appengine\dev_appserver.py&quot;, line 97, in _run_file execfile(_PATHS.script_file(script_name), globals_) File &quot;C:\Users\SSQ\AppData\Local\Google\Cloud SDK\google-cloud-sdk\platform\go ogle_appengine\google\appengine\tools\devappserver2\devappserver2.py&quot;, line 899, in &lt;module&gt; main() File &quot;C:\Users\SSQ\AppData\Local\Google\Cloud SDK\google-cloud-sdk\platform\go ogle_appengine\google\appengine\tools\devappserver2\devappserver2.py&quot;, line 895, in main dev_server.stop() File &quot;C:\Users\SSQ\AppData\Local\Google\Cloud SDK\google-cloud-sdk\platform\go ogle_appengine\google\appengine\tools\devappserver2\devappserver2.py&quot;, line 775, in stop metrics.GetMetricsLogger().Stop() File &quot;C:\Users\SSQ\AppData\Local\Google\Cloud SDK\google-cloud-sdk\platform\go ogle_appengine\google\appengine\tools\devappserver2\metrics.py&quot;, line 119, in St op total_run_time = int((Now() - self._start_time).total_seconds()) TypeError: unsupported operand type(s) for -: &apos;datetime.datetime&apos; and &apos;NoneType&apos; Deploy your app to the cloudcd to hello_world dir and type gcloud app deploy G:\Udacity\cs253\python-docs-samples\appengine\standard\hello_world&gt;gcloud app deploy You are about to deploy the following services: - ssq-udacity-cs253/default/20170503t210424 (from [G:\Udacity\cs253\python-docs -samples\appengine\standard\hello_world\app.yaml]) Deploying to URL: [https://ssq-udacity-cs253.appspot.com] Do you want to continue (Y/n)? y type y Beginning deployment of service [default]... Some files were skipped. Pass `--verbosity=info` to see which ones. You may also view the gcloud log file, found at [C:\Users\SSQ\AppData\Roaming\gcloud\logs\2017.05.03\21.04.21.920000.log]. #============================================================# #= Uploading 0 files to Google Cloud Storage =# #============================================================# File upload done. Updating service [default]...done. Deployed service [default] to [https://ssq-udacity-cs253.appspot.com] You can stream logs from the command line by running: $ gcloud app logs tail -s default To view your application in the web browser run: $ gcloud app browse type gcloud app browse G:\Udacity\cs253\python-docs-samples\appengine\standard\hello_world&gt;gcloud app browse Opening [https://ssq-udacity-cs253.appspot.com] in a new tab in your default bro wser. Problem Set 1 HelpIntrohttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/IFYmvf_RNT0.mp4 Install Google App Enginehttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/euox_iFW2eM.mp4 Install Google App EngineMake sure you are downloading Python 2 rather than Python 3, as this is what Google App Engine uses! Changes to Google App EngineThe Google App Engine system (now part of Google Cloud) has changed a lot since this course was created. You will need to create an app with a new, unique name using the Developer Console before you can deploy it. For more information, take a look at these guides written by Udacity mentor Steven Wooding: (Windows), (Mac and Linux) Installing Python on LinuxIf you’re on a Mac or Linux machine, open a terminal and type ‘python -v’ at the prompt. If it returns some information about Python, then you already have Python installed! If not, then Mac users can follow the instructions in the video, and Linux users can use their package managers instead. For Ubuntu or Debian, type ‘sudo apt-get install python’ into your terminal, then your password. For Fedora, type ‘sudo yum install python’ into your terminal, then your password. For other Linux distros, their should be documentation available for your specific package manager. Running Google App Engine on Mac OSUnfortunately Google no longer supports the GoogleAppengineLauncher program that Steve demonstrates in this video. You follow use the instructions below for Linux, or you can download the deprecated GoogleAppengineLauncher installer from the “Supporting Materials” list below. Warning: Use the GoogleAppengineLauncher program at your own peril! As Google no longer supports the tool it may stop working in the future. The gcloud command-line program is the currently supported tool. Running Google App Engine on LinuxTo run the Development Web Server locally, run: dev_appserver.py myapp Where myapp is the name you want your app to have. To upload your code to Google App Engine, run: appcfg.py update helloworld/ Where helloworld/ is the directory you’re running your web app from. Further help is available here and hereHave questions? Head to the forums for discussion with the Udacity Community. Supporting MaterialsWindows Installation Guide for App Engine.pdfGoogleAppEngineLauncher-1.9.40-OSXhttps://discussions.udacity.com/t/problem-set-1-seems-to-be-nothing-like-help-video-shows/215184/3 Office Hours 1https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/QKTIOnISsCw.mp4 Forms and Inputhttps://www.udacity.com/wiki/cs253/unit-2 Introductionhttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/3qgaev6_ZkY.mp4 Forms https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/OnptThLQb_k.mp4 User Inputhttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/qNdg3ZKoKnA.mp4https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/PmF0C6dWzFk.mp4 Naming Inputhttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/IOkzztrmxbg.mp4how to implement play.html:https://discussions.udacity.com/t/unit2-this-is-fustrating/68505/2 Entering Inputhttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/JDwulMznybc.mp4Try the HTML code &lt;form&gt; &lt;input name=&quot;q&quot;&gt; &lt;/form&gt; Note that if you chose the text disappears in addition to the the URL changes with my text, that you are also correct. However, we’re focused on the latter, and arguably more interesting, of these two events. But, you may always re-submit your answer to any quiz.https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/vUHabH7bsTc.mp4 Submitting Inputhttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/easPpLBGf2w.mp4 &lt;form&gt; &lt;input name=&quot;q&quot;&gt; &lt;input type=&quot;submit&quot;&gt; &lt;/form&gt; https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/GMNVeltn0ms.mp4 The Action Attributehttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/UR-I9lkV3No.mp4 &lt;form action=&quot;http://www.google.com/search&quot;&gt; &lt;input name=&quot;q&quot;&gt; &lt;input type=&quot;submit&quot;&gt; &lt;/form&gt; https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/7YawG07y9lg.mp4 URL Encodinghttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/Z3udiqgW1VA.mp4https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/lSjOr6_LaMs.mp4 Hello Webapp Worldhttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/t9qqgCvHxgs.mp4 Content Typehttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/a0k61hlrO9M.mp4https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/TGHZjKuxTB0.mp4 More Handlershttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/9624RoIt2pk.mp4 GET /testform?q=hello+world%21 HTTP/1.1 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8 Accept-Language: zh-CN,zh;q=0.8 Content-Type: ; charset=&quot;utf-8&quot; Cookie: _xsrf=2|69d62867|9814fd50905531e52e958841989ec6fb|1491708993; username-localhost-8890=&quot;2|1:0|10:1491841902|23:username-localhost-8890|44:NzI4YzlkMzc5MzIyNGQ5YTgxMWMzMDAyZDZiY2M4NTY=|69e8bf9e2ec4a47c684886256bda319f88bbbbe1cc4bf5c9193aa52c9449bab1&quot;; username-localhost-8891=&quot;2|1:0|10:1491842087|23:username-localhost-8891|44:YThkM2ViMzc0NmJjNDVhNGE4YWI4OTgwZGE5M2RlYzk=|cd0850025b097f89ae64b4bda7911166954a2384ecd7eb8a17991270ad4111a4&quot;; username-localhost-8889=&quot;2|1:0|10:1492581579|23:username-localhost-8889|44:NGM1MDZlMTUzNWE1NGUzNmFkYTNhMzRiMjdmOGYyNWY=|a15a04a3925f6c3954789ffbdb5b01f5bda3a0c4e9e47420ac1564c5302aaf9d&quot;; username-localhost-8888=&quot;2|1:0|10:1493640422|23:username-localhost-8888|44:NjYzZDYzYThhNmQwNDZiODk2ZTVlZDU0YjkxOTI5MWM=|fb58980d83c777e3d64786ba156f12ab1834a9c404151d3d5dacb943ca4e0616&quot;; Hm_lvt_3c8ad2ecdd2387b44044b1d7cd3536a9=1492997775,1493349600,1493631556,1493712288; _ga=GA1.1.1682530332.1487774100 Host: localhost:8080 Referer: http://localhost:8080/ Upgrade-Insecure-Requests: 1 User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.96 Safari/537.36 X-Appengine-Country: ZZ https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/6BpCLwYGwBA.mp4 The Method Attributehttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/eDotptZ1Nyo.mp4 405 Method Not Allowed The method POST is not allowed for this resource. https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/BOnkFj9uMkg.mp4 http://localhost:8080/testform hello world! Methods and Parametershttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/E_OiAN5VKOM.mp4 import webapp2 form=&quot;&quot;&quot; &lt;form method=&quot;post&quot; action=&quot;/testform&quot;&gt; &lt;input name=&quot;q&quot;&gt; &lt;input type=&quot;submit&quot;&gt; &lt;/form&gt; &quot;&quot;&quot; class MainPage(webapp2.RequestHandler): def get(self): #self.response.headers[&apos;Content-Type&apos;] = &apos;text/plain&apos; self.response.write(form) class TestHandler(webapp2.RequestHandler): def post(self): #q=self.request.get(&quot;q&quot;) #self.response.out.write(q) self.response.headers[&apos;Content-Type&apos;] = &apos;text/plain&apos; self.response.out.write(self.request) app = webapp2.WSGIApplication([ (&apos;/&apos;, MainPage), (&apos;/testform&apos;,TestHandler) ], debug=True) POST /testform HTTP/1.1 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8 Accept-Language: zh-CN,zh;q=0.8 Cache-Control: max-age=0 Content-Length: 16 Content-Type: application/x-www-form-urlencoded; charset=&quot;utf-8&quot; Content_Length: 16 Content_Type: application/x-www-form-urlencoded Cookie: _xsrf=2|69d62867|9814fd50905531e52e958841989ec6fb|1491708993; username-localhost-8890=&quot;2|1:0|10:1491841902|23:username-localhost-8890|44:NzI4YzlkMzc5MzIyNGQ5YTgxMWMzMDAyZDZiY2M4NTY=|69e8bf9e2ec4a47c684886256bda319f88bbbbe1cc4bf5c9193aa52c9449bab1&quot;; username-localhost-8891=&quot;2|1:0|10:1491842087|23:username-localhost-8891|44:YThkM2ViMzc0NmJjNDVhNGE4YWI4OTgwZGE5M2RlYzk=|cd0850025b097f89ae64b4bda7911166954a2384ecd7eb8a17991270ad4111a4&quot;; username-localhost-8889=&quot;2|1:0|10:1492581579|23:username-localhost-8889|44:NGM1MDZlMTUzNWE1NGUzNmFkYTNhMzRiMjdmOGYyNWY=|a15a04a3925f6c3954789ffbdb5b01f5bda3a0c4e9e47420ac1564c5302aaf9d&quot;; username-localhost-8888=&quot;2|1:0|10:1493640422|23:username-localhost-8888|44:NjYzZDYzYThhNmQwNDZiODk2ZTVlZDU0YjkxOTI5MWM=|fb58980d83c777e3d64786ba156f12ab1834a9c404151d3d5dacb943ca4e0616&quot;; Hm_lvt_3c8ad2ecdd2387b44044b1d7cd3536a9=1492997775,1493349600,1493631556,1493712288; _ga=GA1.1.1682530332.1487774100 Host: localhost:8080 Origin: http://localhost:8080 Referer: http://localhost:8080/ Upgrade-Insecure-Requests: 1 User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.96 Safari/537.36 X-Appengine-Country: ZZ q=hello+world%21 https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/9Hj83VRhOQY.mp4 Differences Between Get and Posthttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/UObINRj2EGY.mp4 Problems with Gethttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/cIliEo0zOwg.mp4 When to Use Get and Posthttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/CprytP12okM.mp4https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/KYPi9loZE-M.mp4 Passwordshttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/xS71dGcER_s.mp4 &lt;form&gt; &lt;input type=&quot;password&quot; name=&quot;q&quot;&gt; &lt;input type=&quot;submit&quot;&gt; &lt;/form&gt; file:///G:/Udacity/cs253/L5%20Forms%20and%20Input/play.html?q=hellohttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/oWvmNCuI47k.mp4 Checkboxeshttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/bFK7ZIwnVik.mp4 &lt;form&gt; &lt;input type=&quot;checkbox&quot; name=&quot;q&quot;&gt; &lt;input type=&quot;submit&quot;&gt; &lt;/form&gt; file:///G:/Udacity/cs253/L5%20Forms%20and%20Input/play.html? Multiple Checkboxeshttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/Td_6JT-1MQ0.mp4 &lt;form&gt; &lt;input type=&quot;checkbox&quot; name=&quot;q&quot;&gt; &lt;input type=&quot;checkbox&quot; name=&quot;r&quot;&gt; &lt;input type=&quot;checkbox&quot; name=&quot;s&quot;&gt; &lt;br&gt; &lt;input type=&quot;submit&quot;&gt; &lt;/form&gt; file:///G:/Udacity/cs253/L5%20Forms%20and%20Input/play.html?q=on&amp;r=onhttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/HEACkANsj9o.mp4 Radio Buttonshttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/di_FzsEzyQk.mp4 &lt;form&gt; &lt;input type=&quot;radio&quot; name=&quot;q&quot;&gt; &lt;input type=&quot;radio&quot; name=&quot;r&quot;&gt; &lt;input type=&quot;radio&quot; name=&quot;s&quot;&gt; &lt;br&gt; &lt;input type=&quot;submit&quot;&gt; &lt;/form&gt; file:///G:/Udacity/cs253/L5%20Forms%20and%20Input/play.html?q=on&amp;r=on Grouping Radio Buttonshttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/QKxqWDx2bcs.mp4https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/5GqK_VmlrAY.mp4 Radio Button Valueshttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/xPTL73OT5IY.mp4 &lt;form&gt; &lt;input type=&quot;radio&quot; name=&quot;q&quot;&gt; &lt;input type=&quot;radio&quot; name=&quot;q&quot;&gt; &lt;input type=&quot;radio&quot; name=&quot;q&quot;&gt; &lt;br&gt; &lt;input type=&quot;submit&quot;&gt; &lt;/form&gt; file:///G:/Udacity/cs253/L5%20Forms%20and%20Input/play.html?q=twohttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/hTDenQDEvqU.mp4 Label Elementshttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/XnBMnDGQqtw.mp4 &lt;form&gt; &lt;label&gt; One &lt;input type=&quot;radio&quot; name=&quot;q&quot; value=&quot;one&quot;&gt; &lt;/label&gt; &lt;label&gt; Two &lt;input type=&quot;radio&quot; name=&quot;q&quot; value=&quot;two&quot;&gt; &lt;/label&gt; &lt;label&gt; Three &lt;input type=&quot;radio&quot; name=&quot;q&quot; value=&quot;three&quot;&gt; &lt;/label&gt; &lt;br&gt; &lt;input type=&quot;submit&quot;&gt; &lt;/form&gt; Dropdownshttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/gVtTvYfc5NA.mp4 &lt;form&gt; &lt;select name=&quot;q&quot;&gt; &lt;option&gt;One&lt;/option&gt; &lt;option&gt;Two&lt;/option&gt; &lt;option&gt;Three&lt;/option&gt; &lt;/select&gt; &lt;br&gt; &lt;input type=&quot;submit&quot;&gt; &lt;/form&gt; file:///G:/Udacity/cs253/L5%20Forms%20and%20Input/play.html?q=Twohttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/joUhCZw_zG0.mp4 Dropdowns and Valueshttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/q2jmRGrAixc.mp4 The Number Onehttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/mRTBZNTmimA.mp4 &lt;form&gt; &lt;select name=&quot;q&quot;&gt; &lt;option value=&quot;1&quot;&gt;the number One&lt;/option&gt; &lt;option&gt;Two&lt;/option&gt; &lt;option&gt;Three&lt;/option&gt; &lt;/select&gt; &lt;br&gt; &lt;input type=&quot;submit&quot;&gt; &lt;/form&gt; https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/zCBUF8oDJPE.mp4 Validationhttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/uC8ny0rTzIE.mp4 What Is Your Birthday?https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/Gx16pZ7crqU.mp4 import webapp2 form=&quot;&quot;&quot; &lt;form method=&quot;post&quot;&gt; What&apos;s your birthday? &lt;br&gt; &lt;label&gt; Month &lt;input type=&quot;text&quot;&gt; &lt;/label&gt; &lt;label&gt; Day &lt;input type=&quot;text&quot;&gt; &lt;/label&gt; &lt;label&gt; Year &lt;input type=&quot;text&quot;&gt; &lt;/label&gt; &lt;br&gt; &lt;br&gt; &lt;input type=&quot;submit&quot;&gt; &lt;/form&gt; &quot;&quot;&quot; class MainPage(webapp2.RequestHandler): def get(self): #self.response.headers[&apos;Content-Type&apos;] = &apos;text/plain&apos; self.response.write(form) app = webapp2.WSGIApplication([ (&apos;/&apos;, MainPage) ], debug=True) 405 Method Not Allowed The method POST is not allowed for this resource. https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/psynonn163k.mp4 Handling Postshttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/NyIz4ht6NGI.mp4 import webapp2 form=&quot;&quot;&quot; &lt;form method=&quot;post&quot;&gt; What&apos;s your birthday? &lt;br&gt; &lt;label&gt; Month &lt;input type=&quot;text&quot;&gt; &lt;/label&gt; &lt;label&gt; Day &lt;input type=&quot;text&quot;&gt; &lt;/label&gt; &lt;label&gt; Year &lt;input type=&quot;text&quot;&gt; &lt;/label&gt; &lt;br&gt; &lt;br&gt; &lt;input type=&quot;submit&quot;&gt; &lt;/form&gt; &quot;&quot;&quot; class MainPage(webapp2.RequestHandler): def get(self): #self.response.headers[&apos;Content-Type&apos;] = &apos;text/plain&apos; self.response.out.write(form) def post(self): self.response.out.write(&quot;Thanks! That&apos;s a totally valid day!&quot;) app = webapp2.WSGIApplication([ (&apos;/&apos;, MainPage) ], debug=True) Handling Bad Datahttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/fcrTA3_iHLY.mp4https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/u7vPsxvUNMA.mp4 Valid Monthhttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/mOAcUVFqIO0.mp4 Hint: You may want to look into the string.capitalize() function In this answer video, Steve is using list comprehensions to create the dictionary of month abbreviations. If we were to translate this code: month_abbvs = dict((m[:3].lower(),m) for m in months) it would be: month_abbvs = {} for m in months: month_abbvs[m[:3].lower()] = m You can read more about list comprehensions here # ----------- # User Instructions # # Modify the valid_month() function to verify # whether the data a user enters is a valid # month. If the passed in parameter &apos;month&apos; # is not a valid month, return None. # If &apos;month&apos; is a valid month, then return # the name of the month with the first letter # capitalized. # months = [&apos;January&apos;, &apos;February&apos;, &apos;March&apos;, &apos;April&apos;, &apos;May&apos;, &apos;June&apos;, &apos;July&apos;, &apos;August&apos;, &apos;September&apos;, &apos;October&apos;, &apos;November&apos;, &apos;December&apos;] def valid_month(month): # print valid_month(&quot;january&quot;) # =&gt; &quot;January&quot; # print valid_month(&quot;January&quot;) # =&gt; &quot;January&quot; # print valid_month(&quot;foo&quot;) # =&gt; None # print valid_month(&quot;&quot;) # =&gt; None https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/a2sLiEgBl9k.mp4 month_abbvs = dict((m[:3].lower(),m) for m in months) def valid_month(month): if month: short_month=month[:3].lower() return month_abbvs.get(short_month) Valid Dayhttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/jj44KNeNK3A.mp4 # ----------- # User Instructions # # Modify the valid_day() function to verify # whether the string a user enters is a valid # day. The valid_day() function takes as # input a String, and returns either a valid # Int or None. If the passed in String is # not a valid day, return None. # If it is a valid day, then return # the day as an Int, not a String. Don&apos;t # worry about months of different length. # Assume a day is valid if it is a number # between 1 and 31. # Be careful, the input can be any string # at all, you don&apos;t have any guarantees # that the user will input a sensible # day. # # Hint: The string function isdigit() might be helpful. def valid_day(day): # print valid_day(&apos;0&apos;) # =&gt; None # print valid_day(&apos;1&apos;) # =&gt; 1 # print valid_day(&apos;15&apos;) # =&gt; 15 # print valid_day(&apos;500&apos;) # =&gt; None https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/6CdFM4grsXc.mp4 def valid_day(day): if day and day.isdigit(): day=int(day) if day&gt;0 and day&lt;=31: return day Valid Yearhttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/g1f2nOw7a9M.mp4 # ----------- # User Instructions # # Modify the valid_year() function to verify # whether the string a user enters is a valid # year. If the passed in parameter &apos;year&apos; # is not a valid year, return None. # If &apos;year&apos; is a valid year, then return # the year as a number. Assume a year # is valid if it is a number between 1900 and # 2020. # def valid_year(year): #print valid_year(&apos;0&apos;) #=&gt; None #print valid_year(&apos;-11&apos;) #=&gt; None #print valid_year(&apos;1950&apos;) #=&gt; 1950 #print valid_year(&apos;2000&apos;) #=&gt; 2000 https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/YHEqWp6R0IA.mp4 def valid_year(year): if year and year.isdigit(): year=int(year) if year&gt;1900 and year&lt;=2020: return year Checking Validationhttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/WbBDizcryiA.mp4 Responding Based On Verificationhttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/3EgN3NxgH-Y.mp4 import webapp2 form=&quot;&quot;&quot; &lt;form method=&quot;post&quot;&gt; What&apos;s your birthday? &lt;br&gt; &lt;label&gt; Month &lt;input type=&quot;text&quot; name=&quot;month&quot;&gt; &lt;/label&gt; &lt;label&gt; Day &lt;input type=&quot;text&quot; name=&quot;day&quot;&gt; &lt;/label&gt; &lt;label&gt; Year &lt;input type=&quot;text&quot; name=&quot;year&quot;&gt; &lt;/label&gt; &lt;br&gt; &lt;br&gt; &lt;input type=&quot;submit&quot;&gt; &lt;/form&gt; &quot;&quot;&quot; def valid_day(day): if day and day.isdigit(): day=int(day) if day&gt;0 and day&lt;=31: return day months = [&apos;January&apos;, &apos;February&apos;, &apos;March&apos;, &apos;April&apos;, &apos;May&apos;, &apos;June&apos;, &apos;July&apos;, &apos;August&apos;, &apos;September&apos;, &apos;October&apos;, &apos;November&apos;, &apos;December&apos;] month_abbvs = dict((m[:3].lower(),m) for m in months) def valid_month(month): if month: short_month=month[:3].lower() return month_abbvs.get(short_month) def valid_year(year): if(year and year.isdigit()): year = int(year) if(year &lt; 2020 and year &gt; 1880): return year class MainPage(webapp2.RequestHandler): def get(self): #self.response.headers[&apos;Content-Type&apos;] = &apos;text/plain&apos; self.response.out.write(form) def post(self): user_month=valid_month(self.request.get(&apos;month&apos;)) user_day=valid_day(self.request.get(&apos;day&apos;)) user_year=valid_year(self.request.get(&apos;year&apos;)) if not (user_month and user_day and user_year): #self.response.out.write(user_month) self.response.out.write(form) else: self.response.out.write(&quot;Thanks! That&apos;s a totally valid day!&quot;) app = webapp2.WSGIApplication([ (&apos;/&apos;, MainPage) ], debug=True) String Substitutionhttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/DYncK4Tuthc.mp4 # User Instructions # # Write a function &apos;sub1&apos; that, given a # string, embeds that string in # the string: # &quot;I think X is a perfectly normal thing to do in public.&quot; # where X is replaced by the given # string. # The function should return the new string. given_string = &quot;I think %s is a perfectly normal thing to do in public.&quot; def sub1(s): #print sub1(&quot;running&quot;) # =&gt; &quot;I think running is a perfectly normal thing to do in public.&quot; #print sub1(&quot;sleeping&quot;) # =&gt; &quot;I think sleeping is a perfectly normal thing to do in public.&quot; https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/0h0RYI_MGtU.mp4 def sub1(s): return given_string % s Substituting Multiple Stringshttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/ahNxN_Ly5sE.mp4 # User Instructions # # Write a function &apos;sub2&apos; that, given two # strings, embeds those strings in the string: # &quot;I think X and Y are perfectly normal things to do in public.&quot; # where X and Y are replaced by the given # strings. # The function should return the new string. given_string2 = &quot;I think %s and %s are perfectly normal things to do in public.&quot; def sub2(s1, s2): # print sub2(&quot;running&quot;, &quot;sleeping&quot;) # =&gt; &quot;I think running and sleeping are perfectly normal things to do in public.&quot; # print sub2(&quot;sleeping&quot;, &quot;running&quot;) # =&gt; &quot;I think sleeping and running are perfectly normal things to do in public.&quot; https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/K7mx3o3-X3Y.mp4 def sub2(s1, s2): return given_string2 %(s1,s2) Advanced String Substitutionhttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/4OXzeuhwM-E.mp4 # User Instructions # # Write a function &apos;sub_m&apos; that takes a # name and a nickname, and returns a # string of the following format: # &quot;I&apos;m NICKNAME. My real name is NAME, but my friends call me NICKNAME.&quot; # given_string2 = &quot;I&apos;m %(nickname)s. My real name is %(name)s, but my friends call me %(nickname)s.&quot; def sub_m(name, nickname): #print sub_m(&quot;Mike&quot;, &quot;Goose&quot;) # =&gt; &quot;I&apos;m Goose. My real name is Mike, but my friends call me Goose.&quot; https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/3iHZY-xJJUY.mp4 def sub_m(name, nickname): return given_string2 % {&quot;nickname&quot;:nickname,&quot;name&quot;:name} Substituting into Our Formhttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/trxe2U-OplI.mp4 import webapp2 form=&quot;&quot;&quot; &lt;form method=&quot;post&quot;&gt; What&apos;s your birthday? &lt;br&gt; &lt;label&gt; Month &lt;input type=&quot;text&quot; name=&quot;month&quot;&gt; &lt;/label&gt; &lt;label&gt; Day &lt;input type=&quot;text&quot; name=&quot;day&quot;&gt; &lt;/label&gt; &lt;label&gt; Year &lt;input type=&quot;text&quot; name=&quot;year&quot;&gt; &lt;/label&gt; &lt;div style=&quot;color: red&quot;&gt;%(error)s&lt;/div&gt; &lt;br&gt; &lt;br&gt; &lt;input type=&quot;submit&quot;&gt; &lt;/form&gt; &quot;&quot;&quot; def valid_day(day): if day and day.isdigit(): day=int(day) if day&gt;0 and day&lt;=31: return day months = [&apos;January&apos;, &apos;February&apos;, &apos;March&apos;, &apos;April&apos;, &apos;May&apos;, &apos;June&apos;, &apos;July&apos;, &apos;August&apos;, &apos;September&apos;, &apos;October&apos;, &apos;November&apos;, &apos;December&apos;] month_abbvs = dict((m[:3].lower(),m) for m in months) def valid_month(month): if month: short_month=month[:3].lower() return month_abbvs.get(short_month) def valid_year(year): if(year and year.isdigit()): year = int(year) if(year &lt; 2020 and year &gt; 1880): return year class MainPage(webapp2.RequestHandler): def write_form(self, error=&quot;&quot;): self.response.out.write(form %{&quot;error&quot;: error}) def get(self): #self.response.headers[&apos;Content-Type&apos;] = &apos;text/plain&apos; #self.response.out.write(form) self.write_form() def post(self): user_month=valid_month(self.request.get(&apos;month&apos;)) user_day=valid_day(self.request.get(&apos;day&apos;)) user_year=valid_year(self.request.get(&apos;year&apos;)) if not (user_month and user_day and user_year): #self.response.out.write(user_month) #self.response.out.write(form) self.write_form(&quot;That doesn&apos;t look valid to me, friend.&quot;) else: self.response.out.write(&quot;Thanks! That&apos;s a totally valid day!&quot;) app = webapp2.WSGIApplication([ (&apos;/&apos;, MainPage) ], debug=True) Preserving User Inputhttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/BpNhr-xc0Nw.mp4https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/lwHWqkMijss.mp4 Problems with HTML Inputhttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/iWX-XylQsH8.mp4 import webapp2 form=&quot;&quot;&quot; &lt;form method=&quot;post&quot;&gt; What&apos;s your birthday? &lt;br&gt; &lt;label&gt; Month &lt;input type=&quot;text&quot; name=&quot;month&quot; value=&quot;%(month)s&quot;&gt; &lt;/label&gt; &lt;label&gt; Day &lt;input type=&quot;text&quot; name=&quot;day&quot; value=&quot;%(day)s&quot;&gt; &lt;/label&gt; &lt;label&gt; Year &lt;input type=&quot;text&quot; name=&quot;year&quot; value=&quot;%(year)s&quot;&gt; &lt;/label&gt; &lt;div style=&quot;color: red&quot;&gt;%(error)s&lt;/div&gt; &lt;br&gt; &lt;br&gt; &lt;input type=&quot;submit&quot;&gt; &lt;/form&gt; &quot;&quot;&quot; def valid_day(day): if day and day.isdigit(): day=int(day) if day&gt;0 and day&lt;=31: return day months = [&apos;January&apos;, &apos;February&apos;, &apos;March&apos;, &apos;April&apos;, &apos;May&apos;, &apos;June&apos;, &apos;July&apos;, &apos;August&apos;, &apos;September&apos;, &apos;October&apos;, &apos;November&apos;, &apos;December&apos;] month_abbvs = dict((m[:3].lower(),m) for m in months) def valid_month(month): if month: short_month=month[:3].lower() return month_abbvs.get(short_month) def valid_year(year): if(year and year.isdigit()): year = int(year) if(year &lt; 2020 and year &gt; 1880): return year class MainPage(webapp2.RequestHandler): def write_form(self, error=&quot;&quot;, month=&quot;&quot;, day=&quot;&quot;, year=&quot;&quot;): self.response.out.write(form %{&quot;error&quot;: error, &quot;month&quot;: month, &quot;day&quot;: day, &quot;year&quot;: year}) def get(self): #self.response.headers[&apos;Content-Type&apos;] = &apos;text/plain&apos; #self.response.out.write(form) self.write_form() def post(self): user_month = self.request.get(&apos;month&apos;) user_day = self.request.get(&apos;day&apos;) user_year = self.request.get(&apos;year&apos;) month = valid_month(user_month) day = valid_day(user_day) year = valid_year(user_year) if not (month and day and year): #self.response.out.write(user_month) #self.response.out.write(form) self.write_form(&quot;That doesn&apos;t look valid to me, friend.&quot;, user_month, user_day, user_year) else: self.response.out.write(&quot;Thanks! That&apos;s a totally valid day!&quot;) app = webapp2.WSGIApplication([ (&apos;/&apos;, MainPage) ], debug=True) https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/OpOOJcP-fY0.mp4 Handling HTML Inputhttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/K37Ldm4GSPo.mp4 HTML Escapinghttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/teNvqTRP5EY.mp4 Using HTML Escapinghttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/Hp-z-SVf3fw.mp4https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/2T-ubUA5xLk.mp4 Implementing HTML Escapinghttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/NmCRWl-OZ60.mp4 # User Instructions # # Implement the function escape_html(s), which replaces # all instances of: # &gt; with &amp;gt; # &lt; with &amp;lt; # &quot; with &amp;quot; # &amp; with &amp;amp; # and returns the escaped string # Note that your browser will probably automatically # render your escaped text as the corresponding symbols, # but the grading script will still correctly evaluate it. # def escape_html(s): # print escape_html(&apos;&gt;&apos;) # print escape_html(&apos;&lt;&apos;) # print escape_html(&apos;&quot;&apos;) # print escape_html(&quot;&amp;&quot;) https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/4NKBjlnV530.mp4 def escape_html(s): for (i,o) in ((&quot;&amp;&quot;,&quot;&amp;amp;&quot;),(&quot;&gt;&quot;,&quot;&amp;gl;&quot;),(&quot;&lt;&quot;,&quot;&amp;lt;&quot;),(&apos;&quot;&apos;,&quot;&amp;quot;&quot;)): s=s.replace(i,o) return s or import cgi def escape_html(s): return cgi.escape(s, quote = True) Problems Reinventing the Wheelhttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/4YEcl5g3ADA.mp4 Current Limitationshttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/_lRKZMPh5R8.mp4 import webapp2 import cgi def escape_html(s): return cgi.escape(s, quote = True) form=&quot;&quot;&quot; &lt;form method=&quot;post&quot;&gt; What&apos;s your birthday? &lt;br&gt; &lt;label&gt; Month &lt;input type=&quot;text&quot; name=&quot;month&quot; value=&quot;%(month)s&quot;&gt; &lt;/label&gt; &lt;label&gt; Day &lt;input type=&quot;text&quot; name=&quot;day&quot; value=&quot;%(day)s&quot;&gt; &lt;/label&gt; &lt;label&gt; Year &lt;input type=&quot;text&quot; name=&quot;year&quot; value=&quot;%(year)s&quot;&gt; &lt;/label&gt; &lt;div style=&quot;color: red&quot;&gt;%(error)s&lt;/div&gt; &lt;br&gt; &lt;br&gt; &lt;input type=&quot;submit&quot;&gt; &lt;/form&gt; &quot;&quot;&quot; def valid_day(day): if day and day.isdigit(): day=int(day) if day&gt;0 and day&lt;=31: return day months = [&apos;January&apos;, &apos;February&apos;, &apos;March&apos;, &apos;April&apos;, &apos;May&apos;, &apos;June&apos;, &apos;July&apos;, &apos;August&apos;, &apos;September&apos;, &apos;October&apos;, &apos;November&apos;, &apos;December&apos;] month_abbvs = dict((m[:3].lower(),m) for m in months) def valid_month(month): if month: short_month=month[:3].lower() return month_abbvs.get(short_month) def valid_year(year): if(year and year.isdigit()): year = int(year) if(year &lt; 2020 and year &gt; 1880): return year class MainPage(webapp2.RequestHandler): def write_form(self, error=&quot;&quot;, month=&quot;&quot;, day=&quot;&quot;, year=&quot;&quot;): self.response.out.write(form %{&quot;error&quot;: error, &quot;month&quot;: escape_html(month), &quot;day&quot;: escape_html(day), &quot;year&quot;: escape_html(year)}) def get(self): #self.response.headers[&apos;Content-Type&apos;] = &apos;text/plain&apos; #self.response.out.write(form) self.write_form() def post(self): user_month = self.request.get(&apos;month&apos;) user_day = self.request.get(&apos;day&apos;) user_year = self.request.get(&apos;year&apos;) month = valid_month(user_month) day = valid_day(user_day) year = valid_year(user_year) if not (month and day and year): self.write_form(&quot;That doesn&apos;t look valid to me, friend.&quot;, user_month, user_day, user_year) else: self.response.out.write(&quot;Thanks! That&apos;s a totally valid day!&quot;) app = webapp2.WSGIApplication([ (&apos;/&apos;, MainPage) ], debug=True) Redirectionhttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/gjPdQ-ywbPM.mp4 Redirection Advantageshttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/k84dleLQ-WI.mp4https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/eygchvjmP60.mp4 Implementing Redirectionhttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/46HPScqA0CA.mp4 import webapp2 import cgi def escape_html(s): return cgi.escape(s, quote = True) form=&quot;&quot;&quot; &lt;form method=&quot;post&quot;&gt; What&apos;s your birthday? &lt;br&gt; &lt;label&gt; Month &lt;input type=&quot;text&quot; name=&quot;month&quot; value=&quot;%(month)s&quot;&gt; &lt;/label&gt; &lt;label&gt; Day &lt;input type=&quot;text&quot; name=&quot;day&quot; value=&quot;%(day)s&quot;&gt; &lt;/label&gt; &lt;label&gt; Year &lt;input type=&quot;text&quot; name=&quot;year&quot; value=&quot;%(year)s&quot;&gt; &lt;/label&gt; &lt;div style=&quot;color: red&quot;&gt;%(error)s&lt;/div&gt; &lt;br&gt; &lt;br&gt; &lt;input type=&quot;submit&quot;&gt; &lt;/form&gt; &quot;&quot;&quot; def valid_day(day): if day and day.isdigit(): day=int(day) if day&gt;0 and day&lt;=31: return day months = [&apos;January&apos;, &apos;February&apos;, &apos;March&apos;, &apos;April&apos;, &apos;May&apos;, &apos;June&apos;, &apos;July&apos;, &apos;August&apos;, &apos;September&apos;, &apos;October&apos;, &apos;November&apos;, &apos;December&apos;] month_abbvs = dict((m[:3].lower(),m) for m in months) def valid_month(month): if month: short_month=month[:3].lower() return month_abbvs.get(short_month) def valid_year(year): if(year and year.isdigit()): year = int(year) if(year &lt; 2020 and year &gt; 1880): return year class MainPage(webapp2.RequestHandler): def write_form(self, error=&quot;&quot;, month=&quot;&quot;, day=&quot;&quot;, year=&quot;&quot;): self.response.out.write(form %{&quot;error&quot;: error, &quot;month&quot;: escape_html(month), &quot;day&quot;: escape_html(day), &quot;year&quot;: escape_html(year)}) def get(self): self.write_form() def post(self): user_month = self.request.get(&apos;month&apos;) user_day = self.request.get(&apos;day&apos;) user_year = self.request.get(&apos;year&apos;) month = valid_month(user_month) day = valid_day(user_day) year = valid_year(user_year) if not (month and day and year): self.write_form(&quot;That doesn&apos;t look valid to me, friend.&quot;, user_month, user_day, user_year) else: self.redirect(&quot;/thanks&quot;) class ThanksHandler(webapp2.RequestHandler): def get(self): self.response.out.write(&quot;Thanks! That&apos;s a totally valid day!&quot;) app = webapp2.WSGIApplication([ (&apos;/&apos;, MainPage), (&apos;/thanks&apos;, ThanksHandler) ], debug=True) Problem Set 2Rot13https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/uMGNwoFHfB4.mp4In order to be graded correctly for this homework, there are a few things to keep in mind. We’ll be grading your web app by POSTing to your form and retrieving the text that has been encoded with ROT13. There are a few main issues you need to keep in mind in order for this to work: The textarea form element where the user inputs the text to encode must be named ‘text’. In other words, you must have ‘textarea name=”text”‘ for us to post to. The form method must be POST, not GET. You must enter the full url into the supplied textbox above, including the path. For example, our example app is running at http://udacity-cs253.appspot.com/unit2/rot13, but if we instead only entered http://udacity-cs253.appspot.com/ then the grading script would not work. Don’t forget to escape your output! User Signuphttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/SkSJp6IIZfw.mp4In order to be graded correctly for this homework, there are a few things to keep in mind. We’ll be grading your web app by posting to your form and then checking the HTTP Response we receive. There are a few main issues you need to keep in mind in order for this to work: The form elements where the user inputs their username, password, password again, and email address must be named “username”, “password”, “verify”, and “email”, respectively. The form method must be POST, not GET. Upon invalid user input, your web app should re-render the form for the user. Upon valid user input, your web app should redirect to a welcome page for the user. This page must include both “Welcome” and the user’s username. You must enter the full url into the supplied textbox above, including the path. For example, our example app is running at http://udacity-cs253.appspot.com/unit2/signup, but if we instead only entered http://udacity-cs253.appspot.com/ then the grading script would not work. Regular ExpressionsA regular expression is a handy tool for matching text to a pattern. The regular expressions that we’re using to validate you input are as follows: Username: “^[a-zA-Z0-9_-]{3,20}$” Password: “^.{3,20}$” Email: “^[\S]+@[\S]+.[\S]+$” Example code for validating a username is as follows: import re USER_RE = re.compile(r&quot;^[a-zA-Z0-9_-]{3,20}$&quot;) def valid_username(username): return USER_RE.match(username) More information on using regular expressions in Python can be found here NOTE: When you go off to make real applications that require form validation, remember that using regex to check an email address is not quite as simple as we make it seem here. See this Stack Overflow question for more on email validation. Rot13 Solutionhttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/NYzMnbSjOWA.mp4The solution files are here. In order to open them, Windows users will need an archive utility that opens tgz files, like 7zip. Linux and Mac users can use the built-in functionality of their archive managers. Barring that, Linux and Mac users can directly use the command: tar xf hw2.tgz User Signup SolutionThe solution files are here. In order to open them, Windows users will need an archive utility that opens tgz files, like 7zip. Linux and Mac users can use the built-in functionality of their archive managers. Barring that, Linux and Mac users can directly use the command: tar xf hw2.tgz Office Hours 2Question 1https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/0uBFVZRVnrQ.mp4Jinja2 Documentation Question 2https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/5-UWdqZQOIw.mp4 Question 3https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/YY7joMbML8k.mp4 Question 4https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/9vTJkEjXw6Q.mp4We now have a course for beginner Object Oriented Programming in Python: https://www.udacity.com/course/ud036 Question 5https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/rLPeR3A3CnM.mp4 Lesson 8: Lesson 2a-TemplatesWriting a Basic Formhttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/ScXJ5au8q_w.mp4https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/Bnh2EnFQdkw.mp4 Hidden Inputshttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/dfFiYpxh4js.mp4https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/EHACuozhDQA.mp4http://localhost:8080/?food=steak&amp;food=eggs Shopping List Take 1https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/h_EkzhX0D0I.mp412&quot;hello %s&quot; % &quot;SSQ&quot;&apos;hello SSQ&apos; https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/87ieO3hrkDI.mp4 Introducing Templateshttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/nT0wOJ3pQMw.mp4jinja Template Refactorhttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/9HoEid5G4I4.mp4 Variable Substitutionhttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/D6q5TePkyo0.mp4https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/ppsNOLB7p4M.mp4 ErrataDon’t include quotation marks in your solution. For additional clarification on the different render methods, see this discussion thread.&lt;h2&gt;Hello, &lt;/h2&gt; Statement Syntaxhttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/13P8ncVwL_o.mp412345&#123;% if name==&quot;steve&quot; %&#125; hello, steve!&#123;% else %&#125; who are you?&#123;% endif %&#125; Testing Statement Syntaxhttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/zI4rmjjICmU.mp4 Templates and Typeshttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/4VYTtyHnKEs.mp4https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/d-PAPeH0bd0.mp412345&#123;% if n==1 %&#125;n=1&#123;% else %&#125;n!=1&#123;% endif %&#125; 12345def get(self): n=self.request.get(&quot;n&quot;) if n: n=int(n) self.render(&quot;shopping_list.html&quot;, n=n) Templates and Typeshttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/4VYTtyHnKEs.mp4https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/d-PAPeH0bd0.mp412345&#123;% if n==1 %&#125;n=1&#123;% else %&#125;n!=1&#123;% endif %&#125; 12345def get(self): n=self.request.get(&quot;n&quot;) if n: n=int(n) self.render(&quot;shopping_list.html&quot;, n=n) For Loop Syntaxhttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/KzZwbKZweKA.mp4123&#123;% for statement %&#125; body&#123;% endfor %&#125; 12345&lt;ol&gt; &#123;% for x in range(1,n+1) %&#125; &lt;li&gt;&#123;&#123;x ** 2&#125;&#125;&lt;/li&gt; &#123;% endfor %&#125;&lt;/ol&gt; FizzBuzzhttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/nxoQoSYJryc.mp4https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/KhrAMbp2MRA.mp4123n=self.request.get(&quot;n&quot;)if n: n=int(n) 123456789101112131415&lt;ol&gt; &#123;% for i in range(1,n+1) %&#125; &lt;li&gt; &#123;% if i % 3 ==0 and i % 5 ==0 %&#125; fizzbuzz &#123;% elif i % 3 ==0 %&#125; fizz &#123;% elif i % 5 ==0 %&#125; buzz &#123;% else %&#125; &#123;&#123;i&#125;&#125; &#123;% endif %&#125; &lt;/li&gt; &#123;% endfor %&#125;&lt;/ol&gt; Shopping List Take 2https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/BkqW2HKdL0M.mp4get rid of12345678910111213141516output = form_htmloutput_hidden=&quot;&quot;items=self.request.get_all(&quot;food&quot;)if items: output_items=&quot;&quot; for item in items: output_hidden+=hidden_html % item output_items+=item_html % item output_shopping = shopping_list_html % output_items output += output_shoppingoutput=output % output_hiddenself.write(output) and1234567891011121314hidden_html=&quot;&quot;&quot;&lt;input type=&quot;hidden&quot; name=&quot;food&quot; value=&quot;%s&quot;&gt;&quot;&quot;&quot;item_html=&quot;&lt;li&gt;%s&lt;/li&gt;&quot;shopping_list_html=&quot;&quot;&quot;&lt;br&gt;&lt;br&gt;&lt;h2&gt;Shopping List&lt;/h2&gt;&lt;ul&gt;%s&lt;/ul&gt;&quot;&quot;&quot; change following code in your shopping_list.html12345678910111213141516171819202122&lt;form&gt; &lt;h2&gt;Add a food&lt;/h2&gt; &lt;input type=&quot;text&quot; name=&quot;food&quot;&gt; &#123;% if items %&#125; &#123;% for item in items %&#125; &lt;input type=&quot;hidden&quot; name=&quot;food&quot; value=&quot;&#123;&#123;item&#125;&#125;&quot;&gt; &#123;% endfor %&#125; &#123;% endif %&#125; &lt;button&gt;Add&lt;/button&gt; &#123;% if items %&#125; &lt;br&gt; &lt;br&gt; &lt;h2&gt;Shopping List&lt;/h2&gt; &lt;ul&gt; &#123;% for item in items %&#125; &lt;li&gt;&#123;&#123;item&#125;&#125;&lt;/li&gt; &#123;% endfor %&#125; &lt;/ul&gt; &#123;% endif %&#125;&lt;/form&gt; https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/9DaCBZImS54.mp4 self.request.get_all()self.request.get_all() is a function that returns a list of all values that belong to string that matches a key in our query parameter. For example, if we pass in these query parameters: mysite.com?food=chips&amp;food=fruit&amp;food=milk, then get_all() will return a list that contains the strings chips,food,milk Jinja2 TemplatesNote that the bracket and the percent sign needs to be next to each other such as:1&#123;% keyword %&#125; AND NOT1&#123; % keyword % &#125; Escaping Templateshttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/oQJCuxvH_VM.mp4(recommand)first way12jinja_env = jinja2.Environment(loader = jinja2.FileSystemLoader(template_dir), autoescape=True) except:&lt;li&gt;&lt;/li&gt;second way:&lt;li&gt;&lt;/li&gt; Helpful Tipshttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/4eXgr5beSkU.mp4 Template Inheritancehttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/v81yoy1L1Bo.mp4 FizzBuzz Inheritancehttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/ls9qRh8LVts.mp4https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/nmEgJJYhW-I.mp4 Conclusionhttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/O60XPmSy1OY.mp4 Lesson 9: Lesson 3-Databasesnote:https://www.udacity.com/wiki/CS253%20Unit%203 Databaseshttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/EK0lMxBKRRw.mp4 Databases Continuedhttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/Y1av5nYgQKM.mp4 What Is a Database?https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/7yEjSZvZOAo.mp4https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/ngXxI8Q0WTg.mp4 Tableshttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/7ldYR0Uis0I.mp4 Implementing Tables in Pythonhttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/j-KIhN7LKJ8.mp41234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192from collections import namedtuple# make a basic Link classLink = namedtuple(&apos;Link&apos;, [&apos;id&apos;, &apos;submitter_id&apos;, &apos;submitted_time&apos;, &apos;votes&apos;, &apos;title&apos;, &apos;url&apos;])# list of Links to work withlinks = [ Link(0, 60398, 1334014208.0, 109, &quot;C overtakes Java as the No. 1 programming language in the TIOBE index.&quot;, &quot;http://pixelstech.net/article/index.php?id=1333969280&quot;), Link(1, 60254, 1333962645.0, 891, &quot;This explains why technical books are all ridiculously thick and overpriced&quot;, &quot;http://prog21.dadgum.com/65.html&quot;), Link(23, 62945, 1333894106.0, 351, &quot;Learn Haskell Fast and Hard&quot;, &quot;http://yannesposito.com/Scratch/en/blog/Haskell-the-Hard-Way/&quot;), Link(2, 6084, 1333996166.0, 81, &quot;Announcing Yesod 1.0- a robust, developer friendly, high performance web framework for Haskell&quot;, &quot;http://www.yesodweb.com/blog/2012/04/announcing-yesod-1-0&quot;), Link(3, 30305, 1333968061.0, 270, &quot;TIL about the Lisp Curse&quot;, &quot;http://www.winestockwebdesign.com/Essays/Lisp_Curse.html&quot;), Link(4, 59008, 1334016506.0, 19, &quot;The Downfall of Imperative Programming. Functional Programming and the Multicore Revolution&quot;, &quot;http://fpcomplete.com/the-downfall-of-imperative-programming/&quot;), Link(5, 8712, 1333993676.0, 26, &quot;Open Source - Twitter Stock Market Game - &quot;, &quot;http://www.twitstreet.com/&quot;), Link(6, 48626, 1333975127.0, 63, &quot;First look: Qt 5 makes JavaScript a first-class citizen for app development&quot;, &quot;http://arstechnica.com/business/news/2012/04/an-in-depth-look-at-qt-5-making-javascript-a-first-class-citizen-for-native-cross-platform-developme.ars&quot;), Link(7, 30172, 1334017294.0, 5, &quot;Benchmark of Dictionary Structures&quot;, &quot;http://lh3lh3.users.sourceforge.net/udb.shtml&quot;), Link(8, 678, 1334014446.0, 7, &quot;If It&apos;s Not on Prod, It Doesn&apos;t Count: The Value of Frequent Releases&quot;, &quot;http://bits.shutterstock.com/?p=165&quot;), Link(9, 29168, 1334006443.0, 18, &quot;Language proposal: dave&quot;, &quot;http://davelang.github.com/&quot;), Link(17, 48626, 1334020271.0, 1, &quot;LispNYC and EmacsNYC meetup Tuesday Night: Large Scale Development with Elisp &quot;, &quot;http://www.meetup.com/LispNYC/events/47373722/&quot;), Link(101, 62443, 1334018620.0, 4, &quot;research!rsc: Zip Files All The Way Down&quot;, &quot;http://research.swtch.com/zip&quot;), Link(12, 10262, 1334018169.0, 5, &quot;The Tyranny of the Diff&quot;, &quot;http://michaelfeathers.typepad.com/michael_feathers_blog/2012/04/the-tyranny-of-the-diff.html&quot;), Link(13, 20831, 1333996529.0, 14, &quot;Understanding NIO.2 File Channels in Java 7&quot;, &quot;http://java.dzone.com/articles/understanding-nio2-file&quot;), Link(15, 62443, 1333900877.0, 1244, &quot;Why vector icons don&apos;t work&quot;, &quot;http://www.pushing-pixels.org/2011/11/04/about-those-vector-icons.html&quot;), Link(14, 30650, 1334013659.0, 3, &quot;Python - Getting Data Into Graphite - Code Examples&quot;, &quot;http://coreygoldberg.blogspot.com/2012/04/python-getting-data-into-graphite-code.html&quot;), Link(16, 15330, 1333985877.0, 9, &quot;Mozilla: The Web as the Platform and The Kilimanjaro Event&quot;, &quot;https://groups.google.com/forum/?fromgroups#!topic/mozilla.dev.planning/Y9v46wFeejA&quot;), Link(18, 62443, 1333939389.0, 104, &quot;github is making me feel stupid(er)&quot;, &quot;http://www.serpentine.com/blog/2012/04/08/github-is-making-me-feel-stupider/&quot;), Link(19, 6937, 1333949857.0, 39, &quot;BitC Retrospective: The Issues with Type Classes&quot;, &quot;http://www.bitc-lang.org/pipermail/bitc-dev/2012-April/003315.html&quot;), Link(20, 51067, 1333974585.0, 14, &quot;Object Oriented C: Class-like Structures&quot;, &quot;http://cecilsunkure.blogspot.com/2012/04/object-oriented-c-class-like-structures.html&quot;), Link(10, 23944, 1333943632.0, 188, &quot;The LOVE game framework version 0.8.0 has been released - with GLSL shader support!&quot;, &quot;https://love2d.org/forums/viewtopic.php?f=3&amp;amp;t=8750&quot;), Link(22, 39191, 1334005674.0, 11, &quot;An open letter to language designers: Please kill your sacred cows. (megarant)&quot;, &quot;http://joshondesign.com/2012/03/09/open-letter-language-designers&quot;), Link(21, 3777, 1333996565.0, 2, &quot;Developers guide to Garage48 hackatron&quot;, &quot;http://martingryner.com/developers-guide-to-garage48-hackatron/&quot;), Link(24, 48626, 1333934004.0, 17, &quot;An R programmer looks at Julia&quot;, &quot;http://www.r-bloggers.com/an-r-programmer-looks-at-julia/&quot;)]# links is a list of Link objects. Links have a handful of properties. For# example, a Link&apos;s number of votes can be accessed by link.votes if &quot;link&quot; is a# Link.# make the function query() return the number of votes for the link whose ID is# 15def query(): Here is more information on namedtuple used in this exercise.https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/0jE0n6deDpk.mp4 Queryinghttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/2TFA879U_pc.mp4123456789def query(): submision=[] for l in links: if l.submitter_id==62443: submision.append(l) submision.sort(key=lambda x: x.submitted_time) return submision print query() https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/aXwzyv11_4Q.mp4Here is more information on sorting and Lambda expressions in Python . Why Databases?https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/bGvBewhooJc.mp4 Types of Databaseshttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/MORw_tCy42A.mp4https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/Q3tsjEH9W-c.mp4 SQLhttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/vgP5bfu0na4.mp4 Databases in Pythonhttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/oleOUdXSfs0.mp4123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121from collections import namedtupleimport sqlite3# make a basic Link classLink = namedtuple(&apos;Link&apos;, [&apos;id&apos;, &apos;submitter_id&apos;, &apos;submitted_time&apos;, &apos;votes&apos;, &apos;title&apos;, &apos;url&apos;])# list of Links to work withlinks = [ Link(0, 60398, 1334014208.0, 109, &quot;C overtakes Java as the No. 1 programming language in the TIOBE index.&quot;, &quot;http://pixelstech.net/article/index.php?id=1333969280&quot;), Link(1, 60254, 1333962645.0, 891, &quot;This explains why technical books are all ridiculously thick and overpriced&quot;, &quot;http://prog21.dadgum.com/65.html&quot;), Link(23, 62945, 1333894106.0, 351, &quot;Learn Haskell Fast and Hard&quot;, &quot;http://yannesposito.com/Scratch/en/blog/Haskell-the-Hard-Way/&quot;), Link(2, 6084, 1333996166.0, 81, &quot;Announcing Yesod 1.0- a robust, developer friendly, high performance web framework for Haskell&quot;, &quot;http://www.yesodweb.com/blog/2012/04/announcing-yesod-1-0&quot;), Link(3, 30305, 1333968061.0, 270, &quot;TIL about the Lisp Curse&quot;, &quot;http://www.winestockwebdesign.com/Essays/Lisp_Curse.html&quot;), Link(4, 59008, 1334016506.0, 19, &quot;The Downfall of Imperative Programming. Functional Programming and the Multicore Revolution&quot;, &quot;http://fpcomplete.com/the-downfall-of-imperative-programming/&quot;), Link(5, 8712, 1333993676.0, 26, &quot;Open Source - Twitter Stock Market Game - &quot;, &quot;http://www.twitstreet.com/&quot;), Link(6, 48626, 1333975127.0, 63, &quot;First look: Qt 5 makes JavaScript a first-class citizen for app development&quot;, &quot;http://arstechnica.com/business/news/2012/04/an-in-depth-look-at-qt-5-making-javascript-a-first-class-citizen-for-native-cross-platform-developme.ars&quot;), Link(7, 30172, 1334017294.0, 5, &quot;Benchmark of Dictionary Structures&quot;, &quot;http://lh3lh3.users.sourceforge.net/udb.shtml&quot;), Link(8, 678, 1334014446.0, 7, &quot;If It&apos;s Not on Prod, It Doesn&apos;t Count: The Value of Frequent Releases&quot;, &quot;http://bits.shutterstock.com/?p=165&quot;), Link(9, 29168, 1334006443.0, 18, &quot;Language proposal: dave&quot;, &quot;http://davelang.github.com/&quot;), Link(17, 48626, 1334020271.0, 1, &quot;LispNYC and EmacsNYC meetup Tuesday Night: Large Scale Development with Elisp &quot;, &quot;http://www.meetup.com/LispNYC/events/47373722/&quot;), Link(101, 62443, 1334018620.0, 4, &quot;research!rsc: Zip Files All The Way Down&quot;, &quot;http://research.swtch.com/zip&quot;), Link(12, 10262, 1334018169.0, 5, &quot;The Tyranny of the Diff&quot;, &quot;http://michaelfeathers.typepad.com/michael_feathers_blog/2012/04/the-tyranny-of-the-diff.html&quot;), Link(13, 20831, 1333996529.0, 14, &quot;Understanding NIO.2 File Channels in Java 7&quot;, &quot;http://java.dzone.com/articles/understanding-nio2-file&quot;), Link(15, 62443, 1333900877.0, 1244, &quot;Why vector icons don&apos;t work&quot;, &quot;http://www.pushing-pixels.org/2011/11/04/about-those-vector-icons.html&quot;), Link(14, 30650, 1334013659.0, 3, &quot;Python - Getting Data Into Graphite - Code Examples&quot;, &quot;http://coreygoldberg.blogspot.com/2012/04/python-getting-data-into-graphite-code.html&quot;), Link(16, 15330, 1333985877.0, 9, &quot;Mozilla: The Web as the Platform and The Kilimanjaro Event&quot;, &quot;https://groups.google.com/forum/?fromgroups#!topic/mozilla.dev.planning/Y9v46wFeejA&quot;), Link(18, 62443, 1333939389.0, 104, &quot;github is making me feel stupid(er)&quot;, &quot;http://www.serpentine.com/blog/2012/04/08/github-is-making-me-feel-stupider/&quot;), Link(19, 6937, 1333949857.0, 39, &quot;BitC Retrospective: The Issues with Type Classes&quot;, &quot;http://www.bitc-lang.org/pipermail/bitc-dev/2012-April/003315.html&quot;), Link(20, 51067, 1333974585.0, 14, &quot;Object Oriented C: Class-like Structures&quot;, &quot;http://cecilsunkure.blogspot.com/2012/04/object-oriented-c-class-like-structures.html&quot;), Link(10, 23944, 1333943632.0, 188, &quot;The LOVE game framework version 0.8.0 has been released - with GLSL shader support!&quot;, &quot;https://love2d.org/forums/viewtopic.php?f=3&amp;amp;t=8750&quot;), Link(22, 39191, 1334005674.0, 11, &quot;An open letter to language designers: Please kill your sacred cows. (megarant)&quot;, &quot;http://joshondesign.com/2012/03/09/open-letter-language-designers&quot;), Link(21, 3777, 1333996565.0, 2, &quot;Developers guide to Garage48 hackatron&quot;, &quot;http://martingryner.com/developers-guide-to-garage48-hackatron/&quot;), Link(24, 48626, 1333934004.0, 17, &quot;An R programmer looks at Julia&quot;, &quot;http://www.r-bloggers.com/an-r-programmer-looks-at-julia/&quot;)]# links is a list of Link objects. Links have a handful of properties. For# example, a Link&apos;s number of votes can be accessed by link.votes if &quot;link&quot; is a# Link.# make and populate a tabledb = sqlite3.connect(&apos;:memory:&apos;)db.execute(&apos;create table links &apos; + &apos;(id integer, submitter_id integer, submitted_time integer, &apos; + &apos;votes integer, title text, url text)&apos;)for l in links: db.execute(&apos;insert into links values (?, ?, ?, ?, ?, ?)&apos;, l)# db is an in-memory sqlite database that can respond to sql queries using the# execute() function.## For example. If you run## c = db.execute(&quot;select * from links&quot;)## c will be a &quot;cursor&quot; to the results of that query. You can use the fetchmany()# function on the cursor to convert that cursor into a list of results. These# results won&apos;t be Links; they&apos;ll be tuples, but they can be passed turned into# a Link.## For example, to print all the votes for all of the links, do this:## c = db.execute(&quot;select * from links&quot;)# for link_tuple in c:# link = Link(*link_tuple)# print link.votes## QUIZ - make the function query() return the number of votes the link with ID = 2 hasdef query(): c = db.execute(&quot;PUT YOUR SQL HERE&quot;) link = Link(*c.fetchone()) return link.votes https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/F35zP0xOMFM.mp4123456def query(): c = db.execute(&quot;select * from links where id=2&quot;) link = Link(*c.fetchone()) return link.votesprint query() More Advanced SQLhttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/aWIoeUm-HVA.mp4 Advanced SQL in Pythonhttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/u2nQqxMfLE4.mp412345def query(): c = db.execute(&quot;select * from links where submitter_id=62443 AND votes &gt; 1000&quot;) link = Link(*c.fetchone()) return link.idprint query() or123456def query(): c = db.execute(&quot;select * from links where submitter_id=62443 AND votes &gt; 1000&quot;) for link_tuple in c: link = Link(*link_tuple) return link.idprint query() https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/KsGqEVJsmO4.mp4 Order Byhttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/L55IfVfNvL8.mp4You can find out more information about list comprehensions in the Python documentation and a supplementary lesson found here123456789def query(): results=[] c=db.execute(&quot;select * from links where submitter_id=62443 ORDER BY submitted_time ASC&quot;) for link_tuple in c: link = Link(*link_tuple) print link results.append(link.id) return resultsprint query() better12345def query(): c=db.execute(&quot;select id from links where submitter_id=62443 order by submitted_time asc&quot;) results=[t[0] for t in c] return resultsprint query() https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/kWvI1pvxYZ4.mp4 Joinshttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/KddpLKB5JYA.mp4 Indexeshttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/kgC5ZwM9BS8.mp4 Querying Linkshttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/dLAZvKNkZcs.mp412345678# QUIZ - implement the function link_by_id() that takes a link&apos;s ID and returns# the Link object itselfdef link_by_id(link_id): for l in links: if l.id==link_id: return lprint link_by_id(24) https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/ASrkP2-oBuM.mp4 Using Dictionaries As Indiceshttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/4c3leET2nzg.mp41234567# QUIZ - implement the function build_link_index() that creates a python dictionary# the maps a link&apos;s ID to the link itselfdef build_link_index(): result=&#123;&#125; for l in links: result[l.id]=l return result https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/snkHGcSRRsk.mp4 Lookuphttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/pq5cH9fx524.mp41234567891011121314def build_link_index(): index = &#123;&#125; for l in links: index[l.id] = l return indexlink_index = build_link_index()def link_by_id(link_id): return link_index.get(link_id)# QUIZ - implement the function add_new_link() that both adds a link to the # &quot;links&quot; list and updates the link_index dictionary. def add_new_link(link): https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/v-nktgcT2A4.mp412345678def add_new_link(link): links.append(link) link_index[link.id]=link l=Link(50,1,1,1,&apos;title&apos;,&apos;url&apos;)add_new_link(l)print links[-1]print link_by_id(50) output12Link(id=50, submitter_id=1, submitted_time=1, votes=1, title=&apos;title&apos;, url=&apos;url&apos;)Link(id=50, submitter_id=1, submitted_time=1, votes=1, title=&apos;title&apos;, url=&apos;url&apos;) Advantages of Indiceshttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/9CoBxepbSR4.mp4https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/da2uj4wK10Y.mp4 Real-World Examplehttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/31XAKJmp0sk.mp4 Indices for Sortinghttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/REgL9DoFMdU.mp4 Another Real-World Examplehttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/XkuT8x6Y94A.mp4 Scaling Databaseshttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/dkhOZOmV7Fo.mp4 note:method | replicate | shard— | — | —downside: | 1. doesn’t increase the write speed. 2. replication lag | 1. complex queries(range queries). 2. joins become difficult https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/NTpHCHAD2tM.mp4 Growing Databaseshttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/cFFM_GCvrYs.mp4https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/R9T3hQ1axaw.mp4 ACIDhttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/j-r6Fmzr4PM.mp4note:atumicityconsistencyisolationdurability Google App Engine Datastorehttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/r-wl-VZhNXo.mp4 GQLhttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/SnaxUDryqaU.mp4note:GQL: all queries begin with SELECT * no joins all queries must be indexedSQL:run arbitrary queriesAutomatic Sharding and Replicationhttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/i4Fgm_XQ10M.mp4https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/TmPtKXgjZwQ.mp4ASCII Chanhttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/dtlAAUtkvgQ.mp4Getting Started on ASCII Chanhttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/hiyj6fDFm3c.mp4Creating the Formhttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/yx4SvoTbiuI.mp4https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/gHsG6aYIaXo.mp4Textareahttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/u5iR0i5KOMY.mp4Form Handlinghttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/odSexP9bScI.mp4Form Handling Continuedhttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/iB5cwOZK0JU.mp4Creating Entitieshttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/dFX5Dp-v04s.mp4Datastore Typeshttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/_opjCcw2Al0.mp4https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/y4o26tQcAqc.mp4Creating Entities Continuedhttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/gmgKRL1wiCk.mp4Working with Entitieshttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/JUDj8fXp3eY.mp4Running Querieshttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/h7LyH4cvYJo.mp4https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/cbpxkj6DGIg.mp4Stylinghttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/1pvAum4H7-Y.mp4Lesson 10: Problem Set 3-Building a Basic BlogBasic Bloghttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/ysFzedoB3Rg.mp4]]></content>
      <categories>
        <category>Udacity</category>
        <category>How to Build a Blog</category>
      </categories>
      <tags>
        <tag>Udacity</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CS229 notebook]]></title>
    <url>%2F2017%2F04%2F14%2FCS229%2F</url>
    <content type="text"><![CDATA[update in 2017-04-14 stay tuned… ResourceML Stanford CS 229 Machine Learning Course Materials Courses Supervised learning. (7 classes) Supervised learning setup. LMS. Logistic regression. Perceptron. Exponential family. Generative learning algorithms. Gaussian discriminant analysis. Naive Bayes. Support vector machines. Model selection and feature selection. Ensemble methods: Bagging, boosting. Evaluating and debugging learning algorithms. Learning theory. (3 classes) Bias/variance tradeoff. Union and Chernoff/Hoeffding bounds. VC dimension. Worst case (online) learning. Practical advice on how to use learning algorithms. Unsupervised learning. (5 classes) Clustering. K-means. EM. Mixture of Gaussians. Factor analysis. PCA (Principal components analysis). ICA (Independent components analysis). Reinforcement learning and control. (4 classes) MDPs. Bellman equations. Value iteration and policy iteration. Linear quadratic regulation (LQR). LQG. Q-learning. Value function approximation. Policy search. Reinforce. POMDPs.]]></content>
      <tags>
        <tag>Stanford</tag>
        <tag>ML</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Prepare for TOEFL]]></title>
    <url>%2F2017%2F04%2F13%2FPrepare-for-TOEFL%2F</url>
    <content type="text"><![CDATA[update in 2017-04-13stay tuned… cd g:hexohexo new post &quot;Prepare for TOEFL&quot; #TOEFL Strategies with English native-speaker MagooshTOEFLThe Format of the TOEFLHow to Study for the TOEFLTOEFL Study Plan (1 Month)TOEFL Listening Practice TestBest Free TOEFL ResourcesEstimating Your TOEFL ScoreTOEFL Study Plans and GuidesTwo Month TOEFL Study Plan edXTOEFL Test Preparation: The Insider’s Guide ETSTOEFL iBT® Quick Prep准备 TOEFL iBT® 考试Inside the TOEFL® Test: Speaking Questions 1&amp;2 A GUIDE TO UNDERSTANDING TOEFL IBT® SCORESSpeaking_RubricsWriting_Rubrics #清北托福备考联盟慕课——托福听力（超清） ETSx: TOEFLx TOEFL Test PreparationOverview of the CourseWelcome to TOEFL® Test Preparation: The Insider’s Guide. In this six-week course, we will explain the TOEFL test and take you through an in-depth look at all four sections of the TOEFL test: Reading, Listening, Speaking and Writing. Each week you will have the opportunity to learn more about the question types, scoring guidelines and resources to help you prepare for test day. We will give you test preparation tips and practice materials. You should expect to spend 2 to 4 hours per week to get the most out of this course. The course includes video lectures, discussion forums, weekly quizzes, practice tests and recommended readings. ETS instructors and staff will moderate the discussions and provide feedback where possible on a weekly basis. Please note: Passing this course is not a predictor of how well you might perform on the actual TOEFL iBT® test. Learning Objectives Gain a broad understanding of the four sections of the TOEFL test: Reading, - Listening, Speaking and Writing Acquire helpful tips to prepare you for the TOEFL test Improve your English language skills Learn how the TOEFL test is scored Learn how to use your TOEFL test scores for employment, school, visas, scholarships Find test prep resources for the TOEFL test Learn how to register for the TOEFL test Weekly TopicsWeek 1 – Welcome to TOEFL Test Preparation: The Insider’s Guide 1.1 Welcome 1.2 Survey 1.3 Course Information and Support 1.4 Around the World With the TOEFL Test 1.5 A Look Inside the TOEFL Test 1.6 Accommodations and Accessibility 1.7 Week 1 Quiz 1.8 This Week in Review and Getting Ready for Week 2 Week 2 – Reading Section 2.1 Challenges of Reading 2.2 About the Reading Section 2.3 Factual/Negative Factual Information Questions 2.4 Inference and Rhetorical Purpose Questions 2.5 Vocabulary Questions 2.6 Reference Questions 2.7 Sentence Simplification Questions 2.8 Insert Text Questions 2.9 Prose Summary and Fill in a Table Questions 2.10 How the Reading Section is Scored 2.11 Reading Practice Test 2.12 Practice Activities and Resources 2.13 This Week in Review and Getting Ready for Week 3 Week 3 – Listening Section 3.1 Challenges of Listening 3.2 About the Listening Section 3.3 Gist-Content and Gist-Purpose Questions 3.4 Detail Questions 3.5 Function Questions 3.6 Attitude Questions 3.7 Organization Questions 3.8 Connecting Content Questions 3.9 Inference Questions 3.10 How the Listening Section is Scored 3.11 Listening Practice Test 3.12 Practice Activities and Resources 3.13 This Week in Review and Getting Ready for Week 4 Week 4 – Speaking Section 4.1 Challenges of Speaking 4.2 About the Speaking Section 4.3 Independent Questions 1 and 2 4.4 Integrated Questions 3 and 5 4.5 Integrated Questions 4 and 6 4.6 How the Speaking Section is Scored 4.7 Speaking Practice Test 4.8 Review of Speaking Responses 4.9 Practice Activities and Resources 4.10 This Week in Review and Getting Ready for Week 5 Week 5 – Writing Section 5.1 Challenges of Writing 5.2 About the Writing Section 5.3 Integrated Writing Question 1 5.4 Independent Writing Question 2 5.5 How the Writing Section is Scored 5.6 Writing Practice Test 5.7 Review of Writing Responses 5.8 Practice Activities and Resources 5.9 This Week in Review and Final Steps for Week 6 Week 6 – About Test Day and Beyond 6.1 Putting It All Together: Preparing for Test Day 6.2 Live Event 6.3 The Test Center 6.4 How to Register 6.5 Receiving and Sending Scores 6.6 Week 6 Quiz 6.7 Official TOEFL Prep Resources 6.8 End-of-Course Survey 6.9 Share with a Friend 6.10 Go Pursue Your Dreams]]></content>
      <tags>
        <tag>TOEFL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Udacity-ud595]]></title>
    <url>%2F2017%2F02%2F28%2FUdacity-ud595%2F</url>
    <content type="text"><![CDATA[Linum Command Line Basics Shell Commands stay tuned… Get Into the ShellWhat’s a Virtual MachineVirtual MachineA virtual machine (VM) is a computer program that simulates a computer. The VM software we’re using in this course is called VirtualBox. When you set up your virtual machine you installed Linux on the VM, making Linux the guest operating system. The operating system (OS) that’s installed directly on your physical computer is called the host OS. We use a virtual machine in this course to ensure that everyone is working in an identical environment with the correct programs installed, but there are many other reasons programmers use VMs. VMs isolate programming projects from everything else on a programmer’s computer. The programmer can configure the guest OS by installing programs and customizing settings without disrupting their day-to-day environment. VMs are also used to simulate the environment that software will be deployed to. Most developers use Windows or Mac OS, but often deploy their code to servers running Linux. Using a Linux VM lets programmers run code on their target platform, without leaving the comfort of their preferred host OS. VagrantVagrant is a program that makes VMs more convenient to use. For example when you ran vagrant up Vagrant created a VM, installed a guest OS, and configured the guest OS. Vagrant did all of this automatically by following instructions in the Vagrantfile. Automating this process saves time and ensures consistent results. Vagrant also makes it easy to edit files that are in the VM from programs installed on the host OS. We won’t use this feature in this class, but it’s very helpful in other Udacity courses and on the job. Command Line InterfaceSetting Up Your Own (Virtual) Linux BoxYour own Linux boxTo learn the Linux shell, you need a Linux machine to run it on. But we can’t really ship a new Linux computer to every one of you. So instead you will set up a Linux virtual machine (VM) on your own computer. You’ll be using the VirtualBox application to run the virtual machine, and the vagrant software to configure it. This virtual-machine setup is very similar to the ones you will use in later Udacity courses on the Linux platform. So when you get to those courses, you will not need to re-install this software. Setting the virtual machine up is not complicated, but it will take some time when your computer downloads the Linux OS. Follow the instructions below to set it up before proceeding on in this course. What’s a virtual machine?A virtual machine is a program that runs on your Windows or Mac computer, and that can run a different operating system inside it. In this case, you’ll be running an Ubuntu Linux server system. Install GitYou can skip this step if you are not running Windows, but many other courses use Git, so you may want to install it now. Download Git from git-scm.com. Install the version for your operating system. On Windows, Git will provide you with the Git Bash terminal program, which you will use to run and connect to your Linux VM. Find your terminal programTo take this course you will need to use a terminal program, which presents the shell user interface and lets you log in to your Linux VM. Windows: Use the Git Bash program, which is installed with Git (above).Mac OS X: Use the Terminal program, located in your Applications/Utilities folder.Linux: Use any terminal program (e.g. xterm or gnome-terminal). Install VirtualBoxVirtualBox is the software that actually runs the VM. You can download it from virtualbox.org, here. Install the platform package for your operating system. You do not need the extension pack or the SDK. You do not need to launch VirtualBox after installing it. Ubuntu 14.04 Note: If you are running Ubuntu 14.04, install VirtualBox using the Ubuntu Software Center, not the virtualbox.org web site. Due to a reported bug, installing VirtualBox from the site may uninstall other software you need. Install VagrantVagrant is the software that configures the VM and lets you share files between your host computer and the VM’s filesystem. You can download it from vagrantup.com. Install the version for your operating system. Windows Note: The Installer may ask you to grant network permissions to Vagrant or make a firewall exception. Be sure to allow this. Download the VM configuration fileMake a new folder to keep your workspace for this course. You might call it Shell, but whatever name you pick is OK. Keep track of what folder you created it in (for instance, Desktop). In the Supporting Materials section of this page, below, you’ll find a link to the configuration file, called Vagrantfile. Download this file into the new folder you just created. Run the virtual machine!Open your terminal program. Type this shell command and press Enter: cd Desktop/Shell(for me cd G:/Udacity/ud595/Shell) (If your new folder is called something other than “Shell”, or is located somewhere other than “Desktop”, change those.) Then start the VM by running the command vagrant up. This will make your system download the Linux OS and start up the virtual machine. Unfortunately, this will take a long time on most network connections. Fortunately, you only have to do it once, and the same Linux OS image will work for later Udacity courses too. Once it is done, run the command vagrant ssh. And you will be logged in to the virtual machine and ready to do the course exercises!The Udacity VM is the official shell for this class, but if your computer already has a Unix* shell you can use it if you prefer. Caveat: Your computer’s own shell may differ from the VM in unanticipated ways, and may not have all the programs installed which the VM provides. The recommended environment is the VM. if you’re running Linux or Mac OS X for instance Log In and Break Stuffexitvagrant ssh In the VM or out of the VM?We’ve set this course’s exercises up to work in the virtual machine (VM) that you set up using the vagrant program. If you get logged out of the VM, you may end up typing shell commands in to your regular operating system instead of to the Linux system that we’ve set up for the course. Some commands won’t work, and some files probably won’t be where the course expects them to be. Getting logged outIf you type the command exit into the shell, or if you type Control-D, you will see a message like this: logout Connection to 127.0.0.1 closed.This just means that you got logged out. After logging out, you won’t be in the VM any more. To get back into the VM, use the command vagrant ssh. If vagrant ssh doesn’t workIf you get a message like this: VM must be running to open SSH connection. Run vagrant up to start the virtual machine.This means that the VM program is not running, for instance because you rebooted your computer. This is just fine and it doesn’t mean you’ve lost any work. Just run vagrant up to bring the VM back up, then vagrant ssh to log in. This will not take as long as the first time you ran it, because it won’t need to download the Linux OS. If vagrant up doesn’t workIf you get a message like this: A Vagrant environment or target machine is required to run this command. Run `vagrant init` to create a new Vagrant environment. Or, get an ID of a target machine from `vagrant global-status` to run this command on. A final option is to change to a directory with a Vagrantfile and to try again. That means that vagrant can’t find the configuration file you downloaded. Go back to the instructions, check to be sure that you did step 5, and then do step 6 again. Multiple terminalsIf you open up more than one terminal window, only the one(s) that you ran vagrant ssh in will be connected to your Linux OS for this course. The others will be connected to your regular OS. (It’s actually really normal for Linux users to have to carefully keep track of which terminal windows are connected to which machines. Don’t panic. Just look for whether “vagrant” appears on the command line.) Commands That Worklscurl http://udacity.github.io/ud595-shell/stuff.zip -o things.zipls Try More Commandsdate expr 2+2 echo you rock uname hostname host udacity.com bash --version history Shell CommandsThe Linux Filesystem]]></content>
      <tags>
        <tag>Udacity</tag>
        <tag>VirtualBox</tag>
        <tag>Vagrant</tag>
        <tag>ud595</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Udacity-ud256]]></title>
    <url>%2F2017%2F02%2F27%2FUdacity-ud256%2F</url>
    <content type="text"><![CDATA[Networking for Web Developers Aim to build a VM. stay tuned… From Ping to HTTPIntro Linum Command Line Basics Configuring Linux Web Servers Designing RESTful APIs Setting Up For This CourseLocal VMInstall two pieces of software: VirtualBox, which you can get from this download page. Vagrant, which you can get from this download page. Use Git Bash mkdir networking cd networking vagrant init ubuntu/trusty64 vagrant upWhen it is complete, you can log into the Linux instance with vagrant ssh. .I have install it before so for me cd G:/Udacity/ud256/from\ ping\ to\ http/networking remove files in networking vagrant up(need about 6 hours to download) When it is complete, you can log into the Linux instance with vagrant ssh. If you log out of the Linux instance or close the terminal, the next time you want to use it you only need to run cd networking and vagrant ssh. Installing networking tools SSH into your Linux machine. Then take a moment to bring it up to date with any package updates: sudo apt-get update &amp;&amp; sudo apt-get upgrade Note:1W: Failed to fetch http://security.ubuntu.com/ubuntu/dists/trusty-security/main/source/Sources Hash Sum mismatch You’ll be using several network utility programs in this course. Some of them may already be installed, but just to make sure, let’s install them all: sudo apt-get install netcat-openbsd tcpdump traceroute mtr]]></content>
      <tags>
        <tag>Udacity</tag>
        <tag>ud256</tag>
        <tag>VirtualBox</tag>
        <tag>Vagrant</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Udacity-cs101-note]]></title>
    <url>%2F2017%2F02%2F05%2FUdacity-cs101-stay-tuned%2F</url>
    <content type="text"><![CDATA[https://classroom.udacity.com/courses/cs253 Done in 2017-05-01 LESSONSHow to manage dataMeasure Udacity123456789101112131415161718192021222324# Define a procedure, measure_udacity,# that takes as its input a list of strings,# and returns a number that is a count# of the number of elements in the input# list that start with the uppercase # letter &apos;U&apos;.def measure_udacity(word): count = 0 for i in word: if i.find(&apos;U&apos;)&gt;=0: print &apos;i: &apos;,i count+=1 print &apos;count: &apos;,count return count print measure_udacity([&apos;Dave&apos;,&apos;Sebastian&apos;,&apos;Katy&apos;])#&gt;&gt;&gt; 0print measure_udacity([&apos;Umika&apos;,&apos;Umberto&apos;])#&gt;&gt;&gt; 2 Find Element123456789101112131415161718192021# Define a procedure, find_element,# that takes as its inputs a list# and a value of any type, and# returns the index of the first# element in the input list that# matches the value.# If there is no matching element,# return -1.def find_element(U,u): if u in U: return U.index(u) else: return -1print find_element([1,2,3],3)#&gt;&gt;&gt; 2print find_element([&apos;alpha&apos;,&apos;beta&apos;],&apos;gamma&apos;)#&gt;&gt;&gt; -1 Union1234567891011121314151617181920212223# Define a procedure, union,# that takes as inputs two lists.# It should modify the first input# list to be the set union of the two# lists. You may assume the first list# is a set, that is, it contains no # repeated elements.def union(a,b): for e in b: if e not in a: a.append(e)# To test, uncomment all lines # below except those beginning with &gt;&gt;&gt;.a = [1,2,3]b = [2,4,6]union(a,b)print a #&gt;&gt;&gt; [1,2,3,4,6]print b#&gt;&gt;&gt; [2,4,6] Pop Quiz31.1 Get All LinksPrint All Linkshttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/Inr_DYUqxk8.mp4 Quiz: Print All Linksprint_all_links must keep going until there are no more links to print. Think about looping forever (set while loop condition) until there are no more links (i.e. else:). What do you do when there are no more links (body of else: condition)? At 1:26, Dave uses a procedure get_page(). The code for this procedure is given later in the course, in Lesson 4. This is the code: def get_page(url): try: import urllib return urllib.urlopen(url).read() except: return &apos;&apos; Include this code above your get_next_target() procedure in your answer. https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/BFYeJzcejxM.mp4 Linkshttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/xssLR71EuUw.mp4 Starting Get All Linkshttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/m3oEwba-yxU.mp4https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/f4L30M_25AI.mp4 Updating Linkshttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/8krkKyimMUA.mp4https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/4-5169UHZTM.mp4 Finishing Get All Linkshttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/E3_IlnR_j44.mp4https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/LUnnw_TBxPI.mp4 Finishing the Web Crawlerhttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/BWKxjRDadkI.mp4 Crawling Processhttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/l_ulQLpFQJQ.mp4 Quiz: Crawling ProcessPseudo code from the video: start with tocrawl = [seed] crawled = [] while there are more pages tocrawl: pick a page from tocrawl add that page to crawled add all the link targets on this page to tocrawl return crawled The seed page where crawling begins. https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/_DESjvmuSsA.mp4 Crawl Webhttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/bI3rP7tAGdA.mp4https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/XRkqyIvx39w.mp4 Crawl Web Loophttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/h4pJFmz7l1g.mp4https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/jRm4rYw1w6c.mp4 Crawl Ifhttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/lZhKW6QTmX0.mp4https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/sopj7b5XEfk.mp4 Finishing Crawl Webhttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/nQl4F9uMvGU.mp4 Quiz: Finishing Crawl WebHint: at some point, you will have to call get_page on page. It seems counterintuitive, but we use the word page to refer to both the url and the html of a webpage. The get_page procedure takes a url and returns html. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051#Finish crawl webdef get_page(url): # This is a simulated get_page procedure so that you can test your # code on two pages &quot;http://xkcd.com/353&quot; and &quot;http://xkcd.com/554&quot;. # A procedure which actually grabs a page from the web will be # introduced in unit 4. try: if url == &quot;http://xkcd.com/353&quot;: return &apos;&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;&lt;?xml-stylesheet href=&quot;http://imgs.xkcd.com/s/c40a9f8.css&quot; type=&quot;text/css&quot; media=&quot;screen&quot; ?&gt;&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.1//EN&quot; &quot;http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd&quot;&gt;&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt; &lt;head&gt; &lt;title&gt;xkcd: Python&lt;/title&gt; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;http://imgs.xkcd.com/s/c40a9f8.css&quot; media=&quot;screen&quot; title=&quot;Default&quot; /&gt; &lt;!--[if IE]&gt;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;http://imgs.xkcd.com/s/ecbbecc.css&quot; media=&quot;screen&quot; title=&quot;Default&quot; /&gt;&lt;![endif]--&gt; &lt;link rel=&quot;alternate&quot; type=&quot;application/atom+xml&quot; title=&quot;Atom 1.0&quot; href=&quot;/atom.xml&quot; /&gt; &lt;link rel=&quot;alternate&quot; type=&quot;application/rss+xml&quot; title=&quot;RSS 2.0&quot; href=&quot;/rss.xml&quot; /&gt; &lt;link rel=&quot;icon&quot; href=&quot;http://imgs.xkcd.com/s/919f273.ico&quot; type=&quot;image/x-icon&quot; /&gt; &lt;link rel=&quot;shortcut icon&quot; href=&quot;http://imgs.xkcd.com/s/919f273.ico&quot; type=&quot;image/x-icon&quot; /&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=&quot;container&quot;&gt; &lt;div id=&quot;topContainer&quot;&gt; &lt;div id=&quot;topLeft&quot; class=&quot;dialog&quot;&gt; &lt;div class=&quot;hd&quot;&gt;&lt;div class=&quot;c&quot;&gt;&lt;/div&gt;&lt;/div&gt; &lt;div class=&quot;bd&quot;&gt; &lt;div class=&quot;c&quot;&gt; &lt;div class=&quot;s&quot;&gt;\t&lt;ul&gt; &lt;li&gt;&lt;a href=&quot;http://xkcd.com/554&quot;&quot;&gt;Archive&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;\t &lt;li&gt;&lt;a href=&quot;http://blag.xkcd.com/&quot;&gt;News/Blag&lt;/a&gt;&lt;br /&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;http://store.xkcd.com/&quot;&gt;Store&lt;/a&gt;&lt;br /&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;/about/&quot;&gt;About&lt;/a&gt;&lt;br /&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;http://forums.xkcd.com/&quot;&gt;Forums&lt;/a&gt;&lt;br /&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;ft&quot;&gt;&lt;div class=&quot;c&quot;&gt;&lt;/div&gt;&lt;/div&gt; &lt;/div&gt; &lt;div id=&quot;topRight&quot; class=&quot;dialog&quot;&gt; &lt;div class=&quot;hd&quot;&gt;&lt;div class=&quot;c&quot;&gt;&lt;/div&gt;&lt;/div&gt; &lt;div class=&quot;bd&quot;&gt; &lt;div class=&quot;c&quot;&gt; &lt;div class=&quot;s&quot;&gt; &lt;div id=&quot;topRightContainer&quot;&gt; &lt;div id=&quot;logo&quot;&gt; &lt;a href=&quot;/&quot;&gt;&lt;img src=&quot;http://imgs.xkcd.com/s/9be30a7.png&quot; alt=&quot;xkcd.com logo&quot; height=&quot;83&quot; width=&quot;185&quot;/&gt;&lt;/a&gt; &lt;h2&gt;&lt;br /&gt;A webcomic of romance,&lt;br/&gt; sarcasm, math, and language.&lt;/h2&gt; &lt;div class=&quot;clearleft&quot;&gt;&lt;/div&gt; &lt;br /&gt;XKCD updates every Monday, Wednesday, and Friday. &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;ft&quot;&gt;&lt;div class=&quot;c&quot;&gt;&lt;/div&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div id=&quot;contentContainer&quot;&gt; &lt;div id=&quot;middleContent&quot; class=&quot;dialog&quot;&gt; &lt;div class=&quot;hd&quot;&gt;&lt;div class=&quot;c&quot;&gt;&lt;/div&gt;&lt;/div&gt; &lt;div class=&quot;bd&quot;&gt; &lt;div class=&quot;c&quot;&gt; &lt;div class=&quot;s&quot;&gt;&lt;h1&gt;Python&lt;/h1&gt;&lt;br/&gt;&lt;br /&gt;&lt;div class=&quot;menuCont&quot;&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;/1/&quot;&gt;|&amp;lt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;/352/&quot; accesskey=&quot;p&quot;&gt;&amp;lt; Prev&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;http://dynamic.xkcd.com/random/comic/&quot; id=&quot;rnd_btn_t&quot;&gt;Random&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;/354/&quot; accesskey=&quot;n&quot;&gt;Next &amp;gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;/&quot;&gt;&amp;gt;|&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt;&lt;/div&gt;&lt;br/&gt;&lt;br/&gt;&lt;img src=&quot;http://imgs.xkcd.com/comics/python.png&quot; title=&quot;I wrote 20 short programs in Python yesterday. It was wonderful. Perl, Im leaving you.&quot; alt=&quot;Python&quot; /&gt;&lt;br/&gt;&lt;br/&gt;&lt;div class=&quot;menuCont&quot;&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;/1/&quot;&gt;|&amp;lt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;/352/&quot; accesskey=&quot;p&quot;&gt;&amp;lt; Prev&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;http://dynamic.xkcd.com/random/comic/&quot; id=&quot;rnd_btn_b&quot;&gt;Random&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;/354/&quot; accesskey=&quot;n&quot;&gt;Next &amp;gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;/&quot;&gt;&amp;gt;|&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt;&lt;/div&gt;&lt;h3&gt;Permanent link to this comic: http://xkcd.com/353/&lt;/h3&gt;&lt;h3&gt;Image URL (for hotlinking/embedding): http://imgs.xkcd.com/comics/python.png&lt;/h3&gt;&lt;div id=&quot;transcript&quot; style=&quot;display: none&quot;&gt;[[ Guy 1 is talking to Guy 2, who is floating in the sky ]]Guy 1: You39;re flying! How?Guy 2: Python!Guy 2: I learned it last night! Everything is so simple!Guy 2: Hello world is just 39;print &amp;quot;Hello, World!&amp;quot; 39;Guy 1: I dunno... Dynamic typing? Whitespace?Guy 2: Come join us! Programming is fun again! It39;s a whole new world up here!Guy 1: But how are you flying?Guy 2: I just typed 39;import antigravity39;Guy 1: That39;s it?Guy 2: ...I also sampled everything in the medicine cabinet for comparison.Guy 2: But i think this is the python.&#123;&#123; I wrote 20 short programs in Python yesterday. It was wonderful. Perl, I39;m leaving you. &#125;&#125;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;ft&quot;&gt;&lt;div class=&quot;c&quot;&gt;&lt;/div&gt;&lt;/div&gt; &lt;/div&gt; &lt;div id=&quot;middleFooter&quot; class=&quot;dialog&quot;&gt; &lt;div class=&quot;hd&quot;&gt;&lt;div class=&quot;c&quot;&gt;&lt;/div&gt;&lt;/div&gt; &lt;div class=&quot;bd&quot;&gt; &lt;div class=&quot;c&quot;&gt; &lt;div class=&quot;s&quot;&gt; &lt;img src=&quot;http://imgs.xkcd.com/s/a899e84.jpg&quot; width=&quot;520&quot; height=&quot;100&quot; alt=&quot;Selected Comics&quot; usemap=&quot; comicmap&quot; /&gt; &lt;map name=&quot;comicmap&quot;&gt; &lt;area shape=&quot;rect&quot; coords=&quot;0,0,100,100&quot; href=&quot;/150/&quot; alt=&quot;Grownups&quot; /&gt; &lt;area shape=&quot;rect&quot; coords=&quot;104,0,204,100&quot; href=&quot;/730/&quot; alt=&quot;Circuit Diagram&quot; /&gt; &lt;area shape=&quot;rect&quot; coords=&quot;208,0,308,100&quot; href=&quot;/162/&quot; alt=&quot;Angular Momentum&quot; /&gt; &lt;area shape=&quot;rect&quot; coords=&quot;312,0,412,100&quot; href=&quot;/688/&quot; alt=&quot;Self-Description&quot; /&gt; &lt;area shape=&quot;rect&quot; coords=&quot;416,0,520,100&quot; href=&quot;/556/&quot; alt=&quot;Alternative Energy Revolution&quot; /&gt; &lt;/map&gt;&lt;br/&gt;&lt;br /&gt;Search comic titles and transcripts:&lt;br /&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;//www.google.com/jsapi&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot;&gt; google.load(\&quot;search\&quot;, \&quot;1\&quot;); google.setOnLoadCallback(function() &#123; google.search.CustomSearchControl.attachAutoCompletion( \&quot;012652707207066138651:zudjtuwe28q\&quot;, document.getElementById(\&quot;q\&quot;), \&quot;cse-search-box\&quot;); &#125;);&lt;/script&gt;&lt;form action=&quot;//www.google.com/cse&quot; id=&quot;cse-search-box&quot;&gt; &lt;div&gt; &lt;input type=&quot;hidden&quot; name=&quot;cx&quot; value=&quot;012652707207066138651:zudjtuwe28q&quot; /&gt; &lt;input type=&quot;hidden&quot; name=&quot;ie&quot; value=&quot;UTF-8&quot; /&gt; &lt;input type=&quot;text&quot; name=&quot;q&quot; id=&quot;q&quot; autocomplete=&quot;off&quot; size=&quot;31&quot; /&gt; &lt;input type=&quot;submit&quot; name=&quot;sa&quot; value=&quot;Search&quot; /&gt; &lt;/div&gt;&lt;/form&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;//www.google.com/cse/brand?form=cse-search-box&amp;lang=en&quot;&gt;&lt;/script&gt;&lt;a href=&quot;/rss.xml&quot;&gt;RSS Feed&lt;/a&gt; - &lt;a href=&quot;/atom.xml&quot;&gt;Atom Feed&lt;/a&gt;&lt;br /&gt; &lt;br/&gt; &lt;div id=&quot;comicLinks&quot;&gt; Comics I enjoy:&lt;br/&gt; &lt;a href=&quot;http://www.qwantz.com&quot;&gt;Dinosaur Comics&lt;/a&gt;, &lt;a href=&quot;http://www.asofterworld.com&quot;&gt;A Softer World&lt;/a&gt;, &lt;a href=&quot;http://pbfcomics.com/&quot;&gt;Perry Bible Fellowship&lt;/a&gt;, &lt;a href=&quot;http://www.boltcity.com/copper/&quot;&gt;Copper&lt;/a&gt;, &lt;a href=&quot;http://questionablecontent.net/&quot;&gt;Questionable Content&lt;/a&gt;, &lt;a href=&quot;http://achewood.com/&quot;&gt;Achewood&lt;/a&gt;, &lt;a href=&quot;http://wondermark.com/&quot;&gt;Wondermark&lt;/a&gt;, &lt;a href=&quot;http://thisisindexed.com/&quot;&gt;Indexed&lt;/a&gt;, &lt;a href=&quot;http://www.buttercupfestival.com/buttercupfestival.htm&quot;&gt;Buttercup Festival&lt;/a&gt; &lt;/div&gt; &lt;br/&gt; Warning: this comic occasionally contains strong language (which may be unsuitable for children), unusual humor (which may be unsuitable for adults), and advanced mathematics (which may be unsuitable for liberal-arts majors).&lt;br/&gt; &lt;br/&gt; &lt;h4&gt;We did not invent the algorithm. The algorithm consistently finds Jesus. The algorithm killed Jeeves. &lt;br /&gt;The algorithm is banned in China. The algorithm is from Jersey. The algorithm constantly finds Jesus.&lt;br /&gt;This is not the algorithm. This is close.&lt;/h4&gt;&lt;br/&gt; &lt;div class=&quot;line&quot;&gt;&lt;/div&gt; &lt;br/&gt; &lt;div id=&quot;licenseText&quot;&gt; &lt;!-- &lt;a rel=&quot;license&quot; href=&quot;http://creativecommons.org/licenses/by-nc/2.5/&quot;&gt;&lt;img alt=&quot;Creative Commons License&quot; style=&quot;border:none&quot; src=&quot;http://imgs.xkcd.com/static/somerights20.png&quot; /&gt;&lt;/a&gt;&lt;br/&gt; --&gt; This work is licensed under a &lt;a rel=&quot;license&quot; href=&quot;http://creativecommons.org/licenses/by-nc/2.5/&quot;&gt;Creative Commons Attribution-NonCommercial 2.5 License&lt;/a&gt;.&lt;!-- &lt;rdf:RDF xmlns=&quot;http://web.resource.org/cc/&quot; xmlns:dc=&quot;http://purl.org/dc/elements/1.1/&quot; xmlns:dcterms=&quot;http://purl.org/dc/terms/&quot; xmlns:rdf=&quot;http://www.w3.org/1999/02/22-rdf-syntax-ns &quot;&gt;&lt;Work rdf:about=&quot;&quot;&gt;&lt;dc:creator&gt;Randall Munroe&lt;/dc:creator&gt;&lt;dcterms:rightsHolder&gt;Randall Munroe&lt;/dcterms:rightsHolder&gt;&lt;dc:type rdf:resource=&quot;http://purl.org/dc/dcmitype/StillImage&quot; /&gt;&lt;dc:source rdf:resource=&quot;http://www.xkcd.com/&quot;/&gt;&lt;license rdf:resource=&quot;http://creativecommons.org/licenses/by-nc/2.5/&quot; /&gt;&lt;/Work&gt;&lt;License rdf:about=&quot;http://creativecommons.org/licenses/by-nc/2.5/&quot;&gt;&lt;permits rdf:resource=&quot;http://web.resource.org/cc/Reproduction&quot; /&gt;&lt;permits rdf:resource=&quot;http://web.resource.org/cc/Distribution&quot; /&gt;&lt;requires rdf:resource=&quot;http://web.resource.org/cc/Notice&quot; /&gt;&lt;requires rdf:resource=&quot;http://web.resource.org/cc/Attribution&quot; /&gt;&lt;prohibits rdf:resource=&quot;http://web.resource.org/cc/CommercialUse&quot; /&gt;&lt;permits rdf:resource=&quot;http://web.resource.org/cc/DerivativeWorks&quot; /&gt;&lt;/License&gt;&lt;/rdf:RDF&gt; --&gt; &lt;br/&gt; This means you\&quot;re free to copy and share these comics (but not to sell them). &lt;a href=&quot;/license.html&quot;&gt;More details&lt;/a&gt;.&lt;br/&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;ft&quot;&gt;&lt;div class=&quot;c&quot;&gt;&lt;/div&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/body&gt;&lt;/html&gt; &apos; elif url == &quot;http://xkcd.com/554&quot;: return &apos;&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt; &lt;?xml-stylesheet href=&quot;http://imgs.xkcd.com/s/c40a9f8.css&quot; type=&quot;text/css&quot; media=&quot;screen&quot; ?&gt; &lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.1//EN&quot; &quot;http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd&quot;&gt; &lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt; &lt;head&gt; &lt;title&gt;xkcd: Not Enough Work&lt;/title&gt; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;http://imgs.xkcd.com/s/c40a9f8.css&quot; media=&quot;screen&quot; title=&quot;Default&quot; /&gt; &lt;!--[if IE]&gt;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;http://imgs.xkcd.com/s/ecbbecc.css&quot; media=&quot;screen&quot; title=&quot;Default&quot; /&gt;&lt;![endif]--&gt; &lt;link rel=&quot;alternate&quot; type=&quot;application/atom+xml&quot; title=&quot;Atom 1.0&quot; href=&quot;/atom.xml&quot; /&gt; &lt;link rel=&quot;alternate&quot; type=&quot;application/rss+xml&quot; title=&quot;RSS 2.0&quot; href=&quot;/rss.xml&quot; /&gt; &lt;link rel=&quot;icon&quot; href=&quot;http://imgs.xkcd.com/s/919f273.ico&quot; type=&quot;image/x-icon&quot; /&gt; &lt;link rel=&quot;shortcut icon&quot; href=&quot;http://imgs.xkcd.com/s/919f273.ico&quot; type=&quot;image/x-icon&quot; /&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=&quot;container&quot;&gt; &lt;div id=&quot;topContainer&quot;&gt; &lt;div id=&quot;topLeft&quot; class=&quot;dialog&quot;&gt; &lt;div class=&quot;hd&quot;&gt;&lt;div class=&quot;c&quot;&gt;&lt;/div&gt;&lt;/div&gt; &lt;div class=&quot;bd&quot;&gt; &lt;div class=&quot;c&quot;&gt; &lt;div class=&quot;s&quot;&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;/archive/&quot;&gt;Archive&lt;/a&gt;&lt;br /&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;http://blag.xkcd.com/&quot;&gt;News/Blag&lt;/a&gt;&lt;br /&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;http://store.xkcd.com/&quot;&gt;Store&lt;/a&gt;&lt;br /&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;/about/&quot;&gt;About&lt;/a&gt;&lt;br /&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;http://forums.xkcd.com/&quot;&gt;Forums&lt;/a&gt;&lt;br /&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;ft&quot;&gt;&lt;div class=&quot;c&quot;&gt;&lt;/div&gt;&lt;/div&gt; &lt;/div&gt; &lt;div id=&quot;topRight&quot; class=&quot;dialog&quot;&gt; &lt;div class=&quot;hd&quot;&gt;&lt;div class=&quot;c&quot;&gt;&lt;/div&gt;&lt;/div&gt; &lt;div class=&quot;bd&quot;&gt; &lt;div class=&quot;c&quot;&gt; &lt;div class=&quot;s&quot;&gt; &lt;div id=&quot;topRightContainer&quot;&gt; &lt;div id=&quot;logo&quot;&gt; &lt;a href=&quot;/&quot;&gt;&lt;img src=&quot;http://imgs.xkcd.com/s/9be30a7.png&quot; alt=&quot;xkcd.com logo&quot; height=&quot;83&quot; width=&quot;185&quot;/&gt;&lt;/a&gt; &lt;h2&gt;&lt;br /&gt;A webcomic of romance,&lt;br/&gt; sarcasm, math, and language.&lt;/h2&gt; &lt;div class=&quot;clearleft&quot;&gt;&lt;/div&gt; XKCD updates every Monday, Wednesday, and Friday. &lt;br /&gt; Blag: Remember geohashing? &lt;a href=&quot;http://blog.xkcd.com/2012/02/27/geohashing-2/&quot;&gt;Something pretty cool&lt;/a&gt; happened Sunday. &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;ft&quot;&gt;&lt;div class=&quot;c&quot;&gt;&lt;/div&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div id=&quot;contentContainer&quot;&gt; &lt;div id=&quot;middleContent&quot; class=&quot;dialog&quot;&gt; &lt;div class=&quot;hd&quot;&gt;&lt;div class=&quot;c&quot;&gt;&lt;/div&gt;&lt;/div&gt; &lt;div class=&quot;bd&quot;&gt; &lt;div class=&quot;c&quot;&gt; &lt;div class=&quot;s&quot;&gt; &lt;h1&gt;Not Enough Work&lt;/h1&gt;&lt;br/&gt; &lt;br /&gt; &lt;div class=&quot;menuCont&quot;&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;/1/&quot;&gt;|&amp;lt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;/553/&quot; accesskey=&quot;p&quot;&gt;&amp;lt; Prev&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;http://dynamic.xkcd.com/random/comic/&quot; id=&quot;rnd_btn_t&quot;&gt;Random&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;/555/&quot; accesskey=&quot;n&quot;&gt;Next &amp;gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;/&quot;&gt;&amp;gt;|&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;br/&gt; &lt;br/&gt; &lt;img src=&quot;http://imgs.xkcd.com/comics/not_enough_work.png&quot; title=&quot;It39;s even harder if you39;re an asshole who pronounces &amp;lt;&amp;gt; brackets.&quot; alt=&quot;Not Enough Work&quot; /&gt;&lt;br/&gt; &lt;br/&gt; &lt;div class=&quot;menuCont&quot;&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;/1/&quot;&gt;|&amp;lt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;/553/&quot; accesskey=&quot;p&quot;&gt;&amp;lt; Prev&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;http://dynamic.xkcd.com/random/comic/&quot; id=&quot;rnd_btn_b&quot;&gt;Random&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;/555/&quot; accesskey=&quot;n&quot;&gt;Next &amp;gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;/&quot;&gt;&amp;gt;|&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;h3&gt;Permanent link to this comic: http://xkcd.com/554/&lt;/h3&gt; &lt;h3&gt;Image URL (for hotlinking/embedding): http://imgs.xkcd.com/comics/not_enough_work.png&lt;/h3&gt; &lt;div id=&quot;transcript&quot; style=&quot;display: none&quot;&gt;Narration: Signs your coders don39;t have enough work to do: [[A man sitting at his workstation; a female co-worker behind him]] Man: I39;m almost up to my old typing speed in dvorak [[Two men standing by a server rack]] Man 1: Our servers now support gopher. Man 1: Just in case. [[A woman standing near her workstation speaking to a male co-worker]] Woman: Our pages are now HTML, XHTML-STRICT, and haiku-compliant Man: Haiku? Woman: &amp;lt;div class=&amp;quot;main&amp;quot;&amp;gt; Woman: &amp;lt;span id=&amp;quot;marquee&amp;quot;&amp;gt; Woman: Blog!&amp;lt; span&amp;gt;&amp;lt; div&amp;gt; [[A woman sitting at her workstation]] Woman: Hey! Have you guys seen this webcomic? &#123;&#123;title text: It39;s even harder if you39;re an asshole who pronounces &amp;lt;&amp;gt; brackets.&#125;&#125;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;ft&quot;&gt;&lt;div class=&quot;c&quot;&gt;&lt;/div&gt;&lt;/div&gt; &lt;/div&gt; &lt;div id=&quot;middleFooter&quot; class=&quot;dialog&quot;&gt; &lt;div class=&quot;hd&quot;&gt;&lt;div class=&quot;c&quot;&gt;&lt;/div&gt;&lt;/div&gt; &lt;div class=&quot;bd&quot;&gt; &lt;div class=&quot;c&quot;&gt; &lt;div class=&quot;s&quot;&gt; &lt;img src=&quot;http://imgs.xkcd.com/s/a899e84.jpg&quot; width=&quot;520&quot; height=&quot;100&quot; alt=&quot;Selected Comics&quot; usemap=&quot; comicmap&quot; /&gt; &lt;map name=&quot;comicmap&quot;&gt; &lt;area shape=&quot;rect&quot; coords=&quot;0,0,100,100&quot; href=&quot;/150/&quot; alt=&quot;Grownups&quot; /&gt; &lt;area shape=&quot;rect&quot; coords=&quot;104,0,204,100&quot; href=&quot;/730/&quot; alt=&quot;Circuit Diagram&quot; /&gt; &lt;area shape=&quot;rect&quot; coords=&quot;208,0,308,100&quot; href=&quot;/162/&quot; alt=&quot;Angular Momentum&quot; /&gt; &lt;area shape=&quot;rect&quot; coords=&quot;312,0,412,100&quot; href=&quot;/688/&quot; alt=&quot;Self-Description&quot; /&gt; &lt;area shape=&quot;rect&quot; coords=&quot;416,0,520,100&quot; href=&quot;/556/&quot; alt=&quot;Alternative Energy Revolution&quot; /&gt; &lt;/map&gt;&lt;br/&gt;&lt;br /&gt; Search comic titles and transcripts:&lt;br /&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;//www.google.com/jsapi&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot;&gt; google.load(&quot;search&quot;, &quot;1&quot;); google.search.CustomSearchControl.attachAutoCompletion( &quot;012652707207066138651:zudjtuwe28q&quot;, document.getElementById(&quot;q&quot;), &quot;cse-search-box&quot;); &#125;); &lt;/script&gt; &lt;form action=&quot;//www.google.com/cse&quot; id=&quot;cse-search-box&quot;&gt; &lt;div&gt; &lt;input type=&quot;hidden&quot; name=&quot;cx&quot; value=&quot;012652707207066138651:zudjtuwe28q&quot; /&gt; &lt;input type=&quot;hidden&quot; name=&quot;ie&quot; value=&quot;UTF-8&quot; /&gt; &lt;input type=&quot;text&quot; name=&quot;q&quot; id=&quot;q&quot; autocomplete=&quot;off&quot; size=&quot;31&quot; /&gt; &lt;input type=&quot;submit&quot; name=&quot;sa&quot; value=&quot;Search&quot; /&gt; &lt;/div&gt; &lt;/form&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;//www.google.com/cse/brand?form=cse-search-box&amp;lang=en&quot;&gt;&lt;/script&gt; &lt;a href=&quot;/rss.xml&quot;&gt;RSS Feed&lt;/a&gt; - &lt;a href=&quot;/atom.xml&quot;&gt;Atom Feed&lt;/a&gt; &lt;br /&gt; &lt;br/&gt; &lt;div id=&quot;comicLinks&quot;&gt; Comics I enjoy:&lt;br/&gt; &lt;a href=&quot;http://threewordphrase.com/&quot;&gt;Three Word Phrase&lt;/a&gt;, &lt;a href=&quot;http://oglaf.com/&quot;&gt;Oglaf&lt;/a&gt; (nsfw), &lt;a href=&quot;http://www.smbc-comics.com/&quot;&gt;SMBC&lt;/a&gt;, &lt;a href=&quot;http://www.qwantz.com&quot;&gt;Dinosaur Comics&lt;/a&gt;, &lt;a href=&quot;http://www.asofterworld.com&quot;&gt;A Softer World&lt;/a&gt;, &lt;a href=&quot;http://buttersafe.com/&quot;&gt;Buttersafe&lt;/a&gt;, &lt;a href=&quot;http://pbfcomics.com/&quot;&gt;Perry Bible Fellowship&lt;/a&gt;, &lt;a href=&quot;http://questionablecontent.net/&quot;&gt;Questionable Content&lt;/a&gt;, &lt;a href=&quot;http://www.buttercupfestival.com/buttercupfestival.htm&quot;&gt;Buttercup Festival&lt;/a&gt; &lt;/div&gt; &lt;br/&gt; Warning: this comic occasionally contains strong language (which may be unsuitable for children), unusual humor (which may be unsuitable for adults), and advanced mathematics (which may be unsuitable for liberal-arts majors).&lt;br/&gt; &lt;br/&gt; &lt;h4&gt;We did not invent the algorithm. The algorithm consistently finds Jesus. The algorithm killed Jeeves. &lt;br /&gt;The algorithm is banned in China. The algorithm is from Jersey. The algorithm constantly finds Jesus.&lt;br /&gt;This is not the algorithm. This is close.&lt;/h4&gt;&lt;br/&gt; &lt;div class=&quot;line&quot;&gt;&lt;/div&gt; &lt;br/&gt; &lt;div id=&quot;licenseText&quot;&gt; &lt;!-- &lt;a rel=&quot;license&quot; href=&quot;http://creativecommons.org/licenses/by-nc/2.5/&quot;&gt;&lt;img alt=&quot;Creative Commons License&quot; style=&quot;border:none&quot; src=&quot;http://imgs.xkcd.com/static/somerights20.png&quot; /&gt;&lt;/a&gt;&lt;br/&gt; --&gt; This work is licensed under a &lt;a rel=&quot;license&quot; href=&quot;http://creativecommons.org/licenses/by-nc/2.5/&quot;&gt;Creative Commons Attribution-NonCommercial 2.5 License&lt;/a&gt;. &lt;!-- &lt;rdf:RDF xmlns=&quot;http://web.resource.org/cc/&quot; xmlns:dc=&quot;http://purl.org/dc/elements/1.1/&quot; xmlns:dcterms=&quot;http://purl.org/dc/terms/&quot; xmlns:rdf=&quot;http://www.w3.org/1999/02/22-rdf-syntax-ns &quot;&gt;&lt;Work rdf:about=&quot;&quot;&gt;&lt;dc:creator&gt;Randall Munroe&lt;/dc:creator&gt;&lt;dcterms:rightsHolder&gt;Randall Munroe&lt;/dcterms:rightsHolder&gt;&lt;dc:type rdf:resource=&quot;http://purl.org/dc/dcmitype/StillImage&quot; /&gt;&lt;dc:source rdf:resource=&quot;http://www.xkcd.com/&quot;/&gt;&lt;license rdf:resource=&quot;http://creativecommons.org/licenses/by-nc/2.5/&quot; /&gt;&lt;/Work&gt;&lt;License rdf:about=&quot;http://creativecommons.org/licenses/by-nc/2.5/&quot;&gt;&lt;permits rdf:resource=&quot;http://web.resource.org/cc/Reproduction&quot; /&gt;&lt;permits rdf:resource=&quot;http://web.resource.org/cc/Distribution&quot; /&gt;&lt;requires rdf:resource=&quot;http://web.resource.org/cc/Notice&quot; /&gt;&lt;requires rdf:resource=&quot;http://web.resource.org/cc/Attribution&quot; /&gt;&lt;prohibits rdf:resource=&quot;http://web.resource.org/cc/CommercialUse&quot; /&gt;&lt;permits rdf:resource=&quot;http://web.resource.org/cc/DerivativeWorks&quot; /&gt;&lt;/License&gt;&lt;/rdf:RDF&gt; --&gt; &lt;br/&gt; This means you&quot;re free to copy and share these comics (but not to sell them). &lt;a href=&quot;/license.html&quot;&gt;More details&lt;/a&gt;.&lt;br/&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;ft&quot;&gt;&lt;div class=&quot;c&quot;&gt;&lt;/div&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/body&gt; &lt;/html&gt; &apos; except: return &quot;&quot; return &quot;&quot;def get_next_target(page): start_link = page.find(&apos;&lt;a href=&apos;) if start_link == -1: return None, 0 start_quote = page.find(&apos;&quot;&apos;, start_link) end_quote = page.find(&apos;&quot;&apos;, start_quote + 1) url = page[start_quote + 1:end_quote] return url, end_quotedef union(p,q): for e in q: if e not in p: p.append(e)def get_all_links(page): links = [] while True: url,endpos = get_next_target(page) if url: links.append(url) page = page[endpos:] else: break return linksdef crawl_web(seed): tocrawl = [seed] crawled = [] while tocrawl: page = tocrawl.pop() if page not in crawled: union(tocrawl,get_all_links(get_page(page))) crawled.append(page) return crawled https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/sII5zYOFywM.mp4 Conclusionhttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/Qm4wJi2Me6Y.mp4 Problem SetListshttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/fzaaNzGDcCg.mp4 Mutating Listshttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/kFEMVfPAP-A.mp4 Product List12345678910111213141516171819202122232425# Define a procedure, product_list,# that takes as input a list of numbers,# and returns a number that is# the result of multiplying all# those numbers together.def product_list(list_of_numbers): tem = 1 for i in list_of_numbers: tem = tem * i return temprint product_list([9])#&gt;&gt;&gt; 9print product_list([1,2,3,4])#&gt;&gt;&gt; 24print product_list([])#&gt;&gt;&gt; 1 https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/RTPL87SBv6o.mp4 Greatest123456789101112131415161718192021# Define a procedure, greatest,# that takes as input a list# of positive numbers, and# returns the greatest number# in that list. If the input# list is empty, the output# should be 0.def greatest(list_of_numbers): tem = 0 for i in list_of_numbers: if i&gt;tem: tem = i return temprint greatest([4,23,1])#&gt;&gt;&gt; 23print greatest([])#&gt;&gt;&gt; 0 https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/okAtgJROqgs.mp4 Lists of Lists1234567891011121314151617181920212223242526272829303132333435363738394041424344# Define a procedure, total_enrollment,# that takes as an input a list of elements,# where each element is a list containing# three elements: a university name,# the total number of students enrolled,# and the annual tuition fees.# The procedure should return two numbers,# not a string, # giving the total number of students# enrolled at all of the universities# in the list, and the total tuition fees# (which is the sum of the number# of students enrolled times the# tuition fees for each university).udacious_univs = [[&apos;Udacity&apos;,90000,0]]usa_univs = [ [&apos;California Institute of Technology&apos;,2175,37704], [&apos;Harvard&apos;,19627,39849], [&apos;Massachusetts Institute of Technology&apos;,10566,40732], [&apos;Princeton&apos;,7802,37000], [&apos;Rice&apos;,5879,35551], [&apos;Stanford&apos;,19535,40569], [&apos;Yale&apos;,11701,40500] ]def total_enrollment(p): total_stu = 0 total_fee = 0 for a,b,c in p: total_stu = total_stu + b total_fee = total_fee + b* c return total_stu, total_fee#print total_enrollment(udacious_univs)#&gt;&gt;&gt; (90000,0)# The L is automatically added by Python to indicate a long# number. If you are trying the question in an outside # interpreter you might not see it.#print total_enrollment(usa_univs)#&gt;&gt;&gt; (77285,3058581079) https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/xk4fB0yfq58.mp4 Max Pages12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394# The web crawler we built at the end of Unit 3 has some serious# flaws if we were going to use it in a real crawler. One# problem is if we start with a good seed page, it might# run for an extremely long time (even forever, since the# number of URLS on the web is not actually finite). This# question and the following one explore two different ways# to limit the pages that it can crawl.# Modify the crawl_web procedure to take a second parameter,# max_pages, that limits the number of pages to crawl.# Your procedure should terminate the crawl after# max_pages different pages have been crawled, or when# there are no more pages to crawl.# The following definition of get_page provides an interface# to the website found at http://www.udacity.com/cs101x/index.html# The function output order does not affect grading.def get_page(url): try: if url == &quot;http://www.udacity.com/cs101x/index.html&quot;: return (&apos;&lt;html&gt; &lt;body&gt; This is a test page for learning to crawl! &apos; &apos;&lt;p&gt; It is a good idea to &apos; &apos;&lt;a href=&quot;http://www.udacity.com/cs101x/crawling.html&quot;&gt;learn to &apos; &apos;crawl&lt;/a&gt; before you try to &apos; &apos;&lt;a href=&quot;http://www.udacity.com/cs101x/walking.html&quot;&gt;walk&lt;/a&gt; &apos; &apos;or &lt;a href=&quot;http://www.udacity.com/cs101x/flying.html&quot;&gt;fly&lt;/a&gt;. &apos; &apos;&lt;/p&gt; &lt;/body&gt; &lt;/html&gt; &apos;) elif url == &quot;http://www.udacity.com/cs101x/crawling.html&quot;: return (&apos;&lt;html&gt; &lt;body&gt; I have not learned to crawl yet, but I &apos; &apos;am quite good at &apos; &apos;&lt;a href=&quot;http://www.udacity.com/cs101x/kicking.html&quot;&gt;kicking&lt;/a&gt;.&apos; &apos;&lt;/body&gt; &lt;/html&gt;&apos;) elif url == &quot;http://www.udacity.com/cs101x/walking.html&quot;: return (&apos;&lt;html&gt; &lt;body&gt; I cant get enough &apos; &apos;&lt;a href=&quot;http://www.udacity.com/cs101x/index.html&quot;&gt;crawling&lt;/a&gt;! &apos; &apos;&lt;/body&gt; &lt;/html&gt;&apos;) elif url == &quot;http://www.udacity.com/cs101x/flying.html&quot;: return (&apos;&lt;html&gt; &lt;body&gt; The magic words are Squeamish Ossifrage! &apos; &apos;&lt;/body&gt; &lt;/html&gt;&apos;) except: return &quot;&quot; return &quot;&quot;def get_next_target(page): start_link = page.find(&apos;&lt;a href=&apos;) if start_link == -1: return None, 0 start_quote = page.find(&apos;&quot;&apos;, start_link) end_quote = page.find(&apos;&quot;&apos;, start_quote + 1) url = page[start_quote + 1:end_quote] return url, end_quotedef union(p,q): for e in q: if e not in p: p.append(e)def get_all_links(page): links = [] while True: url,endpos = get_next_target(page) if url: links.append(url) page = page[endpos:] else: break return linksdef crawl_web(seed, max_pages): tocrawl = [seed] crawled = [] while tocrawl: page = tocrawl.pop() if page not in crawled and len(crawled) &lt; max_pages : union(tocrawl, get_all_links(get_page(page))) crawled.append(page) return crawledprint crawl_web(&quot;http://www.udacity.com/cs101x/index.html&quot;,1) #&gt;&gt;&gt; [&apos;http://www.udacity.com/cs101x/index.html&apos;]print crawl_web(&quot;http://www.udacity.com/cs101x/index.html&quot;,3) #&gt;&gt;&gt; [&apos;http://www.udacity.com/cs101x/index.html&apos;, #&gt;&gt;&gt; &apos;http://www.udacity.com/cs101x/flying.html&apos;, #&gt;&gt;&gt; &apos;http://www.udacity.com/cs101x/walking.html&apos;]print crawl_web(&quot;http://www.udacity.com/cs101x/index.html&quot;,500) #&gt;&gt;&gt; [&apos;http://www.udacity.com/cs101x/index.html&apos;, #&gt;&gt;&gt; &apos;http://www.udacity.com/cs101x/flying.html&apos;, #&gt;&gt;&gt; &apos;http://www.udacity.com/cs101x/walking.html&apos;, #&gt;&gt;&gt; &apos;http://www.udacity.com/cs101x/crawling.html&apos;, #&gt;&gt;&gt; &apos;http://www.udacity.com/cs101x/kicking.html&apos;] https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/Mh0Rw9fV9UU.mp4 Max Depth123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148# # This question explores a different way (from the previous question)# to limit the pages that it can crawl.######### THREE GOLD STARS ## Yes, we really mean it! This is really tough (but doable) unless # you have some previous experience before this course.# Modify the crawl_web procedure to take a second parameter,# max_depth, that limits the depth of the search. We can # define the depth of a page as the number of links that must# be followed to reach that page starting from the seed page,# that is, the length of the shortest path from the seed to# the page. No pages whose depth exceeds max_depth should be# included in the crawl. # # For example, if max_depth is 0, the only page that should# be crawled is the seed page. If max_depth is 1, the pages# that should be crawled are the seed page and every page that # it links to directly. If max_depth is 2, the crawl should # also include all pages that are linked to by these pages.## Note that the pages in the crawl may be in any order.## The following definition of get_page provides an interface# to the website found at http://www.udacity.com/cs101x/index.html# The function output order does not affect grading.def get_page(url): try: if url == &quot;http://www.udacity.com/cs101x/index.html&quot;: return (&apos;&lt;html&gt; &lt;body&gt; This is a test page for learning to crawl! &apos; &apos;&lt;p&gt; It is a good idea to &apos; &apos;&lt;a href=&quot;http://www.udacity.com/cs101x/crawling.html&quot;&gt;learn to &apos; &apos;crawl&lt;/a&gt; before you try to &apos; &apos;&lt;a href=&quot;http://www.udacity.com/cs101x/walking.html&quot;&gt;walk&lt;/a&gt; &apos; &apos;or &lt;a href=&quot;http://www.udacity.com/cs101x/flying.html&quot;&gt;fly&lt;/a&gt;. &apos; &apos;&lt;/p&gt; &lt;/body&gt; &lt;/html&gt; &apos;) elif url == &quot;http://www.udacity.com/cs101x/crawling.html&quot;: return (&apos;&lt;html&gt; &lt;body&gt; I have not learned to crawl yet, but I &apos; &apos;am quite good at &apos; &apos;&lt;a href=&quot;http://www.udacity.com/cs101x/kicking.html&quot;&gt;kicking&lt;/a&gt;.&apos; &apos;&lt;/body&gt; &lt;/html&gt;&apos;) elif url == &quot;http://www.udacity.com/cs101x/walking.html&quot;: return (&apos;&lt;html&gt; &lt;body&gt; I cant get enough &apos; &apos;&lt;a href=&quot;http://www.udacity.com/cs101x/index.html&quot;&gt;crawling&lt;/a&gt;! &apos; &apos;&lt;/body&gt; &lt;/html&gt;&apos;) elif url == &quot;http://www.udacity.com/cs101x/flying.html&quot;: return (&apos;&lt;html&gt; &lt;body&gt; The magic words are Squeamish Ossifrage! &apos; &apos;&lt;/body&gt; &lt;/html&gt;&apos;) elif url == &quot;http://top.contributors/velak.html&quot;: return (&apos;&lt;a href=&quot;http://top.contributors/jesyspa.html&quot;&gt;&apos; &apos;&lt;a href=&quot;http://top.contributors/forbiddenvoid.html&quot;&gt;&apos;) elif url == &quot;http://top.contributors/jesyspa.html&quot;: return (&apos;&lt;a href=&quot;http://top.contributors/elssar.html&quot;&gt;&apos; &apos;&lt;a href=&quot;http://top.contributors/kilaws.html&quot;&gt;&apos;) elif url == &quot;http://top.contributors/forbiddenvoid.html&quot;: return (&apos;&lt;a href=&quot;http://top.contributors/charlzz.html&quot;&gt;&apos; &apos;&lt;a href=&quot;http://top.contributors/johang.html&quot;&gt;&apos; &apos;&lt;a href=&quot;http://top.contributors/graemeblake.html&quot;&gt;&apos;) elif url == &quot;http://top.contributors/kilaws.html&quot;: return (&apos;&lt;a href=&quot;http://top.contributors/tomvandenbosch.html&quot;&gt;&apos; &apos;&lt;a href=&quot;http://top.contributors/mathprof.html&quot;&gt;&apos;) elif url == &quot;http://top.contributors/graemeblake.html&quot;: return (&apos;&lt;a href=&quot;http://top.contributors/dreyescat.html&quot;&gt;&apos; &apos;&lt;a href=&quot;http://top.contributors/angel.html&quot;&gt;&apos;) elif url == &quot;A1&quot;: return &apos;&lt;a href=&quot;B1&quot;&gt; &lt;a href=&quot;C1&quot;&gt; &apos; elif url == &quot;B1&quot;: return &apos;&lt;a href=&quot;E1&quot;&gt;&apos; elif url == &quot;C1&quot;: return &apos;&lt;a href=&quot;D1&quot;&gt;&apos; elif url == &quot;D1&quot;: return &apos;&lt;a href=&quot;E1&quot;&gt; &apos; elif url == &quot;E1&quot;: return &apos;&lt;a href=&quot;F1&quot;&gt; &apos; except: return &quot;&quot; return &quot;&quot;def get_next_target(page): start_link = page.find(&apos;&lt;a href=&apos;) if start_link == -1: return None, 0 start_quote = page.find(&apos;&quot;&apos;, start_link) end_quote = page.find(&apos;&quot;&apos;, start_quote + 1) url = page[start_quote + 1:end_quote] return url, end_quotedef union(p,q): for e in q: if e not in p: p.append(e)def get_all_links(page): links = [] while True: url,endpos = get_next_target(page) if url: links.append(url) page = page[endpos:] else: break return linksdef crawl_web(seed,max_depth): tocrawl = [seed] crawled = [] count = 0 while tocrawl: page = tocrawl.pop() if page not in crawled and count &lt; max_depth: union(tocrawl, get_all_links(get_page(page))) crawled.append(page) count +=1 return crawledprint crawl_web(&quot;http://www.udacity.com/cs101x/index.html&quot;,0)#&gt;&gt;&gt; [&apos;http://www.udacity.com/cs101x/index.html&apos;]print crawl_web(&quot;http://www.udacity.com/cs101x/index.html&quot;,1)#&gt;&gt;&gt; [&apos;http://www.udacity.com/cs101x/index.html&apos;,#&gt;&gt;&gt; &apos;http://www.udacity.com/cs101x/flying.html&apos;,#&gt;&gt;&gt; &apos;http://www.udacity.com/cs101x/walking.html&apos;,#&gt;&gt;&gt; &apos;http://www.udacity.com/cs101x/crawling.html&apos;]print crawl_web(&quot;http://www.udacity.com/cs101x/index.html&quot;,50)#&gt;&gt;&gt; [&apos;http://www.udacity.com/cs101x/index.html&apos;,#&gt;&gt;&gt; &apos;http://www.udacity.com/cs101x/flying.html&apos;,#&gt;&gt;&gt; &apos;http://www.udacity.com/cs101x/walking.html&apos;,#&gt;&gt;&gt; &apos;http://www.udacity.com/cs101x/crawling.html&apos;,#&gt;&gt;&gt; &apos;http://www.udacity.com/cs101x/kicking.html&apos;]print crawl_web(&quot;http://top.contributors/forbiddenvoid.html&quot;,2)#&gt;&gt;&gt; [&apos;http://top.contributors/forbiddenvoid.html&apos;,#&gt;&gt;&gt; &apos;http://top.contributors/graemeblake.html&apos;,#&gt;&gt;&gt; &apos;http://top.contributors/angel.html&apos;,#&gt;&gt;&gt; &apos;http://top.contributors/dreyescat.html&apos;,#&gt;&gt;&gt; &apos;http://top.contributors/johang.html&apos;,#&gt;&gt;&gt; &apos;http://top.contributors/charlzz.html&apos;]print crawl_web(&quot;A1&quot;,3)#&gt;&gt;&gt; [&apos;A1&apos;, &apos;C1&apos;, &apos;B1&apos;, &apos;E1&apos;, &apos;D1&apos;, &apos;F1&apos;]# (May be in any order) 1234567891011121314def crawl_web(seed,max_depth): tocrawl = [seed] crawled = [] next_depth = [] depth = 0 while tocrawl and depth &lt;= max_depth: page = tocrawl.pop() if page not in crawled: union(next_depth, get_all_links(get_page(page))) crawled.append(page) if not tocrawl: tocrawl, next_depth = next_depth, [] depth = depth + 1 return crawled https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/TRNyIIrB73Q.mp4 Sudoku12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576# THREE GOLD STARS# Sudoku [http://en.wikipedia.org/wiki/Sudoku]# is a logic puzzle where a game# is defined by a partially filled# 9 x 9 square of digits where each square# contains one of the digits 1,2,3,4,5,6,7,8,9.# For this question we will generalize# and simplify the game.# Define a procedure, check_sudoku,# that takes as input a square list# of lists representing an n x n# sudoku puzzle solution and returns the boolean# True if the input is a valid# sudoku square and returns the boolean False# otherwise.# A valid sudoku square satisfies these# two properties:# 1. Each column of the square contains# each of the whole numbers from 1 to n exactly once.# 2. Each row of the square contains each# of the whole numbers from 1 to n exactly once.# You may assume the the input is square and contains at# least one row and column.correct = [[1,2,3], [2,3,1], [3,1,2]]incorrect = [[1,2,3,4], [2,3,1,3], [3,1,2,3], [4,4,4,4]]incorrect2 = [[1,2,3,4], [2,3,1,4], [4,1,2,3], [3,4,1,2]]incorrect3 = [[1,2,3,4,5], [2,3,1,5,6], [4,5,2,1,3], [3,4,5,2,1], [5,6,4,3,2]]incorrect4 = [[&apos;a&apos;,&apos;b&apos;,&apos;c&apos;], [&apos;b&apos;,&apos;c&apos;,&apos;a&apos;], [&apos;c&apos;,&apos;a&apos;,&apos;b&apos;]]incorrect5 = [ [1, 1.5], [1.5, 1]] def check_sudoku(): #print check_sudoku(incorrect)#&gt;&gt;&gt; False#print check_sudoku(correct)#&gt;&gt;&gt; True#print check_sudoku(incorrect2)#&gt;&gt;&gt; False#print check_sudoku(incorrect3)#&gt;&gt;&gt; False#print check_sudoku(incorrect4)#&gt;&gt;&gt; False#print check_sudoku(incorrect5)#&gt;&gt;&gt; False https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/60wESSZRSp0.mp41234567891011121314151617181920def check_sudoku(p): n = len(p) digit = 1 while digit &lt;=n: i = 0 while i &lt; n: row_count = 0 col_count = 0 j = 0 while j &lt; n: if p[i][j] == digit: row_count = row_count + 1 if p[j][i] == digit: col_count = col_count + 1 j = j + 1 if row_count != 1 or col_count != 1: return False i = i+1 digit = digit + 1 return True Problem Set(Optional)Exploring List Properties1234567891011121314# Investigating adding and appending to lists# If you run the following four lines of codes, what are list1 and list2?list1 = [1,2,3,4]list2 = [1,2,3,4]list1 = list1 + [5, 6]list2.append([5, 6])# to check, you can print them out using the print statements below.print &quot;showing list1 and list2:&quot;print list1print list2 showing list1 and list2: [1, 2, 3, 4, 5, 6] [1, 2, 3, 4, [5, 6]] Symmetric Square1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950# A list is symmetric if the first row is the same as the first column,# the second row is the same as the second column and so on. Write a# procedure, symmetric, which takes a list as input, and returns the# boolean True if the list is symmetric and False if it is not.def symmetric(p): # Your code here n = len(p) if n == 0: return True if len(p[0]) != n: return False i = 0 while i &lt; n: j = 0 while j &lt; n: if p[i][j] != p[j][i]: return False j = j +1 i = i +1 return True print symmetric([[1, 2, 3], [2, 3, 4], [3, 4, 1]])#&gt;&gt;&gt; Trueprint symmetric([[&quot;cat&quot;, &quot;dog&quot;, &quot;fish&quot;], [&quot;dog&quot;, &quot;dog&quot;, &quot;fish&quot;], [&quot;fish&quot;, &quot;fish&quot;, &quot;cat&quot;]])#&gt;&gt;&gt; Trueprint symmetric([[&quot;cat&quot;, &quot;dog&quot;, &quot;fish&quot;], [&quot;dog&quot;, &quot;dog&quot;, &quot;dog&quot;], [&quot;fish&quot;,&quot;fish&quot;,&quot;cat&quot;]])#&gt;&gt;&gt; Falseprint symmetric([[1, 2], [2, 1]])#&gt;&gt;&gt; Trueprint symmetric([[1, 2, 3, 4], [2, 3, 4, 5], [3, 4, 5, 6]])#&gt;&gt;&gt; Falseprint symmetric([[1,2,3], [2,3,1]])#&gt;&gt;&gt; False Mean of a List123456789101112131415161718192021222324252627# The mean of a set of numbers is the sum of the numbers divided by the# number of numbers. Write a procedure, list_mean, which takes a list of numbers# as its input and return the mean of the numbers in the list.# Hint: You will need to work out how to make your division into decimal# division instead of integer division. You get decimal division if any of# the numbers involved are decimals.def list_mean(p): n = len(p) if n ==0: return -1 sum = 0 for i in p: sum = sum+i return sum*1.0 / n print list_mean([1,2,3,4])#&gt;&gt;&gt; 2.5print list_mean([1,3,4,5,2])#&gt;&gt;&gt; 3.0print list_mean([])#&gt;&gt;&gt; ??? You decide. If you decide it should give an error, comment# out the print line above to prevent your code from being graded as# incorrect.print list_mean([2])#&gt;&gt;&gt; 2.0 Notes on lists Problem Set(Optional 2)Antisymmetric Square12345678910111213141516171819202122232425262728293031# By Dimitris_GR from forums# Modify Problem Set 31&apos;s (Optional) Symmetric Square to return True # if the given square is antisymmetric and False otherwise. # An nxn square is called antisymmetric if A[i][j]=-A[j][i] # for each i=0,1,...,n-1 and for each j=0,1,...,n-1.def antisymmetric(A): #Write your code here# Test Cases:print antisymmetric([[0, 1, 2], [-1, 0, 3], [-2, -3, 0]]) #&gt;&gt;&gt; Trueprint antisymmetric([[0, 0, 0], [0, 0, 0], [0, 0, 0]])#&gt;&gt;&gt; Trueprint antisymmetric([[0, 1, 2], [-1, 0, -2], [2, 2, 3]])#&gt;&gt;&gt; Falseprint antisymmetric([[1, 2, 5], [0, 1, -9], [0, 0, 1]])#&gt;&gt;&gt; False Recognize Identity Matrix12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364# By Ashwath from forums# Given a list of lists representing a n * n matrix as input, # define a procedure that returns True if the input is an identity matrix # and False otherwise.# An IDENTITY matrix is a square matrix in which all the elements # on the principal/main diagonal are 1 and all the elements outside # the principal diagonal are 0. # (A square matrix is a matrix in which the number of rows # is equal to the number of columns)def is_identity_matrix(matrix): #Write your code here# Test Cases:matrix1 = [[1,0,0,0], [0,1,0,0], [0,0,1,0], [0,0,0,1]]print is_identity_matrix(matrix1)#&gt;&gt;&gt;Truematrix2 = [[1,0,0], [0,1,0], [0,0,0]]print is_identity_matrix(matrix2)#&gt;&gt;&gt;Falsematrix3 = [[2,0,0], [0,2,0], [0,0,2]]print is_identity_matrix(matrix3)#&gt;&gt;&gt;Falsematrix4 = [[1,0,0,0], [0,1,1,0], [0,0,0,1]]print is_identity_matrix(matrix4)#&gt;&gt;&gt;Falsematrix5 = [[1,0,0,0,0,0,0,0,0]]print is_identity_matrix(matrix5)#&gt;&gt;&gt;Falsematrix6 = [[1,0,0,0], [0,1,0,1], [0,0,1,0], [0,0,0,1]]print is_identity_matrix(matrix6)#&gt;&gt;&gt;Falsematrix7 = [[1, -1, 1], [0, 1, 0], [0, 0, 1]]print is_identity_matrix(matrix7)#&gt;&gt;&gt;False Numbers in Lists1234567891011121314151617181920212223242526272829# Numbers in lists by SeanMc from forums# define a procedure that takes in a string of numbers from 1-9 and# outputs a list with the following parameters:# Every number in the string should be inserted into the list.# If a number x in the string is less than or equal # to the preceding number y, the number x should be inserted # into a sublist. Continue adding the following numbers to the # sublist until reaching a number z that# is greater than the number y. # Then add this number z to the normal list and continue.#Hint - &quot;int()&quot; turns a string&apos;s element into a numberdef numbers_in_lists(string): # YOUR CODE#testcasesstring = &apos;543987&apos;result = [5,[4,3],9,[8,7]]print repr(string), numbers_in_lists(string) == resultstring= &apos;987654321&apos;result = [9,[8,7,6,5,4,3,2,1]]print repr(string), numbers_in_lists(string) == resultstring = &apos;455532123266&apos;result = [4, 5, [5, 5, 3, 2, 1, 2, 3, 2], 6, [6]]print repr(string), numbers_in_lists(string) == resultstring = &apos;123456789&apos;result = [1, 2, 3, 4, 5, 6, 7, 8, 9]print repr(string), numbers_in_lists(string) == result Frequency Analysis12345678910111213141516171819202122232425262728293031323334# Crypto Analysis: Frequency Analysis## To analyze encrypted messages, to find out information about the possible # algorithm or even language of the clear text message, one could perform # frequency analysis. This process could be described as simply counting # the number of times a certain symbol occurs in the given text. # For example:# For the text &quot;test&quot; the frequency of &apos;e&apos; is 1, &apos;s&apos; is 1 and &apos;t&apos; is 2.## The input to the function will be an encrypted body of text that only contains # the lowercase letters a-z. # As output you should return a list of the normalized frequency # for each of the letters a-z. # The normalized frequency is simply the number of occurrences, i, # divided by the total number of characters in the message, n.def freq_analysis(message): ## # Your code here ## return freq_list#Testsprint freq_analysis(&quot;abcd&quot;)#&gt;&gt;&gt; [0.25, 0.25, 0.25, 0.25, 0.0, ..., 0.0]print freq_analysis(&quot;adca&quot;)#&gt;&gt;&gt; [0.5, 0.0, 0.25, 0.25, 0.0, ..., 0.0]print freq_analysis(&apos;bewarethebunnies&apos;)#&gt;&gt;&gt; [0.0625, 0.125, 0.0, 0.0, ..., 0.0] Responding to QueriesIntroductionhttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/gXkELecZYlk.mp4 Welcome to Unit 4! The notes for Unit 4 are here: PDF and web. By the end of this unit, we’ll have a working search engine that can crawl and build an index of set of web pages, and respond to keyword queries! You’ll also learn about designing and using complex data structures that build on the list structure we introduced in the previous unit. Data Structureshttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/pv5-RgG1pdk.mp4https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/nNEXCEH0dEw.mp4 Add to Indexhttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/B2J-bDQ4M1o.mp4123456789101112131415161718192021222324252627282930# Define a procedure, add_to_index,# that takes 3 inputs:# - an index: [[&lt;keyword&gt;,[&lt;url&gt;,...]],...]# - a keyword: String# - a url: String# If the keyword is already# in the index, add the url# to the list of urls associated# with that keyword.# If the keyword is not in the index,# add an entry to the index: [keyword,[url]]index = []def add_to_index(index,keyword,url):#add_to_index(index,&apos;udacity&apos;,&apos;http://udacity.com&apos;)#add_to_index(index,&apos;computing&apos;,&apos;http://acm.org&apos;)#add_to_index(index,&apos;udacity&apos;,&apos;http://npr.org&apos;)#print index#&gt;&gt;&gt; [[&apos;udacity&apos;, [&apos;http://udacity.com&apos;, &apos;http://npr.org&apos;]], #&gt;&gt;&gt; [&apos;computing&apos;, [&apos;http://acm.org&apos;]]] https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/SGkb6vqS7zA.mp4123456def add_to_index(index,keyword,url): for entry in index: if entry[0]== keyword: entry[1].append(url) return index.append([keyword,[url]]) Lookuphttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/hzDJhLS4yCo.mp412345678910111213141516171819202122232425262728# Define a procedure, lookup,# that takes two inputs:# - an index# - keyword# The procedure should return a list# of the urls associated# with the keyword. If the keyword# is not in the index, the procedure# should return an empty list.index = [[&apos;udacity&apos;, [&apos;http://udacity.com&apos;, &apos;http://npr.org&apos;]], [&apos;computing&apos;, [&apos;http://acm.org&apos;]]]def lookup(index,keyword): for entry in index: if entry[0]==keyword: return entry[1] return []print lookup(index,&apos;udacity&apos;)#&gt;&gt;&gt; [&apos;http://udacity.com&apos;,&apos;http://npr.org&apos;] https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/bVjECgrnKj4.mp4 Building the Web Indexhttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/aRteT5uKqfg.mp4 Add Page to Indexhttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/_5rpzWzFnJM.mp41234567891011121314151617181920212223242526272829303132333435# Define a procedure, add_page_to_index,# that takes three inputs:# - index# - url (String)# - content (String)# It should update the index to include# all of the word occurences found in the# page content by adding the url to the# word&apos;s associated url list.index = []def add_to_index(index,keyword,url): for entry in index: if entry[0] == keyword: entry[1].append(url) return index.append([keyword,[url]])def add_page_to_index(index,url,content): contents = content.split() for word in contents: add_to_index(index,word,url) add_page_to_index(index,&apos;fake.text&apos;,&quot;This is a test&quot;)print index#&gt;&gt;&gt; [[&apos;This&apos;, [&apos;fake.text&apos;]], [&apos;is&apos;, [&apos;fake.text&apos;]], [&apos;a&apos;, [&apos;fake.text&apos;]],#&gt;&gt;&gt; [&apos;test&apos;,[&apos;fake.text&apos;]]] https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/i3V-Aw4y-hg.mp4 Finishing the Web Crawlerhttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/dQjsf-4cWo0.mp4https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/cPKnNmFTS80.mp4 Startuphttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/1XElSoLZfKQ.mp4 The Internethttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/ePw5eGJXuw8.mp4 Networkshttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/dy4KsLNw1lU.mp4https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/_8Xgtd4j7j8.mp4 Smoke Signalshttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/8B6WSjA7DG8.mp4 Latencyhttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/6_1akTCAnt4.mp4https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/5NoF37dKsAI.mp4 Bandwidthhttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/P83jTqcQ10A.mp4 Bitshttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/6HCFOyZI9tA.mp4https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/4OxrAgA30T8.mp4 Buckets of Bitshttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/IS7TO_lLXFE.mp4 What Is Your Bandwidth?https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/jG252FaodkA.mp4 Traceroutehttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/kU30juVBCBg.mp4123456789101112131415161718192021222324252627282930313233343536373839C:\Users\SSQ&gt;tracert www.udacity.com通过最多 30 个跃点跟踪到 apollo-mesos-elb-berlioz2-prod-885022263.us-west-2.elb.amazonaws.com [52.32.68.151] 的路由: 1 2 ms 60 ms 1 ms 192.168.1.1 2 14 ms 2 ms 4 ms 222.199.225.1 3 1 ms 1 ms 1 ms 202.4.128.193 4 342 ms 415 ms 227 ms 202.4.128.213 5 631 ms 413 ms 727 ms 172.30.33.5 6 683 ms 390 ms 638 ms 10.255.100.161 7 635 ms 532 ms 680 ms 124.205.98.145 8 * * * 请求超时。 9 * * * 请求超时。 10 * 707 ms * 14.197.246.209 11 483 ms 709 ms * 221.4.0.134 12 784 ms 701 ms 700 ms 221.4.0.133 13 736 ms 698 ms 721 ms 120.80.3.37 14 * 719 ms 768 ms 120.81.0.101 15 * * 793 ms 219.158.111.253 16 886 ms 646 ms 825 ms 219.158.13.98 17 886 ms 605 ms 601 ms 219.158.103.94 18 1135 ms 855 ms 1167 ms 219.158.116.234 19 956 ms 910 ms 1132 ms sjp-brdr-04.inet.qwest.net [63.146.27.85] 20 1157 ms 1001 ms * tuk-edge-13.inet.qwest.net [67.14.4.206] 21 1181 ms 962 ms 1157 ms 65-122-235-170.dia.static.qwest.net [65.122.235.170] 22 * * * 请求超时。 23 * * * 请求超时。 24 * * * 请求超时。 25 * * * 请求超时。 26 * * * 请求超时。 27 1034 ms 995 ms 1037 ms 52.93.14.71 28 1007 ms * 1067 ms 52.93.14.70 29 * * * 请求超时。 30 955 ms 915 ms 926 ms 205.251.232.222跟踪完成。 Traveling Datahttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/bQqvRI8NSFo.mp4https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/8csDnLICd4w.mp4 Making a Networkhttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/jFElXIkFEhc.mp4 Protocolshttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/0U31-O4oEPc.mp4 Conclusionhttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/1wKlRFhn4zg.mp4 Lesson 16 Problem SetData Structureshttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/6rE8vvdYn2c.mp4 Ben BitdiddleBen Bitdiddle suggests changing the index code by replacing the add_to_index and lookup procedures with the ones shown below the question. def add_to_index(index, keyword, url): index.append([keyword, url]) def lookup(index, keyword): result = [] for entry in index: if entry[0] == keyword: result.append(entry[1]) return result This changes the structure of index, but suppose the only way we use index is by calling add_to_index and lookup. How would this affect the search engine? **It would produce the wrong results for some lookup queries. It would produce the same results for all queries, but lookup would sometimes be faster than the original code. It would produce the same results for all queries, but add_to_index would be faster and lookup would usually be slower than the original code. It would produce the same results and take the same amount of time for all queries** Old Code def add_to_index(index, keyword, url): for entry in index: if entry[0] == keyword: entry[1].append(url) return # not found, add new keyword to index index.append([keyword, [url]]) def lookup(index, keyword): for entry in index: if entry[0] == keyword: return entry[1] return [] https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/h5KA5t8yo3I.mp4 Networkinghttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/rl7zOmndGLY.mp4 Better Splitting123456789101112131415161718192021222324252627282930313233# 1 Gold Star# The built-in &lt;string&gt;.split() procedure works# okay, but fails to find all the words on a page# because it only uses whitespace to split the# string. To do better, we should also use punctuation# marks to split the page into words.# Define a procedure, split_string, that takes two# inputs: the string to split and a string containing# all of the characters considered separators. The# procedure should return a list of strings that break# the source string up by the characters in the# splitlist.def split_string(source,splitlist):#out = split_string(&quot;This is a test-of the,string separation-code!&quot;,&quot; ,!-&quot;)#print out#&gt;&gt;&gt; [&apos;This&apos;, &apos;is&apos;, &apos;a&apos;, &apos;test&apos;, &apos;of&apos;, &apos;the&apos;, &apos;string&apos;, &apos;separation&apos;, &apos;code&apos;]#out = split_string(&quot;After the flood ... all the colors came out.&quot;, &quot; .&quot;)#print out#&gt;&gt;&gt; [&apos;After&apos;, &apos;the&apos;, &apos;flood&apos;, &apos;all&apos;, &apos;the&apos;, &apos;colors&apos;, &apos;came&apos;, &apos;out&apos;]#out = split_string(&quot;First Name,Last Name,Street Address,City,State,Zip Code&quot;,&quot;,&quot;)#print out#&gt;&gt;&gt;[&apos;First Name&apos;, &apos;Last Name&apos;, &apos;Street Address&apos;, &apos;City&apos;, &apos;State&apos;, &apos;Zip Code&apos;] https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/alpdXaaSfGI.mp412345678910111213def split_string(source,splitlist): output=[] atsplit=True for char in source: if char in splitlist: atsplit =True else: if atsplit: output.append(char) atsplit=False else: output[-1] =output[-1]+char return output Improving the Index123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100# The current index includes a url in the list of urls# for a keyword multiple times if the keyword appears# on that page more than once.# It might be better to only include the same url# once in the url list for a keyword, even if it appears# many times.# Modify add_to_index so that a given url is only# included once in the url list for a keyword,# no matter how many times that keyword appears.def add_to_index(index, keyword, url): for entry in index: if entry[0] == keyword: entry[1].append(url) return # not found, add new keyword to index index.append([keyword, [url]])def get_page(url): try: if url == &quot;http://www.udacity.com/cs101x/index.html&quot;: return &apos;&apos;&apos;&lt;html&gt; &lt;body&gt; This is a test page for learning to crawl!&lt;p&gt; It is a good idea to&lt;a href=&quot;http://www.udacity.com/cs101x/crawling.html&quot;&gt;learn to crawl&lt;/a&gt; before you try to&lt;a href=&quot;http://www.udacity.com/cs101x/walking.html&quot;&gt;walk&lt;/a&gt; or&lt;a href=&quot;http://www.udacity.com/cs101x/flying.html&quot;&gt;fly&lt;/a&gt;.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;&apos;&apos;&apos; elif url == &quot;http://www.udacity.com/cs101x/crawling.html&quot;: return &apos;&apos;&apos;&lt;html&gt; &lt;body&gt; I have not learned to crawl yet, but I amquite good at &lt;a href=&quot;http://www.udacity.com/cs101x/kicking.html&quot;&gt;kicking&lt;/a&gt;.&lt;/body&gt; &lt;/html&gt;&apos;&apos;&apos; elif url == &quot;http://www.udacity.com/cs101x/walking.html&quot;: return &apos;&apos;&apos;&lt;html&gt; &lt;body&gt; I cant get enough&lt;a href=&quot;http://www.udacity.com/cs101x/index.html&quot;&gt;crawling&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;&apos;&apos;&apos; elif url == &quot;http://www.udacity.com/cs101x/flying.html&quot;: return &apos;&apos;&apos;&lt;html&gt;&lt;body&gt;The magic words are Squeamish Ossifrage!&lt;/body&gt;&lt;/html&gt;&apos;&apos;&apos; except: return &quot;&quot; return &quot;&quot;def union(a, b): for e in b: if e not in a: a.append(e)def get_next_target(page): start_link = page.find(&apos;&lt;a href=&apos;) if start_link == -1: return None, 0 start_quote = page.find(&apos;&quot;&apos;, start_link) end_quote = page.find(&apos;&quot;&apos;, start_quote + 1) url = page[start_quote + 1:end_quote] return url, end_quotedef get_all_links(page): links = [] while True: url, endpos = get_next_target(page) if url: links.append(url) page = page[endpos:] else: break return linksdef crawl_web(seed): tocrawl = [seed] crawled = [] index = [] while tocrawl: page = tocrawl.pop() if page not in crawled: content = get_page(page) add_page_to_index(index, page, content) union(tocrawl, get_all_links(content)) crawled.append(page) return indexdef add_page_to_index(index, url, content): words = content.split() for word in words: add_to_index(index, word, url)def lookup(index, keyword): for entry in index: if entry[0] == keyword: return entry[1] return None#index = crawl_web(&quot;http://www.udacity.com/cs101x/index.html&quot;)#print lookup(index,&quot;is&quot;)#&gt;&gt;&gt; [&apos;http://www.udacity.com/cs101x/index.html&apos;] https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/GD98Z_3cANU.mp412345678def add_to_index(index, keyword, url): for entry in index: if entry[0] == keyword: if not url in entry[1]: entry[1].append(url) return # not found, add new keyword to index index.append([keyword, [url]]) Counting Clicks123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136# 2 Gold Stars# One way search engines rank pages# is to count the number of times a# searcher clicks on a returned link.# This indicates that the person doing# the query thought this was a useful# link for the query, so it should be# higher in the rankings next time.# (In Unit 6, we will look at a different# way of ranking pages that does not depend# on user clicks.)# Modify the index such that for each url in a# list for a keyword, there is also a number# that counts the number of times a user# clicks on that link for this keyword.# The result of lookup(index,keyword) should# now be a list of url entries, where each url# entry is a list of a url and a number# indicating the number of times that url# was clicked for this query keyword.# You should define a new procedure to simulate# user clicks for a given link:# record_user_click(index,word,url)# that modifies the entry in the index for# the input word by increasing the count associated# with the url by 1.# You also will have to modify add_to_index# in order to correctly create the new data# structure, and to prevent the repetition of# entries as in homework 4-5.def record_user_click(index,keyword,url):def add_to_index(index, keyword, url): for entry in index: if entry[0] == keyword: entry[1].append(url) return # not found, add new keyword to index index.append([keyword, [url]])def get_page(url): try: if url == &quot;http://www.udacity.com/cs101x/index.html&quot;: return &apos;&apos;&apos;&lt;html&gt; &lt;body&gt; This is a test page for learning to crawl!&lt;p&gt; It is a good idea to&lt;a href=&quot;http://www.udacity.com/cs101x/crawling.html&quot;&gt;learn to crawl&lt;/a&gt; before you try to&lt;a href=&quot;http://www.udacity.com/cs101x/walking.html&quot;&gt;walk&lt;/a&gt; or&lt;a href=&quot;http://www.udacity.com/cs101x/flying.html&quot;&gt;fly&lt;/a&gt;.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;&apos;&apos;&apos; elif url == &quot;http://www.udacity.com/cs101x/crawling.html&quot;: return &apos;&apos;&apos;&lt;html&gt; &lt;body&gt; I have not learned to crawl yet, but I amquite good at &lt;a href=&quot;http://www.udacity.com/cs101x/kicking.html&quot;&gt;kicking&lt;/a&gt;.&lt;/body&gt; &lt;/html&gt;&apos;&apos;&apos; elif url == &quot;http://www.udacity.com/cs101x/walking.html&quot;: return &apos;&apos;&apos;&lt;html&gt; &lt;body&gt; I cant get enough&lt;a href=&quot;http://www.udacity.com/cs101x/index.html&quot;&gt;crawling&lt;/a&gt;!&lt;/body&gt;&lt;/html&gt;&apos;&apos;&apos; elif url == &quot;http://www.udacity.com/cs101x/flying.html&quot;: return &apos;&lt;html&gt;&lt;body&gt;The magic words are Squeamish Ossifrage!&lt;/body&gt;&lt;/html&gt;&apos; except: return &quot;&quot; return &quot;&quot;def union(a, b): for e in b: if e not in a: a.append(e)def get_next_target(page): start_link = page.find(&apos;&lt;a href=&apos;) if start_link == -1: return None, 0 start_quote = page.find(&apos;&quot;&apos;, start_link) end_quote = page.find(&apos;&quot;&apos;, start_quote + 1) url = page[start_quote + 1:end_quote] return url, end_quotedef get_all_links(page): links = [] while True: url, endpos = get_next_target(page) if url: links.append(url) page = page[endpos:] else: break return linksdef crawl_web(seed): tocrawl = [seed] crawled = [] index = [] while tocrawl: page = tocrawl.pop() if page not in crawled: content = get_page(page) add_page_to_index(index, page, content) union(tocrawl, get_all_links(content)) crawled.append(page) return indexdef add_page_to_index(index, url, content): words = content.split() for word in words: add_to_index(index, word, url)def lookup(index, keyword): for entry in index: if entry[0] == keyword: return entry[1] return None#Here is an example showing a sequence of interactions:index = crawl_web(&apos;http://www.udacity.com/cs101x/index.html&apos;)print lookup(index, &apos;good&apos;)#&gt;&gt;&gt; [[&apos;http://www.udacity.com/cs101x/index.html&apos;, 0],#&gt;&gt;&gt; [&apos;http://www.udacity.com/cs101x/crawling.html&apos;, 0]]record_user_click(index, &apos;good&apos;, &apos;http://www.udacity.com/cs101x/crawling.html&apos;)print lookup(index, &apos;good&apos;)#&gt;&gt;&gt; [[&apos;http://www.udacity.com/cs101x/index.html&apos;, 0],#&gt;&gt;&gt; [&apos;http://www.udacity.com/cs101x/crawling.html&apos;, 1]] https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/XAb3iFZfOl0.mp4123456789101112131415161718def record_user_click(index, keyword, url): urls = lookup(index, keyword) if urls: for entry in urls: if entry[0] == url: entry[1] = entry[1]+1def add_to_index(index, keyword, url): # format of index: [[keyword, [[url, count], [url, count],..]],...] for entry in index: if entry[0] == keyword: for urls in entry[1]: if urls[0] == url: return entry[1].append([url,0]) return # not found, add new keyword to index index.append([keyword, [[url,0]]]) Time Spent at Routershttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/jqNiHcMsS_Y.mp4https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/TWEE2f1w55U.mp4 Problem Set(Optional)Word CountLatencyConverting SecondsDownload CalculatorHow Programs RunIntroductionhttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/XJfrUOoQSOI.mp4Welcome to Unit 5! The notes for Unit 5 are here: PDF and web. The main goal of Unit 5 is to learn about how computer scientists measure cost, which is mostly about understanding how the resources needed to run a program scale with the size of its input. We’ll also learn about implementing and using a hash table, a data structure that will massively improve the performance of our search engine. It was a privilege to meet with Gabriel Weinberg, the founder of DuckDuckGo, to film this introduction. DuckDuckGo protects the privacy of its users and gets around 3 million searches per day. Gabriel’s blog is full of interesting articles about computing and startups. Making Things Fasthttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/JIeuI6mknUk.mp4 Measuring Speedhttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/5vnXm71KECU.mp4 Stopwatchhttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/ms0iENK29jA.mp4 Spin Loophttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/hBw8qWGHrEs.mp4 Predicting Run Timehttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/HBwT29hWXrs.mp4 Make Big Indexhttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/zxfXpB6U_0w.mp4 Index Size Vs. Timehttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/yYm5t1wLarM.mp4Sample timings: &gt;&gt;&gt; time_execution(&apos;lookup(index10000, &quot;udacity&quot;)&apos;) (None, 0.000968000000000302) &gt;&gt;&gt; time_execution(&apos;lookup(index10000, &quot;udacity&quot;)&apos;) (None, 0.000905999999863066) &gt;&gt;&gt; time_execution(&apos;lookup(index100000, &quot;udacity&quot;)&apos;) (None, 0.008590000000002652) &gt;&gt;&gt; time_execution(&apos;lookup(index100000, &quot;udacity&quot;)&apos;) (None, 0.008517999999998093) https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/5DHrCwtBuGU.mp4 Lookup Timehttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/PsCqA6fJ1hk.mp4This quiz depends on the code for make_big_index(size) from a few segments before: def make_big_index(size): index = [] letters = [&apos;a&apos;, &apos;a&apos;, &apos;a&apos;, &apos;a&apos;, &apos;a&apos;, &apos;a&apos;, &apos;a&apos;, &apos;a&apos;] while len(index) &lt; size: word = make_string(letters) add_to_index(index, word, &apos;fake&apos;) for i in range(len(letters) - 1, 0, -1): if letters[i] &lt; &apos;z&apos;: letters[i] = chr(ord(letters[i]) + 1) break else: letters[i] = &apos;a&apos; return index This quiz depends on the code for make_big_index(size) from a few segments before (as well as the code for lookup and add_to_index):https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/WtfufPxl8Mw.mp4 Worst Casehttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/TBylO5VopA4.mp4https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/26jeGBtszyk.mp4 Fast Enoughhttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/lSakl4WtFiE.mp4https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/rbYT97miQMY.mp4 Making Lookup Fasterhttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/AArXvYMTCOM.mp4 Hash Tablehttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/KxGQbWGPeak.mp4https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/fdddZ5zcHyI.mp4 Hash Functionhttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/xzQy09kBswM.mp4ord()ord(&#39;a&#39;)-&gt;97chr() Modulus Operatorhttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/b2J5RyLdNy8.mp4 Modulus Quizhttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/l8cjHI9UbW4.mp4https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/nmV96-OcGi4.mp4 Equivalent Expressionshttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/yoUU_QDJv4o.mp4https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/TRuWp6uRBKI.mp4 Bad Hashhttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/gGSY4yAusdk.mp4https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/qn99D3acUnA.mp4 Better Hash Functionshttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/SKbp6T6C-0Q.mp41234567891011121314151617181920212223242526# Define a function, hash_string,# that takes as inputs a keyword# (string) and a number of buckets,# and returns a number representing# the bucket for that keyword.def hash_string(keyword,buckets):#print hash_string(&apos;a&apos;,12)#&gt;&gt;&gt; 1#print hash_string(&apos;b&apos;,12)#&gt;&gt;&gt; 2#print hash_string(&apos;a&apos;,13)#&gt;&gt;&gt; 6#print hash_string(&apos;au&apos;,12)#&gt;&gt;&gt; 10#print hash_string(&apos;udacity&apos;,12)#&gt;&gt;&gt; 11 https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/9vGXclxo8Kc.mp4My claim about the performance being better with the % buckets inside the loop is (often, and possibly always?) incorrect. Some enterprising students have done experiments showing this, and there is more discussion in the forum. Testing Hash Functionshttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/TjWwI-MvEhI.mp4 Keywords and Bucketshttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/2cL69wIOpVk.mp4https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/0k-hAMfA5uY.mp4 Implementing Hash Tableshttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/sRfcPW1Rj_4.mp4https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/3AN9tyu_w-I.mp4 Empty Hash Tablehttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/a_NjE-wJQGc.mp41234567# Creating an Empty Hash Table# Define a procedure, make_hashtable,# that takes as input a number, nbuckets,# and returns an empty hash table with# nbuckets empty buckets.def make_hashtable(nbuckets): https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/e3gDr_MWqDA.mp4 The Hard Wayhttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/cpAkNOOdzLw.mp4https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/GY8OtZj6LZA.mp4 Finding Bucketshttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/0ZOo7GAm2qU.mp4123456789101112131415161718192021222324252627282930313233# Define a procedure, hashtable_get_bucket,# that takes two inputs - a hashtable, and# a keyword, and returns the bucket where the# keyword could occur.def hashtable_get_bucket(htable,keyword):def hash_string(keyword,buckets): out = 0 for s in keyword: out = (out + ord(s)) % buckets return outdef make_hashtable(nbuckets): table = [] for unused in range(0,nbuckets): table.append([]) return table#table = [[[&apos;Francis&apos;, 13], [&apos;Ellis&apos;, 11]], [], [[&apos;Bill&apos;, 17],#[&apos;Zoe&apos;, 14]], [[&apos;Coach&apos;, 4]], [[&apos;Louis&apos;, 29], [&apos;Rochelle&apos;, 4], [&apos;Nick&apos;, 2]]]#print hashtable_get_bucket(table, &quot;Zoe&quot;)#&gt;&gt;&gt; [[&apos;Bill&apos;, 17], [&apos;Zoe&apos;, 14]]#print hashtable_get_bucket(table, &quot;Brick&quot;)#&gt;&gt;&gt; []#print hashtable_get_bucket(table, &quot;Lilith&quot;)#&gt;&gt;&gt; [[&apos;Louis&apos;, 29], [&apos;Rochelle&apos;, 4], [&apos;Nick&apos;, 2]] https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/e_ZLxgElqks.mp4 Adding Keywordshttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/VFulPFO-OS0.mp4123456789101112131415161718192021222324252627282930313233343536373839404142434445# Define a procedure,## hashtable_add(htable,key,value)## that adds the key to the hashtable (in # the correct bucket), with the correct # value and returns the new hashtable.## (Note that the video question and answer# do not return the hashtable, but your code# should do this to pass the test cases.)def hashtable_add(htable,key,value): # your code here return htable def hashtable_get_bucket(htable,keyword): return htable[hash_string(keyword,len(htable))]def hash_string(keyword,buckets): out = 0 for s in keyword: out = (out + ord(s)) % buckets return outdef make_hashtable(nbuckets): table = [] for unused in range(0,nbuckets): table.append([]) return table#table = make_hashtable(5)#hashtable_add(table,&apos;Bill&apos;, 17)#hashtable_add(table,&apos;Coach&apos;, 4)#hashtable_add(table,&apos;Ellis&apos;, 11)#hashtable_add(table,&apos;Francis&apos;, 13)#hashtable_add(table,&apos;Louis&apos;, 29)#hashtable_add(table,&apos;Nick&apos;, 2)#hashtable_add(table,&apos;Rochelle&apos;, 4)#hashtable_add(table,&apos;Zoe&apos;, 14)#print table#&gt;&gt;&gt; [[[&apos;Ellis&apos;, 11], [&apos;Francis&apos;, 13]], [], [[&apos;Bill&apos;, 17], [&apos;Zoe&apos;, 14]], #&gt;&gt;&gt; [[&apos;Coach&apos;, 4]], [[&apos;Louis&apos;, 29], [&apos;Nick&apos;, 2], [&apos;Rochelle&apos;, 4]]] https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/ge6HmR7EuDI.mp412345678910111213141516171819202122232425262728293031323334353637383940414243444546# Define a procedure,## hashtable_add(htable,key,value)## that adds the key to the hashtable (in # the correct bucket), with the correct # value and returns the new hashtable.## (Note that the video question and answer# do not return the hashtable, but your code# should do this to pass the test cases.)def hashtable_add(htable,key,value): # your code here bucket = hashtable_get_bucket(htable,key) bucket.append([key,value]) return htable def hashtable_get_bucket(htable,keyword): return htable[hash_string(keyword,len(htable))]def hash_string(keyword,buckets): out = 0 for s in keyword: out = (out + ord(s)) % buckets return outdef make_hashtable(nbuckets): table = [] for unused in range(0,nbuckets): table.append([]) return tabletable = make_hashtable(5)hashtable_add(table,&apos;Bill&apos;, 17)hashtable_add(table,&apos;Coach&apos;, 4)hashtable_add(table,&apos;Ellis&apos;, 11)hashtable_add(table,&apos;Francis&apos;, 13)hashtable_add(table,&apos;Louis&apos;, 29)hashtable_add(table,&apos;Nick&apos;, 2)hashtable_add(table,&apos;Rochelle&apos;, 4)hashtable_add(table,&apos;Zoe&apos;, 14)print table#&gt;&gt;&gt; [[[&apos;Ellis&apos;, 11], [&apos;Francis&apos;, 13]], [], [[&apos;Bill&apos;, 17], [&apos;Zoe&apos;, 14]], #&gt;&gt;&gt; [[&apos;Coach&apos;, 4]], [[&apos;Louis&apos;, 29], [&apos;Nick&apos;, 2], [&apos;Rochelle&apos;, 4]]] Lookuphttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/vJJ0wakAu7s.mp41234567891011121314151617181920212223242526272829303132333435363738394041424344# Define a procedure,# hashtable_lookup(htable,key)# that takes two inputs, a hashtable# and a key (string),# and returns the value associated# with that key.def hashtable_lookup(htable,key):def hashtable_add(htable,key,value): bucket = hashtable_get_bucket(htable,key) bucket.append([key,value])def hashtable_get_bucket(htable,keyword): return htable[hash_string(keyword,len(htable))]def hash_string(keyword,buckets): out = 0 for s in keyword: out = (out + ord(s)) % buckets return outdef make_hashtable(nbuckets): table = [] for unused in range(0,nbuckets): table.append([]) return table#table = [[[&apos;Ellis&apos;, 11], [&apos;Francis&apos;, 13]], [], [[&apos;Bill&apos;, 17], [&apos;Zoe&apos;, 14]],#[[&apos;Coach&apos;, 4]], [[&apos;Louis&apos;, 29], [&apos;Nick&apos;, 2], [&apos;Rochelle&apos;, 4]]]#print hashtable_lookup(table, &apos;Francis&apos;)#&gt;&gt;&gt; 13#print hashtable_lookup(table, &apos;Louis&apos;)#&gt;&gt;&gt; 29#print hashtable_lookup(table, &apos;Zoe&apos;)#&gt;&gt;&gt; 14 https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/cKkaGzt9pwk.mp4 Update1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253# Define a procedure,# hashtable_update(htable,key,value)# that updates the value associated with key. If key is already in the# table, change the value to the new value. Otherwise, add a new entry# for the key and value.# Hint: Use hashtable_lookup as a starting point.# Make sure that you return the new htabledef hashtable_update(htable,key,value): # Your code here return htabledef hashtable_lookup(htable,key): bucket = hashtable_get_bucket(htable,key) for entry in bucket: if entry[0] == key: return entry[1] return Nonedef hashtable_add(htable,key,value): bucket = hashtable_get_bucket(htable,key) bucket.append([key,value])def hashtable_get_bucket(htable,keyword): return htable[hash_string(keyword,len(htable))]def hash_string(keyword,buckets): out = 0 for s in keyword: out = (out + ord(s)) % buckets return outdef make_hashtable(nbuckets): table = [] for unused in range(0,nbuckets): table.append([]) return tabletable = [[[&apos;Ellis&apos;, 11], [&apos;Francis&apos;, 13]], [], [[&apos;Bill&apos;, 17], [&apos;Zoe&apos;, 14]],[[&apos;Coach&apos;, 4]], [[&apos;Louis&apos;, 29], [&apos;Nick&apos;, 2], [&apos;Rochelle&apos;, 4]]]#hashtable_update(table, &apos;Bill&apos;, 42)#hashtable_update(table, &apos;Rochelle&apos;, 94)#hashtable_update(table, &apos;Zed&apos;, 68)#print table#&gt;&gt;&gt; [[[&apos;Ellis&apos;, 11], [&apos;Francis&apos;, 13]], [[&apos;Zed&apos;, 68]], [[&apos;Bill&apos;, 42], #&gt;&gt;&gt; [&apos;Zoe&apos;, 14]], [[&apos;Coach&apos;, 4]], [[&apos;Louis&apos;, 29], [&apos;Nick&apos;, 2], #&gt;&gt;&gt; [&apos;Rochelle&apos;, 94]]] https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/UPiqKaXshfw.mp4 Dictionarieshttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/Tne9hgBqCUY.mp4 Using Dictionarieshttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/5wTxBLzR5aM.mp4For further information on Hash Tables in Python, please refer to this article here Populationhttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/em3CWlSaEKY.mp412345678910111213# Define a Dictionary, population,# that provides information# on the world&apos;s largest cities.# The key is the name of a city# (a string), and the associated# value is its population in# millions.# Key | Value# Shanghai | 17.8# Istanbul | 13.3# Karachi | 13.0# Mumbai | 12.5 https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/H-eGAkgjg_s.mp4 A Noble Gashttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/qJNsfRfFw-c.mp4 Modifying the Search Enginehttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/ncC1XboU_lo.mp4Here’s the code in a more readable format:12345678910111213141516171819202122232425262728293031323334353637383940def get_all_links(page): links = [] while True: url, endpos = get_next_target(page) if url: links.append(url) page = page[endpos:] else: break return linksdef crawl_web(seed): tocrawl = [seed] crawled = [] index = [] while tocrawl: page = tocrawl.pop() if page not in crawled: content = get_page(page) add_page_to_index(index, page, content) union(tocrawl, get_all_links(content)) crawled.append(page) return index def add_page_to_index(index, url, content): words = content.split() for word in words: add_to_index(index, word, url) def add_to_index(index, keyword, url): for entry in index: if entry[0] == keyword: entry[1].append(url) return # not found, add new keyword to index index.append([keyword, [url]]) def lookup(index, keyword): for entry in index: if entry[0] == keyword: return entry[1] return None Here’s the code in a more readable way: (thanks to Christina-49) def get_all_links(page): links = [] while True: url, endpos = get_next_target(page) if url: links.append(url) page = page[endpos:] else: break return links12345678910111213141516171819202122232425262728293031def crawl_web(seed): tocrawl = [seed] crawled = [] index = [] while tocrawl: page = tocrawl.pop() if page not in crawled: content = get_page(page) add_page_to_index(index, page, content) union(tocrawl, get_all_links(content)) crawled.append(page) return index def add_page_to_index(index, url, content): words = content.split() for word in words: add_to_index(index, word, url) def add_to_index(index, keyword, url): for entry in index: if entry[0] == keyword: entry[1].append(url) return # not found, add new keyword to index index.append([keyword, [url]]) def lookup(index, keyword): for entry in index: if entry[0] == keyword: return entry[1] return None Here’s the code in a more readable format: (thanks to Christina-49)https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/NBJx7q8XNpE.mp4 Changing Lookuphttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/OdToP6LQRoc.mp412345678# Change the lookup procedure# to now work with dictionaries.def lookup(index, keyword): if keyword in index: return index[keyword] else: return None https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/avNhSME0qxQ.mp4 Coming Up Nexthttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/-qYyswP4FqI.mp4 Problem SetGrowth Measuring CostFor which of these procedures does the worst-case running time scale linearly in the number of elements in the input list p? (You may assume that the elements in the list are all small numbers) Sum_listdef sum_list(p): sum = 0 for e in p: sum = sum + e return sum Has_duplicate_element def has_duplicate_element(p): res = [] for i in range(0, len(p)): for j in range(0, len(p)): if i != j and p[i] == p[j]: return True return False Mystery def mystery(p): i = 0 while True: if i &gt;= len(p): break if p[i] % 2: i = i + 2 else: i = i + 1 return i Peter muddles up odd and even in the last question. The statement p[i] % 2 is True whenp[i] is odd and False when it is even, so the worst case is when all the elements in the list are even.https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/tlFdhxXJzaw.mp4 Hash String Hash StringSuppose we have a hash table implemented as described in Unit 5 using the hash_string function. def hash_string(keyword, buckets): h = 0 for c in keyword: h = (h + ord(c)) % buckets return h Which of the following are true statements? Statement 1The number of string comparisons done to lookup a keyword that is not a key in the hash table may be less than the number needed to lookup a keyword that is a key in the hash table. Statement 2We should expect the time to lookup most keywords in the hash table will decrease as we increase the number of buckets. Statement 3It is always better to have more buckets in a hash table. Statement 4The time to lookup a keyword in the hash table is always less than the time it would take in a linear time list (as used in Unit 4). Is Offered12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394# Dictionaries of Dictionaries (of Dictionaries)# The next several questions concern the data structure below for keeping# track of Udacity&apos;s courses (where all of the values are strings):# &#123; &lt;hexamester&gt;, &#123; &lt;class&gt;: &#123; &lt;property&gt;: &lt;value&gt;, ... &#125;,# ... &#125;,# ... &#125;#For example,courses = &#123; &apos;feb2012&apos;: &#123; &apos;cs101&apos;: &#123;&apos;name&apos;: &apos;Building a Search Engine&apos;, &apos;teacher&apos;: &apos;Dave&apos;, &apos;assistant&apos;: &apos;Peter C.&apos;&#125;, &apos;cs373&apos;: &#123;&apos;name&apos;: &apos;Programming a Robotic Car&apos;, &apos;teacher&apos;: &apos;Sebastian&apos;, &apos;assistant&apos;: &apos;Andy&apos;&#125;&#125;, &apos;apr2012&apos;: &#123; &apos;cs101&apos;: &#123;&apos;name&apos;: &apos;Building a Search Engine&apos;, &apos;teacher&apos;: &apos;Dave&apos;, &apos;assistant&apos;: &apos;Sarah&apos;&#125;, &apos;cs212&apos;: &#123;&apos;name&apos;: &apos;The Design of Computer Programs&apos;, &apos;teacher&apos;: &apos;Peter N.&apos;, &apos;assistant&apos;: &apos;Andy&apos;, &apos;prereq&apos;: &apos;cs101&apos;&#125;, &apos;cs253&apos;: &#123;&apos;name&apos;: &apos;Web Application Engineering - Building a Blog&apos;, &apos;teacher&apos;: &apos;Steve&apos;, &apos;prereq&apos;: &apos;cs101&apos;&#125;, &apos;cs262&apos;: &#123;&apos;name&apos;: &apos;Programming Languages - Building a Web Browser&apos;, &apos;teacher&apos;: &apos;Wes&apos;, &apos;assistant&apos;: &apos;Peter C.&apos;, &apos;prereq&apos;: &apos;cs101&apos;&#125;, &apos;cs373&apos;: &#123;&apos;name&apos;: &apos;Programming a Robotic Car&apos;, &apos;teacher&apos;: &apos;Sebastian&apos;&#125;, &apos;cs387&apos;: &#123;&apos;name&apos;: &apos;Applied Cryptography&apos;, &apos;teacher&apos;: &apos;Dave&apos;&#125;&#125;, &apos;jan2044&apos;: &#123; &apos;cs001&apos;: &#123;&apos;name&apos;: &apos;Building a Quantum Holodeck&apos;, &apos;teacher&apos;: &apos;Dorina&apos;&#125;, &apos;cs003&apos;: &#123;&apos;name&apos;: &apos;Programming a Robotic Robotics Teacher&apos;, &apos;teacher&apos;: &apos;Jasper&apos;&#125;, &#125; &#125;# If you want to loop through the keys in the dictionary,# you can use the construct below.# for &lt;key&gt; in &lt;dictionary&gt;:# &lt;block&gt; # For example, this procedure returns a list of all the courses offered # in the given hexamester:def courses_offered(courses, hexamester): res = [] for c in courses[hexamester]: res.append(c) return res# You do not need to use this code if you do not want to and may find another, # simpler method to answer this question, although later ones may require this.# Define a procedure, is_offered(courses, course, hexamester), that returns # True if the input course is offered in the input hexamester, and returns # False otherwise. For example,#print is_offered(courses, &apos;cs101&apos;, &apos;apr2012&apos;)#&gt;&gt;&gt; True#print is_offered(courses, &apos;cs003&apos;, &apos;apr2012&apos;)#&gt;&gt;&gt; False# (Note: it is okay if your procedure produces an error if the input # hexamester is not included in courses.# For example, is_offered(courses, &apos;cs101&apos;, &apos;dec2011&apos;) can produce an error.)# However, do not leave any uncommented statements in your code which lead # to an error as your code will be graded as incorrect.def is_offered(courses, course, hexamester):#print is_offered(courses, &apos;cs101&apos;, &apos;apr2012&apos;)#&gt;&gt;&gt; True#print is_offered(courses, &apos;cs003&apos;, &apos;apr2012&apos;)#&gt;&gt;&gt; False#print is_offered(courses, &apos;cs001&apos;, &apos;jan2044&apos;)#&gt;&gt;&gt; True#print is_offered(courses, &apos;cs253&apos;, &apos;feb2012&apos;)#&gt;&gt;&gt; False https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/Qq8Hd290n5c.mp4 When Offered123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172# Dictionaries of Dictionaries (of Dictionaries)# The next several questions concern the data structure below for keeping# track of Udacity&apos;s courses (where all of the values are strings):# &#123; &lt;hexamester&gt;, &#123; &lt;class&gt;: &#123; &lt;property&gt;: &lt;value&gt;, ... &#125;,# ... &#125;,# ... &#125;# For example,courses = &#123; &apos;feb2012&apos;: &#123; &apos;cs101&apos;: &#123;&apos;name&apos;: &apos;Building a Search Engine&apos;, &apos;teacher&apos;: &apos;Dave&apos;, &apos;assistant&apos;: &apos;Peter C.&apos;&#125;, &apos;cs373&apos;: &#123;&apos;name&apos;: &apos;Programming a Robotic Car&apos;, &apos;teacher&apos;: &apos;Sebastian&apos;, &apos;assistant&apos;: &apos;Andy&apos;&#125;&#125;, &apos;apr2012&apos;: &#123; &apos;cs101&apos;: &#123;&apos;name&apos;: &apos;Building a Search Engine&apos;, &apos;teacher&apos;: &apos;Dave&apos;, &apos;assistant&apos;: &apos;Sarah&apos;&#125;, &apos;cs212&apos;: &#123;&apos;name&apos;: &apos;The Design of Computer Programs&apos;, &apos;teacher&apos;: &apos;Peter N.&apos;, &apos;assistant&apos;: &apos;Andy&apos;, &apos;prereq&apos;: &apos;cs101&apos;&#125;, &apos;cs253&apos;: &#123;&apos;name&apos;: &apos;Web Application Engineering - Building a Blog&apos;, &apos;teacher&apos;: &apos;Steve&apos;, &apos;prereq&apos;: &apos;cs101&apos;&#125;, &apos;cs262&apos;: &#123;&apos;name&apos;: &apos;Programming Languages - Building a Web Browser&apos;, &apos;teacher&apos;: &apos;Wes&apos;, &apos;assistant&apos;: &apos;Peter C.&apos;, &apos;prereq&apos;: &apos;cs101&apos;&#125;, &apos;cs373&apos;: &#123;&apos;name&apos;: &apos;Programming a Robotic Car&apos;, &apos;teacher&apos;: &apos;Sebastian&apos;&#125;, &apos;cs387&apos;: &#123;&apos;name&apos;: &apos;Applied Cryptography&apos;, &apos;teacher&apos;: &apos;Dave&apos;&#125;&#125;, &apos;jan2044&apos;: &#123; &apos;cs001&apos;: &#123;&apos;name&apos;: &apos;Building a Quantum Holodeck&apos;, &apos;teacher&apos;: &apos;Dorina&apos;&#125;, &apos;cs003&apos;: &#123;&apos;name&apos;: &apos;Programming a Robotic Robotics Teacher&apos;, &apos;teacher&apos;: &apos;Jasper&apos;&#125;, &#125; &#125;# For the following questions, you will find the# for &lt;key&gt; in &lt;dictionary&gt;:# &lt;block&gt;# construct useful. This loops through the key values in the Dictionary. For# example, this procedure returns a list of all the courses offered in the given# hexamester:def courses_offered(courses, hexamester): res = [] for c in courses[hexamester]: res.append(c) return res# Define a procedure, when_offered(courses, course), that takes a courses data# structure and a string representing a class, and returns a list of strings# representing the hexamesters when the input course is offered.def when_offered(courses,course):#print when_offered (courses, &apos;cs101&apos;)#&gt;&gt;&gt; [&apos;apr2012&apos;, &apos;feb2012&apos;]#print when_offered(courses, &apos;bio893&apos;)#&gt;&gt;&gt; [] https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/hftOGwEW4qY.mp4 Involved12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091# Dictionaries of Dictionaries (of Dictionaries)# The next several questions concern the data structure below for keeping# track of Udacity&apos;s courses (where all of the values are strings):# &#123; &lt;hexamester&gt;, &#123; &lt;class&gt;: &#123; &lt;property&gt;: &lt;value&gt;, ... &#125;,# ... &#125;,# ... &#125;# For example,courses = &#123; &apos;feb2012&apos;: &#123; &apos;cs101&apos;: &#123;&apos;name&apos;: &apos;Building a Search Engine&apos;, &apos;teacher&apos;: &apos;Dave&apos;, &apos;assistant&apos;: &apos;Peter C.&apos;&#125;, &apos;cs373&apos;: &#123;&apos;name&apos;: &apos;Programming a Robotic Car&apos;, &apos;teacher&apos;: &apos;Sebastian&apos;, &apos;assistant&apos;: &apos;Andy&apos;&#125;&#125;, &apos;apr2012&apos;: &#123; &apos;cs101&apos;: &#123;&apos;name&apos;: &apos;Building a Search Engine&apos;, &apos;teacher&apos;: &apos;Dave&apos;, &apos;assistant&apos;: &apos;Sarah&apos;&#125;, &apos;cs212&apos;: &#123;&apos;name&apos;: &apos;The Design of Computer Programs&apos;, &apos;teacher&apos;: &apos;Peter N.&apos;, &apos;assistant&apos;: &apos;Andy&apos;, &apos;prereq&apos;: &apos;cs101&apos;&#125;, &apos;cs253&apos;: &#123;&apos;name&apos;: &apos;Web Application Engineering - Building a Blog&apos;, &apos;teacher&apos;: &apos;Steve&apos;, &apos;prereq&apos;: &apos;cs101&apos;&#125;, &apos;cs262&apos;: &#123;&apos;name&apos;: &apos;Programming Languages - Building a Web Browser&apos;, &apos;teacher&apos;: &apos;Wes&apos;, &apos;assistant&apos;: &apos;Peter C.&apos;, &apos;prereq&apos;: &apos;cs101&apos;&#125;, &apos;cs373&apos;: &#123;&apos;name&apos;: &apos;Programming a Robotic Car&apos;, &apos;teacher&apos;: &apos;Sebastian&apos;&#125;, &apos;cs387&apos;: &#123;&apos;name&apos;: &apos;Applied Cryptography&apos;, &apos;teacher&apos;: &apos;Dave&apos;&#125;&#125;, &apos;jan2044&apos;: &#123; &apos;cs001&apos;: &#123;&apos;name&apos;: &apos;Building a Quantum Holodeck&apos;, &apos;teacher&apos;: &apos;Dorina&apos;&#125;, &apos;cs003&apos;: &#123;&apos;name&apos;: &apos;Programming a Robotic Robotics Teacher&apos;, &apos;teacher&apos;: &apos;Jasper&apos;&#125;, &#125; &#125;# For the following questions, you will find the# for &lt;key&gt; in &lt;dictionary&gt;:# &lt;block&gt;# construct useful. This loops through the key values in the Dictionary. For# example, this procedure returns a list of all the courses offered in the given# hexamester:def courses_offered(courses, hexamester): res = [] for c in courses[hexamester]: res.append(c) return res# [Double Gold Star] Define a procedure, involved(courses, person), that takes # as input a courses structure and a person and returns a Dictionary that # describes all the courses the person is involved in. A person is involved # in a course if they are a value for any property for the course. The output # Dictionary should have hexamesters as its keys, and each value should be a # list of courses that are offered that hexamester (the courses in the list # can be in any order).def involved(courses, person):# For example:#print involved(courses, &apos;Dave&apos;)#&gt;&gt;&gt; &#123;&apos;apr2012&apos;: [&apos;cs101&apos;, &apos;cs387&apos;], &apos;feb2012&apos;: [&apos;cs101&apos;]&#125;#print involved(courses, &apos;Peter C.&apos;)#&gt;&gt;&gt; &#123;&apos;apr2012&apos;: [&apos;cs262&apos;], &apos;feb2012&apos;: [&apos;cs101&apos;]&#125;#print involved(courses, &apos;Dorina&apos;)#&gt;&gt;&gt; &#123;&apos;jan2044&apos;: [&apos;cs001&apos;]&#125;#print involved(courses,&apos;Peter&apos;)#&gt;&gt;&gt; &#123;&#125;#print involved(courses,&apos;Robotic&apos;)#&gt;&gt;&gt; &#123;&#125;#print involved(courses, &apos;&apos;)#&gt;&gt;&gt; &#123;&#125; https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/ej9rXa13kr4.mp4 Refactoring1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859# 6. In video 28. Update, it was suggested that some of the duplicate code in# lookup and update could be avoided by a better design. We can do this by# defining a procedure that finds the entry corresponding to a given key, and# using that in both lookup and update.# Here are the original procedures:def hashtable_update(htable, key, value): bucket = hashtable_get_bucket(htable, key) for entry in bucket: if entry[0] == key: entry[1] = value return bucket.append([key, value])def hashtable_lookup(htable, key): bucket = hashtable_get_bucket(htable, key) for entry in bucket: if entry[0] == key: return entry[1] return Nonedef make_hashtable(size): table = [] for unused in range(0, size): table.append([]) return tabledef hash_string(s, size): h = 0 for c in s: h = h + ord(c) return h % sizedef hashtable_get_bucket(htable, key): return htable[hash_string(key, len(htable))]# Whenever we have duplicate code like the loop that finds the entry in# hashtable_update and hashtable_lookup, we should think if there is a better way# to write this that would avoid the duplication. We should be able to rewrite# these procedures to be shorter by defining a new procedure and rewriting both# hashtable_update and hashtable_lookup to use that procedure.# Modify the code for both hashtable_update and hashtable_lookup to have the same# behavior they have now, but using fewer lines of code in each procedure. You# should define a new procedure to help with this. Your new version should have# approximately the same running time as the original version, but neither# hashtable_update or hashtable_lookup should include any for or while loop, and# the block of each procedure should be no more than 6 lines long.# Your procedures should have the same behavior as the originals. For example,table = make_hashtable(10)hashtable_update(table, &apos;Python&apos;, &apos;Monty&apos;)hashtable_update(table, &apos;CLU&apos;, &apos;Barbara Liskov&apos;)hashtable_update(table, &apos;JavaScript&apos;, &apos;Brendan Eich&apos;)hashtable_update(table, &apos;Python&apos;, &apos;Guido van Rossum&apos;)print hashtable_lookup(table, &apos;Python&apos;)#&gt;&gt;&gt; Guido van Rossum https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/EU9NvdGoAt4.mp4 Memoization1234567891011121314151617181920212223242526272829303132333435363738394041424344454647# [Double Gold Star] Memoization is a way to make code run faster by saving# previously computed results. Instead of needing to recompute the value of an# expression, a memoized computation first looks for the value in a cache of# pre-computed values.# Define a procedure, cached_execution(cache, proc, proc_input), that takes in# three inputs: a cache, which is a Dictionary that maps inputs to proc to# their previously computed values, a procedure, proc, which can be called by# just writing proc(proc_input), and proc_input which is the input to proc.# Your procedure should return the value of the proc with input proc_input,# but should only evaluate it if it has not been previously called.def cached_execution(cache, proc, proc_input): # Your code here# Here is an example showing the desired behavior of cached_execution:def factorial(n): print &quot;Running factorial&quot; result = 1 for i in range(2, n + 1): result = result * i return resultcache = &#123;&#125; # start cache as an empty dictionary### first execution (should print out Running factorial and the result)print cached_execution(cache, factorial, 50)print &quot;Second time:&quot;### second execution (should only print out the result)print cached_execution(cache, factorial, 50)# Here is a more interesting example using cached_execution# (do not worry if you do not understand this, though,# it will be clearer after Unit 6):def cached_fibo(n): if n == 1 or n == 0: return n else: return (cached_execution(cache, cached_fibo, n - 1 ) + cached_execution(cache, cached_fibo, n - 2 )) cache = &#123;&#125; # new cache for this procedure# do not try this at home...at least without a cache!print cached_execution(cache, cached_fibo,100) https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/_aPiXzmiems.mp4 Problem Set(Optional)Shift a LetterShift n LetterRotateQ&amp;AHash Tableshttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/eiktSrhdrxs.mp4 Rehashinghttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/UMsVMW2S53w.mp4 Importing Librarieshttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/G3ovp33txfc.mp4 Programming Literacyhttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/0oXF2nOTX6I.mp4 How to Have Infinite PowerInfinite Powerhttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/emhiUKHuBXY.mp4The notes for Unit 6 are here: PDF and web. This unit introduces what I think is the most fascinating and powerful idea in all of computing - recursive definitions. Understanding them requires some mind-bending gymnastics, but once you do, you will find elegant and powerful new ways to think about nearly all problems you encounter. The course moves through this pretty quickly, but fortunately many students have contributed great additional resources that explain things very well and with more detail than I do in the course, and give you more practice with recursive programs. Here are a few that I think are especially good: Yet Another Attempt to Explain Recursion by GoldsongUnderstanding Recursion: The Stack Model by Charles LinStG’s Recursion Collection by Sam the Great Long Wordshttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/-PhZlJuDf_o.mp4https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/XzJO5xc3QIk.mp4 Counterhttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/Ap3okJ5jIUE.mp4 Counter Quizhttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/6s-aT1rO3JQ.mp4https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/YnPLnU9D3mQ.mp4 Expanding Our Grammarhttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/qYsl757ShjA.mp4https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/nU2DBYNw1jM.mp4 Recursive Definitionshttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/LinhpqM4cCg.mp4 Ancestorshttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/_AQRlt9UA4o.mp4https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/Ip3vojOsIkI.mp4 Recursive Procedureshttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/Wa6y0I_uojk.mp4 Recursive FactorialAround ~0:06, Dave says that factorial takes a positive whole number as its input, but factorial can also take 0 as an input as well. Instead, then, the input to factorial can be any positive integer or 0. (Side note: whole numbers are defined differently in different contexts, but they are often defined as all of the non-negative integers. This means the whole numbers are 0, 1, 2, 3, 4…, and if we use this terminology, factorial could take any whole number as its input.) Note: If you get a The server encountered an error. Please try running again. error, that may mean that your program is not terminating when tested. Make sure your recursion will eventually reach a base case.1234567891011121314151617# Define a procedure, factorial, that takes a natural number as its input, and# returns the number of ways to arrange the input number of items.def factorial(n):#print factorial(0)#&gt;&gt;&gt; 1#print factorial(5)#&gt;&gt;&gt; 120#print factorial(10)#&gt;&gt;&gt; 3628800 https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/gWoWZHonPdE.mp4123456789101112131415161718# Define a procedure, factorial, that takes a natural number as its input, and# returns the number of ways to arrange the input number of items.def factorial(n): if n==0: return 1 else: return n*factorial(n-1)print factorial(0)#&gt;&gt;&gt; 1print factorial(5)#&gt;&gt;&gt; 120print factorial(10)#&gt;&gt;&gt; 3628800 Palindromeshttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/zWnI5eACaLM.mp41234567891011121314151617181920212223242526# Define a procedure is_palindrome, that takes as input a string, and returns a# Boolean indicating if the input string is a palindrome.# Base Case: &apos;&apos; =&gt; True# Recursive Case: if first and last characters don&apos;t match =&gt; False# if they do match, is the middle a palindrome?def is_palindrome(s): if len(s)==0: return True else: if s[0]==s[-1]: s=s[1:-1] return is_palindrome(s) else: return False print is_palindrome(&apos;&apos;)#&gt;&gt;&gt; Trueprint is_palindrome(&apos;abab&apos;)#&gt;&gt;&gt; Falseprint is_palindrome(&apos;abba&apos;)#&gt;&gt;&gt; True https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/LTZXRoLZaJQ.mp4 Recursive Vs Iterativehttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/kirruxKHaqk.mp4 Bunnieshttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/E6oGm_Z2aQk.mp4123456789101112131415161718192021222324# Define a procedure, fibonacci, that takes a natural number as its input, and# returns the value of that fibonacci number.# Two Base Cases:# fibonacci(0) =&gt; 0# fibonacci(1) =&gt; 1# Recursive Case:# n &gt; 1 : fibonacci(n) =&gt; fibonacci(n-1) + fibonacci(n-2)def fibonacci(n): if n&gt;1: return fibonacci(n-1) + fibonacci(n-2) else: if n==1: return 1 else: return 0print fibonacci(0)#&gt;&gt;&gt; 0print fibonacci(1)#&gt;&gt;&gt; 1print fibonacci(15)#&gt;&gt;&gt; 610 https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/S6wCTLG8BJg.mp4 Divide and Be Conqueredhttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/eBu1Z_FBwb4.mp4Note that this is the standard mathematical definition of the Fibonacci sequence, which is a bit different from the counting rabbits motivation in the original problem. The mathematical sequence starts with 0, which is more elegant mathematically, but wouldn’t make as much sense for rabbits multiplying. Counting Callshttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/Cai4WuKg4SM.mp4https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/bqF8QuYX8YA.mp4At 1:58 minutes onwards, the formula should be fibo(36 - (n - 1)) = fibo(36 - n + 1) and not fibo(36 - n - 1). Faster Fibonaccihttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/oJAHMzgSTyA.mp41234567891011#Define a faster fibonacci procedure that will enable us to computer#fibonacci(36).def fibonacci(n): current = 0 # fibonacci(0) at the bginning after = 1 # fibonacci(1) at the beginning for i in range(0, n): current, after = after, current + after return currentprint fibonacci(36)#&gt;&gt;&gt; 14930352 https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/7k7tMKxH6Dg.mp4 Ranking Web Pageshttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/k32gyEM5H3Y.mp4 Popularityhttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/EP55W6keH7E.mp4 Good Definitionshttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/FX8RlDKEEiU.mp4A note on the notation: friends(p) is a list of all friends of p.https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/HbLwTw6N-0s.mp4 Circular Definitionshttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/Rxp6JuoNqL0.mp4https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/YUwZCZVtLaU.mp4 Relaxationhttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/e7-gweWZ0io.mp4https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/kpXVV8aiZFU.mp4 Page Rankhttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/IKXvSKaI2Ko.mp4 Altavistahttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/T6AeBtfaLco.mp4AltaVista was finally shut down in July 2013. Here’s an interesting article from the Washington Post: AltaVista is dead. Here’s why it’s so hard to compete with Google. (mostly an interview with Gabriel Weinberg).https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/0ZlFPQ2qQo0.mp4 Urankhttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/H8vrZMAllIY.mp4 Implementing Urankhttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/B5lAVjLd76Q.mp4123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204# Modify the crawl_web procedure so that instead of just returning the # index, it returns an index and a graph. The graph should be a # Dictionary where the key:value entries are:# url: [list of pages url links to] def crawl_web(seed): # returns index, graph of outlinks tocrawl = [seed] crawled = [] graph = &#123;&#125; # &lt;url&gt;:[list of pages it links to] index = &#123;&#125; while tocrawl: page = tocrawl.pop() if page not in crawled: content = get_page(page) add_page_to_index(index, page, content) outlinks = get_all_links(content) #Insert Code Here graph[page]=outlinks union(tocrawl, outlinks) crawled.append(page) return index, graphcache = &#123; &apos;http://udacity.com/cs101x/urank/index.html&apos;: &quot;&quot;&quot;&lt;html&gt;&lt;body&gt;&lt;h1&gt;Dave&apos;s Cooking Algorithms&lt;/h1&gt;&lt;p&gt;Here are my favorite recipes:&lt;ul&gt;&lt;li&gt; &lt;a href=&quot;http://udacity.com/cs101x/urank/hummus.html&quot;&gt;Hummus Recipe&lt;/a&gt;&lt;li&gt; &lt;a href=&quot;http://udacity.com/cs101x/urank/arsenic.html&quot;&gt;World&apos;s Best Hummus&lt;/a&gt;&lt;li&gt; &lt;a href=&quot;http://udacity.com/cs101x/urank/kathleen.html&quot;&gt;Kathleen&apos;s Hummus Recipe&lt;/a&gt;&lt;/ul&gt;For more expert opinions, check out the &lt;a href=&quot;http://udacity.com/cs101x/urank/nickel.html&quot;&gt;Nickel Chef&lt;/a&gt; and &lt;a href=&quot;http://udacity.com/cs101x/urank/zinc.html&quot;&gt;Zinc Chef&lt;/a&gt;.&lt;/body&gt;&lt;/html&gt;&quot;&quot;&quot;, &apos;http://udacity.com/cs101x/urank/zinc.html&apos;: &quot;&quot;&quot;&lt;html&gt;&lt;body&gt;&lt;h1&gt;The Zinc Chef&lt;/h1&gt;&lt;p&gt;I learned everything I know from &lt;a href=&quot;http://udacity.com/cs101x/urank/nickel.html&quot;&gt;the Nickel Chef&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;For great hummus, try &lt;a href=&quot;http://udacity.com/cs101x/urank/arsenic.html&quot;&gt;this recipe&lt;/a&gt;.&lt;/body&gt;&lt;/html&gt;&quot;&quot;&quot;, &apos;http://udacity.com/cs101x/urank/nickel.html&apos;: &quot;&quot;&quot;&lt;html&gt;&lt;body&gt;&lt;h1&gt;The Nickel Chef&lt;/h1&gt;&lt;p&gt;This is the&lt;a href=&quot;http://udacity.com/cs101x/urank/kathleen.html&quot;&gt;best Hummus recipe!&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;&quot;&quot;&quot;, &apos;http://udacity.com/cs101x/urank/kathleen.html&apos;: &quot;&quot;&quot;&lt;html&gt;&lt;body&gt;&lt;h1&gt;Kathleen&apos;s Hummus Recipe&lt;/h1&gt;&lt;p&gt;&lt;ol&gt;&lt;li&gt; Open a can of garbanzo beans.&lt;li&gt; Crush them in a blender.&lt;li&gt; Add 3 tablespoons of tahini sauce.&lt;li&gt; Squeeze in one lemon.&lt;li&gt; Add salt, pepper, and buttercream frosting to taste.&lt;/ol&gt;&lt;/body&gt;&lt;/html&gt;&quot;&quot;&quot;, &apos;http://udacity.com/cs101x/urank/arsenic.html&apos;: &quot;&quot;&quot;&lt;html&gt;&lt;body&gt;&lt;h1&gt;The Arsenic Chef&apos;s World Famous Hummus Recipe&lt;/h1&gt;&lt;p&gt;&lt;ol&gt;&lt;li&gt; Kidnap the &lt;a href=&quot;http://udacity.com/cs101x/urank/nickel.html&quot;&gt;Nickel Chef&lt;/a&gt;.&lt;li&gt; Force her to make hummus for you.&lt;/ol&gt;&lt;/body&gt;&lt;/html&gt;&quot;&quot;&quot;, &apos;http://udacity.com/cs101x/urank/hummus.html&apos;: &quot;&quot;&quot;&lt;html&gt;&lt;body&gt;&lt;h1&gt;Hummus Recipe&lt;/h1&gt;&lt;p&gt;&lt;ol&gt;&lt;li&gt; Go to the store and buy a container of hummus.&lt;li&gt; Open it.&lt;/ol&gt;&lt;/body&gt;&lt;/html&gt;&quot;&quot;&quot;, &#125;def get_page(url): if url in cache: return cache[url] else: return None def get_next_target(page): start_link = page.find(&apos;&lt;a href=&apos;) if start_link == -1: return None, 0 start_quote = page.find(&apos;&quot;&apos;, start_link) end_quote = page.find(&apos;&quot;&apos;, start_quote + 1) url = page[start_quote + 1:end_quote] return url, end_quotedef get_all_links(page): links = [] while True: url, endpos = get_next_target(page) if url: links.append(url) page = page[endpos:] else: break return linksdef union(a, b): for e in b: if e not in a: a.append(e)def add_page_to_index(index, url, content): words = content.split() for word in words: add_to_index(index, word, url) def add_to_index(index, keyword, url): if keyword in index: index[keyword].append(url) else: index[keyword] = [url]def lookup(index, keyword): if keyword in index: return index[keyword] else: return Noneindex , graph = crawl_web(&apos;http://udacity.com/cs101x/urank/index.html&apos;) if &apos;http://udacity.com/cs101x/urank/index.html&apos; in graph: print graph[&apos;http://udacity.com/cs101x/urank/index.html&apos;]#&gt;&gt;&gt; [&apos;http://udacity.com/cs101x/urank/hummus.html&apos;,#&apos;http://udacity.com/cs101x/urank/arsenic.html&apos;,#&apos;http://udacity.com/cs101x/urank/kathleen.html&apos;,#&apos;http://udacity.com/cs101x/urank/nickel.html&apos;,#&apos;http://udacity.com/cs101x/urank/zinc.html&apos;] https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/sR8EJLpWwb4.mp4 Computing Page Rankhttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/_ctzQdS3EfA.mp4 Formal Calculationshttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/YZ3kRWKL0DI.mp4 Computer Rankshttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/sPaVbELrmh0.mp4 Finishing Urankhttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/GovJzUltdL8.mp4rank(page, time) is defined as: ∑​p∈inlinks​​​outlinks​​d⋅rank(t−1,p)​​ or: rank(page, 0) = 1/npages rank(page, t) = (1-d)/npages + sum (d * rank(p, t - 1) / number of outlinks from p) over all pages p that link to this page Thanks to Henry for suggesting to add this.The URLs have changed around a bit! Here’s a new index page you can start with to test out your search engine: https://www.udacity.com/cs101x/urank/index.html 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225#Finishing the page ranking algorithm.def compute_ranks(graph): d = 0.8 # damping factor numloops = 10 ranks = &#123;&#125; npages = len(graph) for page in graph: ranks[page] = 1.0 / npages for i in range(0, numloops): newranks = &#123;&#125; for page in graph: newrank = (1 - d) / npages #Insert Code Here for p in graph: if page in graph[p]: newrank = newrank + d * ranks[p] / len(graph[p]) newranks[page] = newrank ranks = newranks return rankscache = &#123; &apos;http://udacity.com/cs101x/urank/index.html&apos;: &quot;&quot;&quot;&lt;html&gt;&lt;body&gt;&lt;h1&gt;Dave&apos;s Cooking Algorithms&lt;/h1&gt;&lt;p&gt;Here are my favorite recipies:&lt;ul&gt;&lt;li&gt; &lt;a href=&quot;http://udacity.com/cs101x/urank/hummus.html&quot;&gt;Hummus Recipe&lt;/a&gt;&lt;li&gt; &lt;a href=&quot;http://udacity.com/cs101x/urank/arsenic.html&quot;&gt;World&apos;s Best Hummus&lt;/a&gt;&lt;li&gt; &lt;a href=&quot;http://udacity.com/cs101x/urank/kathleen.html&quot;&gt;Kathleen&apos;s Hummus Recipe&lt;/a&gt;&lt;/ul&gt;For more expert opinions, check out the &lt;a href=&quot;http://udacity.com/cs101x/urank/nickel.html&quot;&gt;Nickel Chef&lt;/a&gt; and &lt;a href=&quot;http://udacity.com/cs101x/urank/zinc.html&quot;&gt;Zinc Chef&lt;/a&gt;.&lt;/body&gt;&lt;/html&gt;&quot;&quot;&quot;, &apos;http://udacity.com/cs101x/urank/zinc.html&apos;: &quot;&quot;&quot;&lt;html&gt;&lt;body&gt;&lt;h1&gt;The Zinc Chef&lt;/h1&gt;&lt;p&gt;I learned everything I know from &lt;a href=&quot;http://udacity.com/cs101x/urank/nickel.html&quot;&gt;the Nickel Chef&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;For great hummus, try &lt;a href=&quot;http://udacity.com/cs101x/urank/arsenic.html&quot;&gt;this recipe&lt;/a&gt;.&lt;/body&gt;&lt;/html&gt;&quot;&quot;&quot;, &apos;http://udacity.com/cs101x/urank/nickel.html&apos;: &quot;&quot;&quot;&lt;html&gt;&lt;body&gt;&lt;h1&gt;The Nickel Chef&lt;/h1&gt;&lt;p&gt;This is the&lt;a href=&quot;http://udacity.com/cs101x/urank/kathleen.html&quot;&gt;best Hummus recipe!&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;&quot;&quot;&quot;, &apos;http://udacity.com/cs101x/urank/kathleen.html&apos;: &quot;&quot;&quot;&lt;html&gt;&lt;body&gt;&lt;h1&gt;Kathleen&apos;s Hummus Recipe&lt;/h1&gt;&lt;p&gt;&lt;ol&gt;&lt;li&gt; Open a can of garbonzo beans.&lt;li&gt; Crush them in a blender.&lt;li&gt; Add 3 tablesppons of tahini sauce.&lt;li&gt; Squeeze in one lemon.&lt;li&gt; Add salt, pepper, and buttercream frosting to taste.&lt;/ol&gt;&lt;/body&gt;&lt;/html&gt;&quot;&quot;&quot;, &apos;http://udacity.com/cs101x/urank/arsenic.html&apos;: &quot;&quot;&quot;&lt;html&gt;&lt;body&gt;&lt;h1&gt;The Arsenic Chef&apos;s World Famous Hummus Recipe&lt;/h1&gt;&lt;p&gt;&lt;ol&gt;&lt;li&gt; Kidnap the &lt;a href=&quot;http://udacity.com/cs101x/urank/nickel.html&quot;&gt;Nickel Chef&lt;/a&gt;.&lt;li&gt; Force her to make hummus for you.&lt;/ol&gt;&lt;/body&gt;&lt;/html&gt;&quot;&quot;&quot;, &apos;http://udacity.com/cs101x/urank/hummus.html&apos;: &quot;&quot;&quot;&lt;html&gt;&lt;body&gt;&lt;h1&gt;Hummus Recipe&lt;/h1&gt;&lt;p&gt;&lt;ol&gt;&lt;li&gt; Go to the store and buy a container of hummus.&lt;li&gt; Open it.&lt;/ol&gt;&lt;/body&gt;&lt;/html&gt;&quot;&quot;&quot;, &#125;def crawl_web(seed): # returns index, graph of inlinks tocrawl = [seed] crawled = [] graph = &#123;&#125; # &lt;url&gt;, [list of pages it links to] index = &#123;&#125; while tocrawl: page = tocrawl.pop() if page not in crawled: content = get_page(page) add_page_to_index(index, page, content) outlinks = get_all_links(content) graph[page] = outlinks union(tocrawl, outlinks) crawled.append(page) return index, graphdef get_page(url): if url in cache: return cache[url] else: return None def get_next_target(page): start_link = page.find(&apos;&lt;a href=&apos;) if start_link == -1: return None, 0 start_quote = page.find(&apos;&quot;&apos;, start_link) end_quote = page.find(&apos;&quot;&apos;, start_quote + 1) url = page[start_quote + 1:end_quote] return url, end_quotedef get_all_links(page): links = [] while True: url, endpos = get_next_target(page) if url: links.append(url) page = page[endpos:] else: break return linksdef union(a, b): for e in b: if e not in a: a.append(e)def add_page_to_index(index, url, content): words = content.split() for word in words: add_to_index(index, word, url) def add_to_index(index, keyword, url): if keyword in index: index[keyword].append(url) else: index[keyword] = [url]def lookup(index, keyword): if keyword in index: return index[keyword] else: return Noneindex, graph = crawl_web(&apos;http://udacity.com/cs101x/urank/index.html&apos;)#print graphranks = compute_ranks(graph)print ranks#&gt;&gt;&gt; &#123;&apos;http://udacity.com/cs101x/urank/kathleen.html&apos;: 0.11661866666666663,#&apos;http://udacity.com/cs101x/urank/zinc.html&apos;: 0.038666666666666655,#&apos;http://udacity.com/cs101x/urank/hummus.html&apos;: 0.038666666666666655,#&apos;http://udacity.com/cs101x/urank/arsenic.html&apos;: 0.054133333333333325,#&apos;http://udacity.com/cs101x/urank/index.html&apos;: 0.033333333333333326,#&apos;http://udacity.com/cs101x/urank/nickel.html&apos;: 0.09743999999999997&#125; https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/k861qM5OqvU.mp4 Search Enginehttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/7IlDnp39b0U.mp4 Problem SetRecursive Grammarshttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/Ej9obZ0QECY.mp4 Rabbits Multiplying123456789101112131415161718192021222324252627282930313233343536373839404142# Rabbits Multiplying# A (slightly) more realistic model of rabbit multiplication than the Fibonacci# model, would assume that rabbits eventually die. For this question, some# rabbits die from month 6 onwards.## Thus, we can model the number of rabbits as:## rabbits(1) = 1 # There is one pair of immature rabbits in Month 1# rabbits(2) = 1 # There is one pair of mature rabbits in Month 2## For months 3-5:# Same as Fibonacci model, no rabbits dying yet# rabbits(n) = rabbits(n - 1) + rabbits(n - 2)### For months &gt; 5:# All the rabbits that are over 5 months old die along with a few others# so that the number that die is equal to the number alive 5 months ago.# Before dying, the bunnies reproduce.# rabbits(n) = rabbits(n - 1) + rabbits(n - 2) - rabbits(n - 5)## This produces the rabbit sequence: 1, 1, 2, 3, 5, 7, 11, 16, 24, 35, 52, ...## Define a procedure rabbits that takes as input a number n, and returns a# number that is the value of the nth number in the rabbit sequence.# For example, rabbits(10) -&gt; 35. (It is okay if your procedure takes too# long to run on inputs above 30.)def rabbits(n):#print rabbits(10)#&gt;&gt;&gt; 35#s = &quot;&quot;#for i in range(1,12):# s = s + str(rabbits(i)) + &quot; &quot;#print s#&gt;&gt;&gt; 1 1 2 3 5 7 11 16 24 35 52 https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/pcGGCOPPtmE.mp4 Spreading Udaciousness12345678910111213141516171819202122232425262728293031323334353637383940414243# Spreading Udaciousness # One of our modest goals is to teach everyone in the world to program and# understand computer science. To estimate how long this will take we have# developed a (very flawed!) model:# Everyone answering this question will convince a number, spread, (input to # the model) of their friends to take the course next offering. This will # continue, so that all of the newly recruited students, as well as the original# students, will convince spread of their# friends to take the following offering of the course.# recruited friends are unique, so there is no duplication among the newly# recruited students. Define a procedure, hexes_to_udaciousness(n, spread,# target), that takes three inputs: the starting number of Udacians, the spread# rate (how many new friends each Udacian convinces to join each hexamester),# and the target number, and outputs the number of hexamesters needed to reach # (or exceed) the target.# For credit, your procedure must not use: while, for, or import math. def hexes_to_udaciousness(n, spread, target):# 0 more needed, since n already exceeds target#print hexes_to_udaciousness(100000, 2, 36230) #&gt;&gt;&gt; 0# after 1 hexamester, there will be 50000 + (50000 * 2) Udacians#print hexes_to_udaciousness(50000, 2, 150000) #&gt;&gt;&gt; 1 # need to match or exceed the target#print hexes_to_udaciousness(50000, 2, 150001)#&gt;&gt;&gt; 2 # only 12 hexamesters (2 years) to world domination!#print hexes_to_udaciousness(20000, 2, 7 * 10 ** 9) #&gt;&gt;&gt; 12 # more friends means faster world domination!#print hexes_to_udaciousness(15000, 3, 7 * 10 ** 9)#&gt;&gt;&gt; 10 https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/q_atgGWy57Y.mp4 Deep Count1234567891011121314151617181920212223242526272829303132333435363738# Deep Count # The built-in len operator outputs the number of top-level elements in a List,# but not the total number of elements. For this question, your goal is to count# the total number of elements in a list, including all of the inner lists.# Define a procedure, deep_count, that takes as input a list, and outputs the# total number of elements in the list, including all elements in lists that it# contains.# For this procedure, you will need a way to test if a value is a list. We have# provided a procedure, is_list(p) that does this:def is_list(p): return isinstance(p, list)# It is not necessary to understand how is_list works. It returns True if the# input is a List, and returns False otherwise.def deep_count(p):#print deep_count([1, 2, 3])#&gt;&gt;&gt; 3# The empty list still counts as an element of the outer list#print deep_count([1, [], 3]) #&gt;&gt;&gt; 3 #print deep_count([1, [1, 2, [3, 4]]])#&gt;&gt;&gt; 7#print deep_count([[[[[[[[1, 2, 3]]]]]]]])#&gt;&gt;&gt; 10 Feeling Lucky123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231#Feeling Lucky #In Unit 6, we implemented a page ranking algorithm, but didn&apos;t finish the final#step of using it to improve our search results. For this question, you will use#the page rankings to produce the best output for a given query.#Define a procedure, lucky_search, that takes as input an index, a ranks#dictionary (the result of compute_ranks), and a keyword, and returns the one#URL most likely to be the best site for that keyword. If the keyword does not#appear in the index, lucky_search should return None.def lucky_search(index, ranks, keyword): cache = &#123; &apos;http://udacity.com/cs101x/urank/index.html&apos;: &quot;&quot;&quot;&lt;html&gt;&lt;body&gt;&lt;h1&gt;Dave&apos;s Cooking Algorithms&lt;/h1&gt;&lt;p&gt;Here are my favorite recipies:&lt;ul&gt;&lt;li&gt; &lt;a href=&quot;http://udacity.com/cs101x/urank/hummus.html&quot;&gt;Hummus Recipe&lt;/a&gt;&lt;li&gt; &lt;a href=&quot;http://udacity.com/cs101x/urank/arsenic.html&quot;&gt;World&apos;s Best Hummus&lt;/a&gt;&lt;li&gt; &lt;a href=&quot;http://udacity.com/cs101x/urank/kathleen.html&quot;&gt;Kathleen&apos;s Hummus Recipe&lt;/a&gt;&lt;/ul&gt;For more expert opinions, check out the &lt;a href=&quot;http://udacity.com/cs101x/urank/nickel.html&quot;&gt;Nickel Chef&lt;/a&gt; and &lt;a href=&quot;http://udacity.com/cs101x/urank/zinc.html&quot;&gt;Zinc Chef&lt;/a&gt;.&lt;/body&gt;&lt;/html&gt;&quot;&quot;&quot;, &apos;http://udacity.com/cs101x/urank/zinc.html&apos;: &quot;&quot;&quot;&lt;html&gt;&lt;body&gt;&lt;h1&gt;The Zinc Chef&lt;/h1&gt;&lt;p&gt;I learned everything I know from &lt;a href=&quot;http://udacity.com/cs101x/urank/nickel.html&quot;&gt;the Nickel Chef&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;For great hummus, try &lt;a href=&quot;http://udacity.com/cs101x/urank/arsenic.html&quot;&gt;this recipe&lt;/a&gt;.&lt;/body&gt;&lt;/html&gt;&quot;&quot;&quot;, &apos;http://udacity.com/cs101x/urank/nickel.html&apos;: &quot;&quot;&quot;&lt;html&gt;&lt;body&gt;&lt;h1&gt;The Nickel Chef&lt;/h1&gt;&lt;p&gt;This is the&lt;a href=&quot;http://udacity.com/cs101x/urank/kathleen.html&quot;&gt;best Hummus recipe!&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;&quot;&quot;&quot;, &apos;http://udacity.com/cs101x/urank/kathleen.html&apos;: &quot;&quot;&quot;&lt;html&gt;&lt;body&gt;&lt;h1&gt;Kathleen&apos;s Hummus Recipe&lt;/h1&gt;&lt;p&gt;&lt;ol&gt;&lt;li&gt; Open a can of garbonzo beans.&lt;li&gt; Crush them in a blender.&lt;li&gt; Add 3 tablesppons of tahini sauce.&lt;li&gt; Squeeze in one lemon.&lt;li&gt; Add salt, pepper, and buttercream frosting to taste.&lt;/ol&gt;&lt;/body&gt;&lt;/html&gt;&quot;&quot;&quot;, &apos;http://udacity.com/cs101x/urank/arsenic.html&apos;: &quot;&quot;&quot;&lt;html&gt;&lt;body&gt;&lt;h1&gt;The Arsenic Chef&apos;s World Famous Hummus Recipe&lt;/h1&gt;&lt;p&gt;&lt;ol&gt;&lt;li&gt; Kidnap the &lt;a href=&quot;http://udacity.com/cs101x/urank/nickel.html&quot;&gt;Nickel Chef&lt;/a&gt;.&lt;li&gt; Force her to make hummus for you.&lt;/ol&gt;&lt;/body&gt;&lt;/html&gt;&quot;&quot;&quot;, &apos;http://udacity.com/cs101x/urank/hummus.html&apos;: &quot;&quot;&quot;&lt;html&gt;&lt;body&gt;&lt;h1&gt;Hummus Recipe&lt;/h1&gt;&lt;p&gt;&lt;ol&gt;&lt;li&gt; Go to the store and buy a container of hummus.&lt;li&gt; Open it.&lt;/ol&gt;&lt;/body&gt;&lt;/html&gt;&quot;&quot;&quot;,&#125;def get_page(url): if url in cache: return cache[url] return &quot;&quot;def get_next_target(page): start_link = page.find(&apos;&lt;a href=&apos;) if start_link == -1: return None, 0 start_quote = page.find(&apos;&quot;&apos;, start_link) end_quote = page.find(&apos;&quot;&apos;, start_quote + 1) url = page[start_quote + 1:end_quote] return url, end_quotedef get_all_links(page): links = [] while True: url, endpos = get_next_target(page) if url: links.append(url) page = page[endpos:] else: break return linksdef union(a, b): for e in b: if e not in a: a.append(e)def add_page_to_index(index, url, content): words = content.split() for word in words: add_to_index(index, word, url) def add_to_index(index, keyword, url): if keyword in index: index[keyword].append(url) else: index[keyword] = [url] def lookup(index, keyword): if keyword in index: return index[keyword] else: return Nonedef crawl_web(seed): # returns index, graph of inlinks tocrawl = [seed] crawled = [] graph = &#123;&#125; # &lt;url&gt;, [list of pages it links to] index = &#123;&#125; while tocrawl: page = tocrawl.pop() if page not in crawled: content = get_page(page) add_page_to_index(index, page, content) outlinks = get_all_links(content) graph[page] = outlinks union(tocrawl, outlinks) crawled.append(page) return index, graphdef compute_ranks(graph): d = 0.8 # damping factor numloops = 10 ranks = &#123;&#125; npages = len(graph) for page in graph: ranks[page] = 1.0 / npages for i in range(0, numloops): newranks = &#123;&#125; for page in graph: newrank = (1 - d) / npages for node in graph: if page in graph[node]: newrank = newrank + d * (ranks[node] / len(graph[node])) newranks[page] = newrank ranks = newranks return ranks#Here&apos;s an example of how your procedure should work on the test site: #index, graph = crawl_web(&apos;http://udacity.com/cs101x/urank/index.html&apos;)#ranks = compute_ranks(graph)#print lucky_search(index, ranks, &apos;Hummus&apos;)#&gt;&gt;&gt; http://udacity.com/cs101x/urank/kathleen.html#print lucky_search(index, ranks, &apos;the&apos;)#&gt;&gt;&gt; http://udacity.com/cs101x/urank/nickel.html#print lucky_search(index, ranks, &apos;babaganoush&apos;)#&gt;&gt;&gt; None https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/6qVB4lZmzMc.mp4123456789def lucky_search(index, ranks, keyword): pages=lookup(index,keyword) if not pages: return None best_page=pages[0] for candidate in pages: if ranks[candidate]&gt;ranks[best_page]: best_page=candidate return best_page Problem Set 6 StarredFamily Trees123456789101112131415161718192021222324252627282930313233343536373839404142434445# Single Gold Star# Family Trees# In the lecture, we showed a recursive definition for your ancestors. For this# question, your goal is to define a procedure that finds someone&apos;s ancestors,# given a Dictionary that provides the parent relationships.# Here&apos;s an example of an input Dictionary:ada_family = &#123; &apos;Judith Blunt-Lytton&apos;: [&apos;Anne Isabella Blunt&apos;, &apos;Wilfrid Scawen Blunt&apos;], &apos;Ada King-Milbanke&apos;: [&apos;Ralph King-Milbanke&apos;, &apos;Fanny Heriot&apos;], &apos;Ralph King-Milbanke&apos;: [&apos;Augusta Ada King&apos;, &apos;William King-Noel&apos;], &apos;Anne Isabella Blunt&apos;: [&apos;Augusta Ada King&apos;, &apos;William King-Noel&apos;], &apos;Byron King-Noel&apos;: [&apos;Augusta Ada King&apos;, &apos;William King-Noel&apos;], &apos;Augusta Ada King&apos;: [&apos;Anne Isabella Milbanke&apos;, &apos;George Gordon Byron&apos;], &apos;George Gordon Byron&apos;: [&apos;Catherine Gordon&apos;, &apos;Captain John Byron&apos;], &apos;John Byron&apos;: [&apos;Vice-Admiral John Byron&apos;, &apos;Sophia Trevannion&apos;] &#125;# Define a procedure, ancestors(genealogy, person), that takes as its first input# a Dictionary in the form given above, and as its second input the name of a# person. It should return a list giving all the known ancestors of the input# person (this should be the empty list if there are none). The order of the list# does not matter and duplicates will be ignored.def ancestors(genealogy, person):# Here are some examples:#print ancestors(ada_family, &apos;Augusta Ada King&apos;)#&gt;&gt;&gt; [&apos;Anne Isabella Milbanke&apos;, &apos;George Gordon Byron&apos;,# &apos;Catherine Gordon&apos;,&apos;Captain John Byron&apos;]#print ancestors(ada_family, &apos;Judith Blunt-Lytton&apos;)#&gt;&gt;&gt; [&apos;Anne Isabella Blunt&apos;, &apos;Wilfrid Scawen Blunt&apos;, &apos;Augusta Ada King&apos;,# &apos;William King-Noel&apos;, &apos;Anne Isabella Milbanke&apos;, &apos;George Gordon Byron&apos;,# &apos;Catherine Gordon&apos;, &apos;Captain John Byron&apos;]#print ancestors(ada_family, &apos;Dave&apos;)#&gt;&gt;&gt; [] https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/SQ6508of_ZA.mp4 Khayyam Triangle12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849# Double Gold Star# Khayyam Triangle# The French mathematician, Blaise Pascal, who built a mechanical computer in# the 17th century, studied a pattern of numbers now commonly known in parts of# the world as Pascal&apos;s Triangle (it was also previously studied by many Indian,# Chinese, and Persian mathematicians, and is known by different names in other# parts of the world).# The pattern is shown below:# 1# 1 1# 1 2 1# 1 3 3 1# 1 4 6 4 1# ...# Each number is the sum of the number above it to the left and the number above# it to the right (any missing numbers are counted as 0).# Define a procedure, triangle(n), that takes a number n as its input, and# returns a list of the first n rows in the triangle. Each element of the# returned list should be a list of the numbers at the corresponding row in the# triangle.def triangle(n):#For example:#print triangle(0)#&gt;&gt;&gt; []#print triangle(1)#&gt;&gt;&gt; [[1]]#print triangle(2)#&gt;&gt; [[1], [1, 1]]#print triangle(3)#&gt;&gt;&gt; [[1], [1, 1], [1, 2, 1]]#print triangle(6)#&gt;&gt;&gt; [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1], [1, 5, 10, 10, 5, 1]] https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/i8X3KHanfXE.mp412345678910111213141516def make_next_row(row): prev=0 result=[] for i in row: result.append(i+prev) prev=i result.append(prev) return resultdef triangle(n): current=[1] result=[] for unuse in range(0,n): result.append(current) current=make_next_row(current) return result Only a Little Lucky123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269# Triple Gold Star# Only A Little Lucky# The Feeling Lucky question (from the regular homework) assumed it was enough# to find the best-ranked page for a given query. For most queries, though, we# don&apos;t just want the best page (according to the page ranking algorithm), we# want a list of many pages that match the query, ordered from the most likely# to be useful to the least likely.# Your goal for this question is to define a procedure, ordered_search(index,# ranks, keyword), that takes the same inputs as lucky_search from Question 5,# but returns an ordered list of all the URLs that match the query.# To order the pages, use the quicksort algorithm, invented by Sir Tony Hoare in# 1959. Quicksort provides a way to sort any list of data, using an expected# number of comparisons that scales as n log n where n is the number of elements# in the list.# The idea of quicksort is quite simple:# If the list has zero or one elements, it is already sorted.# Otherwise, pick a pivot element, and split the list into two partitions: one# contains all the elements equal to or lower than the value of the pivot# element, and the other contains all the elements that are greater than the# pivot element. Recursively sort each of the sub-lists, and then return the# result of concatenating the sorted left sub-list, the pivot element, and the# sorted right sub-list.# For simplicity, use the first element in the list as your pivot element (this# is not usually a good choice, since it means if the input list is already# nearly sorted, the actual work will be much worse than expected).def ordered_search(index, ranks, keyword):cache = &#123; &apos;http://udacity.com/cs101x/urank/index.html&apos;: &quot;&quot;&quot;&lt;html&gt;&lt;body&gt;&lt;h1&gt;Dave&apos;s Cooking Algorithms&lt;/h1&gt;&lt;p&gt;Here are my favorite recipies:&lt;ul&gt;&lt;li&gt; &lt;a href=&quot;http://udacity.com/cs101x/urank/hummus.html&quot;&gt;Hummus Recipe&lt;/a&gt;&lt;li&gt; &lt;a href=&quot;http://udacity.com/cs101x/urank/arsenic.html&quot;&gt;World&apos;s Best Hummus&lt;/a&gt;&lt;li&gt; &lt;a href=&quot;http://udacity.com/cs101x/urank/kathleen.html&quot;&gt;Kathleen&apos;s Hummus Recipe&lt;/a&gt;&lt;/ul&gt;For more expert opinions, check out the&lt;a href=&quot;http://udacity.com/cs101x/urank/nickel.html&quot;&gt;Nickel Chef&lt;/a&gt;and &lt;a href=&quot;http://udacity.com/cs101x/urank/zinc.html&quot;&gt;Zinc Chef&lt;/a&gt;.&lt;/body&gt;&lt;/html&gt;&quot;&quot;&quot;, &apos;http://udacity.com/cs101x/urank/zinc.html&apos;: &quot;&quot;&quot;&lt;html&gt;&lt;body&gt;&lt;h1&gt;The Zinc Chef&lt;/h1&gt;&lt;p&gt;I learned everything I know from&lt;a href=&quot;http://udacity.com/cs101x/urank/nickel.html&quot;&gt;the Nickel Chef&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;For great hummus, try&lt;a href=&quot;http://udacity.com/cs101x/urank/arsenic.html&quot;&gt;this recipe&lt;/a&gt;.&lt;/body&gt;&lt;/html&gt;&quot;&quot;&quot;, &apos;http://udacity.com/cs101x/urank/nickel.html&apos;: &quot;&quot;&quot;&lt;html&gt;&lt;body&gt;&lt;h1&gt;The Nickel Chef&lt;/h1&gt;&lt;p&gt;This is the&lt;a href=&quot;http://udacity.com/cs101x/urank/kathleen.html&quot;&gt;best Hummus recipe!&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;&quot;&quot;&quot;, &apos;http://udacity.com/cs101x/urank/kathleen.html&apos;: &quot;&quot;&quot;&lt;html&gt;&lt;body&gt;&lt;h1&gt;Kathleen&apos;s Hummus Recipe&lt;/h1&gt;&lt;p&gt;&lt;ol&gt;&lt;li&gt; Open a can of garbonzo beans.&lt;li&gt; Crush them in a blender.&lt;li&gt; Add 3 tablesppons of tahini sauce.&lt;li&gt; Squeeze in one lemon.&lt;li&gt; Add salt, pepper, and buttercream frosting to taste.&lt;/ol&gt;&lt;/body&gt;&lt;/html&gt;&quot;&quot;&quot;, &apos;http://udacity.com/cs101x/urank/arsenic.html&apos;: &quot;&quot;&quot;&lt;html&gt;&lt;body&gt;&lt;h1&gt;The Arsenic Chef&apos;s World Famous Hummus Recipe&lt;/h1&gt;&lt;p&gt;&lt;ol&gt;&lt;li&gt; Kidnap the &lt;a href=&quot;http://udacity.com/cs101x/urank/nickel.html&quot;&gt;Nickel Chef&lt;/a&gt;.&lt;li&gt; Force her to make hummus for you.&lt;/ol&gt;&lt;/body&gt;&lt;/html&gt;&quot;&quot;&quot;, &apos;http://udacity.com/cs101x/urank/hummus.html&apos;: &quot;&quot;&quot;&lt;html&gt;&lt;body&gt;&lt;h1&gt;Hummus Recipe&lt;/h1&gt;&lt;p&gt;&lt;ol&gt;&lt;li&gt; Go to the store and buy a container of hummus.&lt;li&gt; Open it.&lt;/ol&gt;&lt;/body&gt;&lt;/html&gt;&quot;&quot;&quot;,&#125;def get_page(url): if url in cache: return cache[url] return &quot;&quot;def get_next_target(page): start_link = page.find(&apos;&lt;a href=&apos;) if start_link == -1: return None, 0 start_quote = page.find(&apos;&quot;&apos;, start_link) end_quote = page.find(&apos;&quot;&apos;, start_quote + 1) url = page[start_quote + 1:end_quote] return url, end_quotedef get_all_links(page): links = [] while True: url, endpos = get_next_target(page) if url: links.append(url) page = page[endpos:] else: break return linksdef union(a, b): for e in b: if e not in a: a.append(e)def add_page_to_index(index, url, content): words = content.split() for word in words: add_to_index(index, word, url)def add_to_index(index, keyword, url): if keyword in index: index[keyword].append(url) else: index[keyword] = [url]def lookup(index, keyword): if keyword in index: return index[keyword] else: return Nonedef crawl_web(seed): # returns index, graph of inlinks tocrawl = [seed] crawled = [] graph = &#123;&#125; # &lt;url&gt;, [list of pages it links to] index = &#123;&#125; while tocrawl: page = tocrawl.pop() if page not in crawled: content = get_page(page) add_page_to_index(index, page, content) outlinks = get_all_links(content) graph[page] = outlinks union(tocrawl, outlinks) crawled.append(page) return index, graphdef compute_ranks(graph): d = 0.8 # damping factor numloops = 10 ranks = &#123;&#125; npages = len(graph) for page in graph: ranks[page] = 1.0 / npages for i in range(0, numloops): newranks = &#123;&#125; for page in graph: newrank = (1 - d) / npages for node in graph: if page in graph[node]: newrank = newrank + d * (ranks[node] / len(graph[node])) newranks[page] = newrank ranks = newranks return ranks# Here are some example showing what ordered_search should do:# Observe that the result list is sorted so the highest-ranking site is at the# beginning of the list.# Note: the intent of this question is for students to write their own sorting# code, not to use the built-in sort procedure.index, graph = crawl_web(&apos;http://udacity.com/cs101x/urank/index.html&apos;)ranks = compute_ranks(graph)#print ordered_search(index, ranks, &apos;Hummus&apos;)#&gt;&gt;&gt; [&apos;http://udacity.com/cs101x/urank/kathleen.html&apos;,# &apos;http://udacity.com/cs101x/urank/nickel.html&apos;,# &apos;http://udacity.com/cs101x/urank/arsenic.html&apos;,# &apos;http://udacity.com/cs101x/urank/hummus.html&apos;,# &apos;http://udacity.com/cs101x/urank/index.html&apos;]#print ordered_search(index, ranks, &apos;the&apos;)#&gt;&gt;&gt; [&apos;http://udacity.com/cs101x/urank/nickel.html&apos;,# &apos;http://udacity.com/cs101x/urank/arsenic.html&apos;,# &apos;http://udacity.com/cs101x/urank/hummus.html&apos;,# &apos;http://udacity.com/cs101x/urank/index.html&apos;]#print ordered_search(index, ranks, &apos;babaganoush&apos;)#&gt;&gt;&gt; None The provided solution isn’t complete - it doesn’t actually include the ordered_search code, but only the code for sorting the pages. Atlas7-115196 provided a more complete solution to this problem! See the forum post: http://forums.udacity.com/questions/100371211/corrected-udacity-solution#cs101 1234567891011121314151617def quicksort_urls(ranks,urls): if not urls or len(urls)&lt;=1: return urls else: pivot=ranks[urls[0]] before=[] after=[] for url in urls[1:]: if ranks[url]&gt;=pivot: before.append(url) else: after.append(url) return quicksort_urls(ranks,before)+[urls[0]]+quicksort_urls(ranks,after)def ordered_search(index, ranks, keyword): urls=lookup(index, keyword) return quicksort_urls(ranks,urls) https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/lI9O8wUEDFc.mp4 Q&amp;APythonichttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/2g6qtjwKkA0.mp4Correction - Peter Norvig teaches class CS212. Python Versionshttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/owH7bqKiR-g.mp4 Using Recursionhttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/VWyHjEh0tfA.mp4 Recursion in Other Languageshttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/siNYLJ1YaAc.mp4 Pagerankhttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/rN-5K_q4JDc.mp4 Challenges in Searchhttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/ulkWpQl6izE.mp4 International Charactershttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/9QbeX7LOl0g.mp4 Past, Present, and Future of ComputerPast, Present, and Futurehttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/4TChbk9pnxQ.mp4 Themeshttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/-6OLwm10pqs.mp4 Overviewhttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/-atl1N1mvu0.mp4 Computer Sciencehttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/YBJk5Z5bAEA.mp4 Computer Sciencehttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/DIbtX0GqIA8.mp4 Past of Computinghttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/vvIj_PWFoyY.mp4 Computer History Museumhttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/ClTnWszPp3Q.mp4 Babbage Enginehttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/5nYcND7WjCY.mp4 First Hard Drivehttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/oSCCFDZLRgY.mp4 Search Before Computershttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/F2DTZoa-zPo.mp4 Search on the Webhttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/mgR9sInLwfc.mp4 Present of Computinghttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/9fxDFZGwUiA.mp4 Slac and Big Datahttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/4_0sCB_csRI.mp4 Mozillahttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/_IfqKBbEqck.mp4 Open Sourcehttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/TUBAD93kCfA.mp4 Getting Involvedhttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/56KQGpGOwLM.mp4 Having an Impacthttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/lL36LxpsXBI.mp4 Benetechhttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/FqQFwXOJTeU.mp4 Future of Computinghttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/EsTiQxNDQfo.mp4 Text Analysishttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/679-n8LWaVo.mp4 Energy Aware Computinghttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/wLyAANVyJQM.mp4 Computer Securityhttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/H87Yxc4p-C8.mp4 Theory of Computationhttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/W7nD3AMJDAI.mp4 Quantum Computinghttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/XafsCK3yk4U.mp4 Stay Udacioushttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/oDxqlHY6V1w.mp4 Cumulative Practice ProblemsPick One12345678910111213141516171819202122232425# Question 1: Pick One# Define a procedure, pick_one, that takes three inputs: a Boolean # and two other values. If the first input is True, it should return # the second input. If the first input is False, it should return the # third input.# For example, pick_one(True, 37, &apos;hello&apos;) should return 37, and# pick_one(False, 37, &apos;hello&apos;) should return &apos;hello&apos;.def pick_one():print pick_one(True, 37, &apos;hello&apos;)#&gt;&gt;&gt; 37print pick_one(False, 37, &apos;hello&apos;)#&gt;&gt;&gt; helloprint pick_one(True, &apos;red pill&apos;, &apos;blue pill&apos;)#&gt;&gt;&gt; red pillprint pick_one(False, &apos;sunny&apos;, &apos;rainy&apos;)#&gt;&gt;&gt; rainy https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/K2s3b4XTaN0.mp412 Triangular Numbers1234567891011121314151617181920212223242526# Question 2. Triangular Numbers# The triangular numbers are the numbers 1, 3, 6, 10, 15, 21, ...# They are calculated as follows.# 1# 1 + 2 = 3# 1 + 2 + 3 = 6# 1 + 2 + 3 + 4 = 10# 1 + 2 + 3 + 4 + 5 = 15# Write a procedure, triangular, that takes as its input a positive # integer n and returns the nth triangular number.def triangular():print triangular(1)#&gt;&gt;&gt;1print triangular(3)#&gt;&gt;&gt; 6print triangular(10)#&gt;&gt;&gt; 55 https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/tQplGM4DtTA.mp4 Linear TimeFor the procedures below, check the procedures whose running time scales linearly with the length of the input in the worst case. You may assume the elements in input_list are fairly small numbers. def proc1(input_list): maximum = None for element in input_list : if not maximum or maximum &lt; element: maximum = element return maximum def proc2(input_list): sum = 0 while len(input_list) &gt; 0: sum = sum + input_list[0] # Assume input_list[0] is constant time input_list = input_list[1:] # Assume input_list[1:] is constant time return sum def proc3(input_list): for i in range(0, len(input_list)): for j in range(0, len(input_list)): if input_list[i] == input_list[j] and i != j: return False return True https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/nnNQTjmc3DY.mp4 Remove Tags12345678910111213141516171819202122232425262728# Question 4: Remove Tags# When we add our words to the index, we don&apos;t really want to include# html tags such as &lt;body&gt;, &lt;head&gt;, &lt;table&gt;, &lt;a href=&quot;...&quot;&gt; and so on.# Write a procedure, remove_tags, that takes as input a string and returns# a list of words, in order, with the tags removed. Tags are defined to be# strings surrounded by &lt; &gt;. Words are separated by whitespace or tags. # You may assume the input does not include any unclosed tags, that is, # there will be no &apos;&lt;&apos; without a following &apos;&gt;&apos;.def remove_tags():print remove_tags(&apos;&apos;&apos;&lt;h1&gt;Title&lt;/h1&gt;&lt;p&gt;This is a &lt;a href=&quot;http://www.udacity.com&quot;&gt;link&lt;/a&gt;.&lt;p&gt;&apos;&apos;&apos;)#&gt;&gt;&gt; [&apos;Title&apos;,&apos;This&apos;,&apos;is&apos;,&apos;a&apos;,&apos;link&apos;,&apos;.&apos;]print remove_tags(&apos;&apos;&apos;&lt;table cellpadding=&apos;3&apos;&gt; &lt;tr&gt;&lt;td&gt;Hello&lt;/td&gt;&lt;td&gt;World!&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt;&apos;&apos;&apos;)#&gt;&gt;&gt; [&apos;Hello&apos;,&apos;World!&apos;]print remove_tags(&quot;&lt;hello&gt;&lt;goodbye&gt;&quot;)#&gt;&gt;&gt; []print remove_tags(&quot;This is plain text.&quot;)#&gt;&gt;&gt; [&apos;This&apos;, &apos;is&apos;, &apos;plain&apos;, &apos;text.&apos;] https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/5LrTUeawyfI.mp41234567def remove_tags(content): start_pos = content.find(&apos;&lt;&apos;) while start_pos !=-1: end_pos = content.find(&apos;&gt;&apos;,start_pos) content=content[:start_pos]+&apos; &apos;+content[end_pos+1:] start_pos = content.find(&apos;&lt;&apos;) return content.split() Date Converter1234567891011121314151617181920212223242526272829303132333435363738# Question 5: Date Converter# Write a procedure date_converter which takes two inputs. The first is # a dictionary and the second a string. The string is a valid date in # the format month/day/year. The procedure should return# the date written in the form &lt;day&gt; &lt;name of month&gt; &lt;year&gt;.# For example , if the# dictionary is in English,english = &#123;1:&quot;January&quot;, 2:&quot;February&quot;, 3:&quot;March&quot;, 4:&quot;April&quot;, 5:&quot;May&quot;, 6:&quot;June&quot;, 7:&quot;July&quot;, 8:&quot;August&quot;, 9:&quot;September&quot;,10:&quot;October&quot;, 11:&quot;November&quot;, 12:&quot;December&quot;&#125;# then &quot;5/11/2012&quot; should be converted to &quot;11 May 2012&quot;. # If the dictionary is in Swedishswedish = &#123;1:&quot;januari&quot;, 2:&quot;februari&quot;, 3:&quot;mars&quot;, 4:&quot;april&quot;, 5:&quot;maj&quot;, 6:&quot;juni&quot;, 7:&quot;juli&quot;, 8:&quot;augusti&quot;, 9:&quot;september&quot;,10:&quot;oktober&quot;, 11:&quot;november&quot;, 12:&quot;december&quot;&#125;# then &quot;5/11/2012&quot; should be converted to &quot;11 maj 2012&quot;.# Hint: int(&apos;12&apos;) converts the string &apos;12&apos; to the integer 12.def date_converter():print date_converter(english, &apos;5/11/2012&apos;)#&gt;&gt;&gt; 11 May 2012print date_converter(english, &apos;5/11/12&apos;)#&gt;&gt;&gt; 11 May 12print date_converter(swedish, &apos;5/11/2012&apos;)#&gt;&gt;&gt; 11 maj 2012print date_converter(swedish, &apos;12/5/1791&apos;)#&gt;&gt;&gt; 5 december 1791 https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/YgW5c4mH19g.mp41234567def date_converter(dic,string_date): start_pos=string_date.find(&apos;/&apos;) end_pos=string_date.find(&apos;/&apos;,start_pos+1) month=int(string_date[:start_pos]) day = string_date[start_pos+1:end_pos] year=string_date[end_pos+1:] return day+&apos; &apos;+dic[month]+&apos; &apos;+year or123def date_converter(dic,string_date): month,day,year=string_date.split(&apos;/&apos;) return day+&apos; &apos;+dic[int(month)]+&apos; &apos;+year TerminationFor each of the procedures defined below, check the box if the procedure always terminates for all inputs that are natural numbers (1,2,3…). def proc1(n): while True: n = n - 1 if n == 0: break return 3 def proc2(n): if n == 0: return n return 1 + proc2(n - 2) def proc3(n): if n &lt;= 3: return 1 return proc3(n - 1) + proc3(n - 2) + proc3(n - 3) https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/RBc-2ZVuH9E.mp4 Find and Replace123456789101112131415161718192021222324252627282930313233343536# Question 7: Find and Replace# For this question you need to define two procedures:# make_converter(match, replacement)# Takes as input two strings and returns a converter. It doesn&apos;t have# to make a specific type of thing. It can # return anything you would find useful in apply_converter.# apply_converter(converter, string)# Takes as input a converter (produced by make_converter), and # a string, and returns the result of applying the converter to the # input string. This replaces all occurrences of the match used to # build the converter, with the replacement. It keeps doing # replacements until there are no more opportunities for replacements.def make_converter(match, replacement):def apply_converter(converter, string):# For example,c1 = make_converter(&apos;aa&apos;, &apos;a&apos;)print apply_converter(c1, &apos;aaaa&apos;)#&gt;&gt;&gt; ac = make_converter(&apos;aba&apos;, &apos;b&apos;)print apply_converter(c, &apos;aaaaaabaaaaa&apos;)#&gt;&gt;&gt; ab# Note that this process is not guaranteed to terminate for all inputs# (for example, apply_converter(make_converter(&apos;a&apos;, &apos;aa&apos;), &apos;a&apos;) would # run forever). https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/-xUQEeXjC8g.mp41234567891011def make_converter(match, replacement): return [match, replacement]def apply_converter(converter, string): previous=None while previous!=string: previous=string position=string.find(converter[0]) if position!=-1: string=string[:position] + converter[1] + string[position+len(converter[0]):] return string Longest Repetition123456789101112131415161718192021222324252627# Question 8: Longest Repetition# Define a procedure, longest_repetition, that takes as input a # list, and returns the element in the list that has the most # consecutive repetitions. If there are multiple elements that # have the same number of longest repetitions, the result should # be the one that appears first. If the input list is empty, # it should return None.def longest_repetition():#For example,print longest_repetition([1, 2, 2, 3, 3, 3, 2, 2, 1])# 3print longest_repetition([&apos;a&apos;, &apos;b&apos;, &apos;b&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;d&apos;, &apos;d&apos;])# bprint longest_repetition([1,2,3,4,5])# 1print longest_repetition([])# None https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/LWSvPPfH9Cw.mp4123456789101112131415def longest_repetition(input_list): best=None length=0 current=None current_length=0 for element in input_list: if current != element: current_length=1 current=element else: current_length+=1 if current_length&gt;length: best=current length=current_length return best Deep Reverse1234567891011121314151617181920212223242526272829303132# Question 9: Deep Reverse# Define a procedure, deep_reverse, that takes as input a list, # and returns a new list that is the deep reverse of the input list. # This means it reverses all the elements in the list, and if any # of those elements are lists themselves, reverses all the elements # in the inner list, all the way down. # Note: The procedure must not change the input list.# The procedure is_list below is from Homework 6. It returns True if # p is a list and False if it is not.def is_list(p): return isinstance(p, list)def deep_reverse():#For example,p = [1, [2, 3, [4, [5, 6]]]]print deep_reverse(p)#&gt;&gt;&gt; [[[[6, 5], 4], 3, 2], 1]print p#&gt;&gt;&gt; [1, [2, 3, [4, [5, 6]]]]q = [1, [2,3], 4, [5,6]]print deep_reverse(q)#&gt;&gt;&gt; [ [6,5], 4, [3, 2], 1]print q#&gt;&gt;&gt; [1, [2,3], 4, [5,6]] https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/aYLkoPSiiG0.mp412345678def deep_reverse(input_list): if is_list(input_list): new_list=[] for i in range(len(input_list)-1,-1,-1): new_list.append(deep_reverse(input_list[i])) return new_list else: return input_list Challenging Practice ProblemsStirling and Bell123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107# One Gold Star# Question 1-star: Stirling and Bell Numbers# The number of ways of splitting n items in k non-empty sets is called# the Stirling number, S(n,k), of the second kind. For example, the group # of people Dave, Sarah, Peter and Andy could be split into two groups in # the following ways.# 1. Dave, Sarah, Peter Andy# 2. Dave, Sarah, Andy Peter# 3. Dave, Andy, Peter Sarah# 4. Sarah, Andy, Peter Dave# 5. Dave, Sarah Andy, Peter# 6. Dave, Andy Sarah, Peter# 7. Dave, Peter Andy, Sarah# so S(4,2) = 7# If instead we split the group into one group, we have just one way to # do it.# 1. Dave, Sarah, Peter, Andy# so S(4,1) = 1# or into four groups, there is just one way to do it as well# 1. Dave Sarah Peter Andy# so S(4,4) = 1# If we try to split into more groups than we have people, there are no# ways to do it.# The formula for calculating the Stirling numbers is# S(n, k) = k*S(n-1, k) + S(n-1, k-1)# Furthermore, the Bell number B(n) is the number of ways of splitting n # into any number of parts, that is,# B(n) is the sum of S(n,k) for k =1,2, ... , n.# Write two procedures, stirling and bell. The first procedure, stirling # takes as its inputs two positive integers of which the first is the # number of items and the second is the number of sets into which those # items will be split. The second procedure, bell, takes as input a # positive integer n and returns the Bell number B(n).def stirling(): def bell(): #print stirling(1,1)#&gt;&gt;&gt; 1#print stirling(2,1)#&gt;&gt;&gt; 1#print stirling(2,2)#&gt;&gt;&gt; 1#print stirling(2,3)#&gt;&gt;&gt;0#print stirling(3,1)#&gt;&gt;&gt; 1#print stirling(3,2)#&gt;&gt;&gt; 3#print stirling(3,3)#&gt;&gt;&gt; 1#print stirling(4,1)#&gt;&gt;&gt; 1#print stirling(4,2)#&gt;&gt;&gt; 7#print stirling(4,3)#&gt;&gt;&gt; 6#print stirling(4,4)#&gt;&gt;&gt; 1#print stirling(5,1)#&gt;&gt;&gt; 1#print stirling(5,2)#&gt;&gt;&gt; 15#print stirling(5,3)#&gt;&gt;&gt; 25#print stirling(5,4)#&gt;&gt;&gt; 10#print stirling(5,5)#&gt;&gt;&gt; 1#print stirling(20,15)#&gt;&gt;&gt; 452329200#print bell(1)#&gt;&gt;&gt; 1#print bell(2)#&gt;&gt;&gt; 2#print bell(3)#&gt;&gt;&gt; 5#print bell(4)#&gt;&gt;&gt; 15#print bell(5)#&gt;&gt;&gt; 52#print bell(15)#&gt;&gt;&gt; 1382958545 https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/TJ4M9ZyAZ3I.mp4123456789101112def stirling(n,k): if n&lt;k: return 0 if n==k or k==1: return 1 return k*stirling(n-1, k) + stirling(n-1, k-1)def bell(n): result=0 for i in range(1,n+1): result+=stirling(n,i) return result Combating Link Spam123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263# Two Gold Stars# Question 2: Combatting Link Spam# One of the problems with our page ranking system is pages can # collude with each other to improve their page ranks. We consider # A-&gt;B a reciprocal link if there is a link path from B to A of length # equal to or below the collusion level, k. The length of a link path # is the number of links which are taken to travel from one page to the # other.# If k = 0, then a link from A to A is a reciprocal link for node A, # since no links needs to be taken to get from A to A.# If k=1, B-&gt;A would count as a reciprocal link if there is a link # A-&gt;B, which includes one link and so is of length 1. (it requires # two parties, A and B, to collude to increase each others page rank).# If k=2, B-&gt;A would count as a reciprocal link for node A if there is# a path A-&gt;C-&gt;B, for some page C, (link path of length 2),# or a direct link A-&gt; B (link path of length 1).# Modify the compute_ranks code to # - take an extra input k, which is a non-negative integer, and # - exclude reciprocal links of length up to and including k from # helping the page rank.def compute_ranks(graph): d = 0.8 # damping factor numloops = 10 ranks = &#123;&#125; npages = len(graph) for page in graph: ranks[page] = 1.0 / npages for i in range(0, numloops): newranks = &#123;&#125; for page in graph: newrank = (1 - d) / npages for node in graph: if page in graph[node]: newrank = newrank + d * (ranks[node]/len(graph[node])) newranks[page] = newrank ranks = newranks return ranks# For exampleg = &#123;&apos;a&apos;: [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;], &apos;b&apos;:[&apos;a&apos;], &apos;c&apos;:[&apos;d&apos;], &apos;d&apos;:[&apos;a&apos;]&#125;#print compute_ranks(g, 0) # the a-&gt;a link is reciprocal#&gt;&gt;&gt; &#123;&apos;a&apos;: 0.26676872354238684, &apos;c&apos;: 0.1216391112164609,# &apos;b&apos;: 0.1216391112164609, &apos;d&apos;: 0.1476647842238683&#125;#print compute_ranks(g, 1) # a-&gt;a, a-&gt;b, b-&gt;a links are reciprocal#&gt;&gt;&gt; &#123;&apos;a&apos;: 0.14761759762962962, &apos;c&apos;: 0.08936469270123457,# &apos;b&apos;: 0.04999999999999999, &apos;d&apos;: 0.12202199703703702&#125;#print compute_ranks(g, 2)# a-&gt;a, a-&gt;b, b-&gt;a, a-&gt;c, c-&gt;d, d-&gt;a links are reciprocal# (so all pages end up with the same rank)#&gt;&gt;&gt; &#123;&apos;a&apos;: 0.04999999999999999, &apos;c&apos;: 0.04999999999999999,# &apos;b&apos;: 0.04999999999999999, &apos;d&apos;: 0.04999999999999999&#125; There was a typo in the last test example. # a-&gt;a, a-&gt;b, b-&gt;a, a-&gt;c, c-&gt;d, c-&gt;a links are reciprocal should read # a-&gt;a, a-&gt;b, b-&gt;a, a-&gt;c, c-&gt;d, d-&gt;a links are reciprocal https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/hP-UDkuUL0o.mp412345678910111213141516171819202122232425262728def is_reciprocal_link(graph,source,destination,k): if k==0: return source==destination if source in graph[destination]: return True for node in graph[destination]: if is_reciprocal_link(graph,source,node,k-1): return True return False def compute_ranks(graph,k): d = 0.8 # damping factor numloops = 10 ranks = &#123;&#125; npages = len(graph) for page in graph: ranks[page] = 1.0 / npages for i in range(0, numloops): newranks = &#123;&#125; for page in graph: newrank = (1 - d) / npages for node in graph: if page in graph[node]: # node links to page if not is_reciprocal_link(graph,node,page,k): newrank = newrank + d * (ranks[node]/len(graph[node])) newranks[page] = newrank ranks = newranks return ranks Elementary Cellular Automatonhttps://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/M_pkidxeGMY.mp412345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394# THREE GOLD STARS# Question 3-star: Elementary Cellular Automaton# Please see the video for additional explanation.# A one-dimensional cellular automata takes in a string, which in our # case, consists of the characters &apos;.&apos; and &apos;x&apos;, and changes it according # to some predetermined rules. The rules consider three characters, which # are a character at position k and its two neighbours, and determine # what the character at the corresponding position k will be in the new # string.# For example, if the character at position k in the string is &apos;.&apos; and # its neighbours are &apos;.&apos; and &apos;x&apos;, then the pattern is &apos;..x&apos;. We look up # &apos;..x&apos; in the table below. In the table, &apos;..x&apos; corresponds to &apos;x&apos; which # means that in the new string, &apos;x&apos; will be at position k.# Rules:# pattern in position k in contribution to# Value current string new string pattern number# is 0 if replaced by &apos;.&apos;# and value if replaced# by &apos;x&apos;# 1 &apos;...&apos; &apos;.&apos; 1 * 0# 2 &apos;..x&apos; &apos;x&apos; 2 * 1# 4 &apos;.x.&apos; &apos;x&apos; 4 * 1# 8 &apos;.xx&apos; &apos;x&apos; 8 * 1# 16 &apos;x..&apos; &apos;.&apos; 16 * 0# 32 &apos;x.x&apos; &apos;.&apos; 32 * 0# 64 &apos;xx.&apos; &apos;.&apos; 64 * 0# 128 &apos;xxx&apos; &apos;x&apos; 128 * 1# ----------# 142# To calculate the patterns which will have the central character x, work # out the values required to sum to the pattern number. For example,# 32 = 32 so only pattern 32 which is x.x changes the central position to# an x. All the others have a . in the next line.# 23 = 16 + 4 + 2 + 1 which means that &apos;x..&apos;, &apos;.x.&apos;, &apos;..x&apos; and &apos;...&apos; all # lead to an &apos;x&apos; in the next line and the rest have a &apos;.&apos;# For pattern 142, and starting string# ...........x...........# the new strings created will be# ..........xx........... (generations = 1)# .........xx............ (generations = 2)# ........xx............. (generations = 3)# .......xx.............. (generations = 4)# ......xx............... (generations = 5)# .....xx................ (generations = 6)# ....xx................. (generations = 7)# ...xx.................. (generations = 8)# ..xx................... (generations = 9)# .xx.................... (generations = 10)# Note that the first position of the string is next to the last position # in the string.# Define a procedure, cellular_automaton, that takes three inputs: # a non-empty string, # a pattern number which is an integer between 0 and 255 that# represents a set of rules, and # a positive integer, n, which is the number of generations. # The procedure should return a string which is the result of# applying the rules generated by the pattern to the string n times.def cellular_automaton():print cellular_automaton(&apos;.x.x.x.x.&apos;, 17, 2)#&gt;&gt;&gt; xxxxxxx..print cellular_automaton(&apos;.x.x.x.x.&apos;, 249, 3)#&gt;&gt;&gt; .x..x.x.xprint cellular_automaton(&apos;...x....&apos;, 125, 1)#&gt;&gt;&gt; xx.xxxxxprint cellular_automaton(&apos;...x....&apos;, 125, 2)#&gt;&gt;&gt; .xxx....print cellular_automaton(&apos;...x....&apos;, 125, 3)#&gt;&gt;&gt; .x.xxxxxprint cellular_automaton(&apos;...x....&apos;, 125, 4)#&gt;&gt;&gt; xxxx...xprint cellular_automaton(&apos;...x....&apos;, 125, 5)#&gt;&gt;&gt; ...xxx.xprint cellular_automaton(&apos;...x....&apos;, 125, 6)#&gt;&gt;&gt; xx.x.xxxprint cellular_automaton(&apos;...x....&apos;, 125, 7)#&gt;&gt;&gt; .xxxxx..print cellular_automaton(&apos;...x....&apos;, 125, 8)#&gt;&gt;&gt; .x...xxxprint cellular_automaton(&apos;...x....&apos;, 125, 9)#&gt;&gt;&gt; xxxx.x.xprint cellular_automaton(&apos;...x....&apos;, 125, 10)#&gt;&gt;&gt; ...xxxxx Sorry about this. There is a mistake in the video in generation 3 for pattern 30, which makes all the following lines incorrect as well. The corrected output is: ...x.... (input) ..xxx... ( generations = 1) .xx..x.. ( generations = 2) xx.xxxx. ( generations = 3) x..x.... ( generations = 4) xxxxx..x ( generations = 5) .....xxx ( generations = 6) Additional information: Elementary Cellular Automaton at Wolfram’s Mathworld12345678910111213141516171819202122def cellular_automaton(input_string,pattern_number,generation): patterns=&#123;&#125; pattern_list=[&apos;...&apos;,&apos;..x&apos;,&apos;.x.&apos;,&apos;.xx&apos;,&apos;x..&apos;,&apos;x.x&apos; ,&apos;xx.&apos;,&apos;xxx&apos;] n=len(input_string) # build my patterns dictionary for i in range(7,-1,-1): if pattern_number/(2**i)==1: patterns[pattern_list[i]]=&apos;x&apos; pattern_number=pattern_number-2**i else: patterns[pattern_list[i]]=&apos;.&apos; # apply patterns to input_string # with generation times for unuse in range(generation): new_string=&apos;&apos; for i in range(n): pattern=input_string[i-1]+input_string[i]+input_string[(i+1)%n] new_string = new_string + patterns[pattern] input_string=new_string return new_string https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/Jc1vOOWfQaA.mp4 Code EditorA Place to Try Things Out1234567# Use this to try out anything you like. Use print to display your answer# when you press the &quot;Test Run&quot; button.# Use the &quot;Reset&quot; button to reset the screen a = 1e+9for i in range(1000000): a+=1print a - 1e+9 Project PrepProject DescriptionFinal Project DescriptionCongratulations on making it to the final project! Your job is to take simple text strings like “Alex likes Carla, Ryan, and Priya” and turn them into a social network. To do this, you must complete a number of required procedures, as described on the next screen. You must also create a “make-your-own” procedure. Most of this project will take place inside the browser and most of it will be auto-graded. Feel free to share your final code with your peers in the Discussion Forum for additional feedback. If you have any questions, ask on the Discussion Forum! Gamer’s Network123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264# --------------------------- ## Intro to CS Final Project ## Gaming Social Network ## --------------------------- ### Background# ==========# You and your friend have decided to start a company that hosts a gaming# social network site. Your friend will handle the website creation (they know # what they are doing, having taken our web development class). However, it is # up to you to create a data structure that manages the game-network information # and to define several procedures that operate on the network. ## In a website, the data is stored in a database. In our case, however, all the # information comes in a big string of text. Each pair of sentences in the text # is formatted as follows: # # &lt;user&gt; is connected to &lt;user1&gt;, ..., &lt;userM&gt;.&lt;user&gt; likes to play &lt;game1&gt;, ..., &lt;gameN&gt;.## For example:# # John is connected to Bryant, Debra, Walter.John likes to play The Movie: The Game, The Legend of Corgi, Dinosaur Diner.# # Note that each sentence will be separated from the next by only a period. There will # not be whitespace or new lines between sentences.# # Your friend records the information in that string based on user activity on # the website and gives it to you to manage. You can think of every pair of# sentences as defining a user&apos;s profile.## Consider the data structures that we have used in class - lists, dictionaries,# and combinations of the two (e.g. lists of dictionaries). Pick one that# will allow you to manage the data above and implement the procedures below. # # You may assume that &lt;user&gt; is a unique identifier for a user. For example, there# can be at most one &apos;John&apos; in the network. Furthermore, connections are not # symmetric - if &apos;Bob&apos; is connected to &apos;Alice&apos;, it does not mean that &apos;Alice&apos; is# connected to &apos;Bob&apos;.## Project Description# ====================# Your task is to complete the procedures according to the specifications below# as well as to implement a Make-Your-Own procedure (MYOP). You are encouraged # to define any additional helper procedures that can assist you in accomplishing # a task. You are encouraged to test your code by using print statements and the # Test Run button. # ----------------------------------------------------------------------------- # Example string input. Use it to test your code.example_input=&quot;John is connected to Bryant, Debra, Walter.\John likes to play The Movie: The Game, The Legend of Corgi, Dinosaur Diner.\Bryant is connected to Olive, Ollie, Freda, Mercedes.\Bryant likes to play City Comptroller: The Fiscal Dilemma, Super Mushroom Man.\Mercedes is connected to Walter, Robin, Bryant.\Mercedes likes to play The Legend of Corgi, Pirates in Java Island, Seahorse Adventures.\Olive is connected to John, Ollie.\Olive likes to play The Legend of Corgi, Starfleet Commander.\Debra is connected to Walter, Levi, Jennie, Robin.\Debra likes to play Seven Schemers, Pirates in Java Island, Dwarves and Swords.\Walter is connected to John, Levi, Bryant.\Walter likes to play Seahorse Adventures, Ninja Hamsters, Super Mushroom Man.\Levi is connected to Ollie, John, Walter.\Levi likes to play The Legend of Corgi, Seven Schemers, City Comptroller: The Fiscal Dilemma.\Ollie is connected to Mercedes, Freda, Bryant.\Ollie likes to play Call of Arms, Dwarves and Swords, The Movie: The Game.\Jennie is connected to Levi, John, Freda, Robin.\Jennie likes to play Super Mushroom Man, Dinosaur Diner, Call of Arms.\Robin is connected to Ollie.\Robin likes to play Call of Arms, Dwarves and Swords.\Freda is connected to Olive, John, Debra.\Freda likes to play Starfleet Commander, Ninja Hamsters, Seahorse Adventures.&quot;# ----------------------------------------------------------------------------- # create_data_structure(string_input): # Parses a block of text (such as the one above) and stores relevant # information into a data structure. You are free to choose and design any # data structure you would like to use to manage the information.# # Arguments: # string_input: block of text containing the network information## You may assume that for all the test cases we will use, you will be given the # connections and games liked for all users listed on the right-hand side of an# &apos;is connected to&apos; statement. For example, we will not use the string # &quot;A is connected to B.A likes to play X, Y, Z.C is connected to A.C likes to play X.&quot;# as a test case for create_data_structure because the string does not # list B&apos;s connections or liked games.# # The procedure should be able to handle an empty string (the string &apos;&apos;) as input, in# which case it should return a network with no users.# # Return:# The newly created network data structuredef create_data_structure(string_input): return network# ----------------------------------------------------------------------------- # # Note that the first argument to all procedures below is &apos;network&apos; This is the ## data structure that you created with your create_data_structure procedure, ## though it may be modified as you add new users or new connections. Each ## procedure below will then modify or extract information from &apos;network&apos; # # ----------------------------------------------------------------------------- ## ----------------------------------------------------------------------------- # get_connections(network, user): # Returns a list of all the connections that user has## Arguments: # network: the gamer network data structure# user: a string containing the name of the user# # Return: # A list of all connections the user has.# - If the user has no connections, return an empty list.# - If the user is not in network, return None.def get_connections(network, user): return []# ----------------------------------------------------------------------------- # get_games_liked(network, user): # Returns a list of all the games a user likes## Arguments: # network: the gamer network data structure# user: a string containing the name of the user# # Return: # A list of all games the user likes.# - If the user likes no games, return an empty list.# - If the user is not in network, return None.def get_games_liked(network,user): return []# ----------------------------------------------------------------------------- # add_connection(network, user_A, user_B): # Adds a connection from user_A to user_B. Make sure to check that both users # exist in network.# # Arguments: # network: the gamer network data structure # user_A: a string with the name of the user the connection is from# user_B: a string with the name of the user the connection is to## Return: # The updated network with the new connection added.# - If a connection already exists from user_A to user_B, return network unchanged.# - If user_A or user_B is not in network, return False.def add_connection(network, user_A, user_B): return network# ----------------------------------------------------------------------------- # add_new_user(network, user, games): # Creates a new user profile and adds that user to the network, along with# any game preferences specified in games. Assume that the user has no # connections to begin with.# # Arguments:# network: the gamer network data structure# user: a string containing the name of the user to be added to the network# games: a list of strings containing the user&apos;s favorite games, e.g.:# [&apos;Ninja Hamsters&apos;, &apos;Super Mushroom Man&apos;, &apos;Dinosaur Diner&apos;]## Return: # The updated network with the new user and game preferences added. The new user # should have no connections.# - If the user already exists in network, return network *UNCHANGED* (do not change# the user&apos;s game preferences)def add_new_user(network, user, games): return network # ----------------------------------------------------------------------------- # get_secondary_connections(network, user): # Finds all the secondary connections (i.e. connections of connections) of a # given user.# # Arguments: # network: the gamer network data structure# user: a string containing the name of the user## Return: # A list containing the secondary connections (connections of connections).# - If the user is not in the network, return None.# - If a user has no primary connections to begin with, return an empty list.# # NOTE: # It is OK if a user&apos;s list of secondary connections includes the user # himself/herself. It is also OK if the list contains a user&apos;s primary # connection that is a secondary connection as well.def get_secondary_connections(network, user): return []# ----------------------------------------------------------------------------- # count_common_connections(network, user_A, user_B): # Finds the number of people that user_A and user_B have in common.# # Arguments: # network: the gamer network data structure# user_A: a string containing the name of user_A# user_B: a string containing the name of user_B## Return: # The number of connections in common (as an integer).# - If user_A or user_B is not in network, return False.def count_common_connections(network, user_A, user_B): return 0# ----------------------------------------------------------------------------- # find_path_to_friend(network, user_A, user_B): # Finds a connections path from user_A to user_B. It has to be an existing # path but it DOES NOT have to be the shortest path.# # Arguments:# network: The network you created with create_data_structure. # user_A: String holding the starting username (&quot;Abe&quot;)# user_B: String holding the ending username (&quot;Zed&quot;)# # Return:# A list showing the path from user_A to user_B.# - If such a path does not exist, return None.# - If user_A or user_B is not in network, return None.## Sample output:# &gt;&gt;&gt; print find_path_to_friend(network, &quot;Abe&quot;, &quot;Zed&quot;)# &gt;&gt;&gt; [&apos;Abe&apos;, &apos;Gel&apos;, &apos;Sam&apos;, &apos;Zed&apos;]# This implies that Abe is connected with Gel, who is connected with Sam, # who is connected with Zed.# # NOTE:# You must solve this problem using recursion!# # Hints: # - Be careful how you handle connection loops, for example, A is connected to B. # B is connected to C. C is connected to B. Make sure your code terminates in # that case.# - If you are comfortable with default parameters, you might consider using one # in this procedure to keep track of nodes already visited in your search. You # may safely add default parameters since all calls used in the grading script # will only include the arguments network, user_A, and user_B.def find_path_to_friend(network, user_A, user_B): # your RECURSIVE solution here! return None# Make-Your-Own-Procedure (MYOP)# ----------------------------------------------------------------------------- # Your MYOP should either perform some manipulation of your network data # structure (like add_new_user) or it should perform some valuable analysis of # your network (like path_to_friend). Don&apos;t forget to comment your MYOP. You # may give this procedure any name you want.# Replace this with your own procedure! You can also uncomment the lines below# to see how your code behaves. Have fun!#net = create_data_structure(example_input)#print net#print get_connections(net, &quot;Debra&quot;)#print get_connections(net, &quot;Mercedes&quot;)#print get_games_liked(net, &quot;John&quot;)#print add_connection(net, &quot;John&quot;, &quot;Freda&quot;)#print add_new_user(net, &quot;Debra&quot;, []) #print add_new_user(net, &quot;Nick&quot;, [&quot;Seven Schemers&quot;, &quot;The Movie: The Game&quot;]) # True#print get_secondary_connections(net, &quot;Mercedes&quot;)#print count_common_connections(net, &quot;Mercedes&quot;, &quot;John&quot;)#print find_path_to_friend(net, &quot;John&quot;, &quot;Ollie&quot;)]]></content>
      <categories>
        <category>Udacity</category>
        <category>Intro to CS</category>
      </categories>
      <tags>
        <tag>Udacity</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Test blog]]></title>
    <url>%2F2017%2F02%2F02%2Ftest-blog%2F</url>
    <content type="text"><![CDATA[This is a test blog $\omega_i$]]></content>
      <tags>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2017%2F02%2F01%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>